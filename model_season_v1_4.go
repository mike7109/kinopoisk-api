/*
Документация для неофициального API кинопоиска (kinopoisk.dev).

 <!-- Yandex.Metrika counter --> <div><img src=\"https://mc.yandex.ru/watch/62307766\" style=\"position:absolute; left:-9999px;\" alt=\"\" /></div> <!-- /Yandex.Metrika counter --> <p>Через этот API вы можете получить практически все данные из кинопоиска. Больше информации вы можете получить изучив эту документацию.</p> <h2>Как работать с документацией?</h2> <p> Для начала работы с API вам необходимо получить токен, который вы можете получить в боте <a href=\"https://t.me/kinopoiskdev_bot\">@kinopoiskdev_bot</a>. <br /> После получения токена, вам необходимо авторизоваться в документации, для этого нажмите на кнопку <strong>Authorize</strong> и введите токен в поле <strong>Value</strong>.<br /> После авторизации вы можете отправлять запросы к API, для этого нажмите на кнопку <strong>Try it out</strong> и заполните необходимые поля для составления нужного фильтра.<br /> После заполнения полей нажмите на кнопку <strong>Execute</strong> и получите ответ от API и пример запроса. </p> <h3>Как работать с API?</h3> <p> API работает по принципу REST, все запросы отправляются на адрес <code>https://api.kinopoisk.dev/</code> с указанием версии API и необходимого ресурса.<br /> Все запросы к API кинопоиска должны содержать заголовок <code>X-API-KEY</code> с вашим токеном. В противном случае вы получите ошибку <code>401</code>.<br /> При составлении запроса учитывайте, что все параметры должны быть в <code>query</code> и <code>path</code>. В зависимости от метода который вы используете. Например, вы хотите получить список фильмов за 2023 год в жанре <code>криминал</code>, тогда ваш запрос будет выглядеть так: <code>https://api.kinopoisk.dev/v1.4/movie?year=2023&genres.name=криминал</code>. Или вы хотите получить список фильмов с рейтингом выше 8, тогда ваш запрос будет выглядеть так: <code>https://api.kinopoisk.dev/v1.4/movie?rating.imdb=8-10</code>. Документация kinopoisk api может помочь вам составить нужный запрос, для этого воспользуйтесь ее конструктором. </p> <h3>Особенности синтекса query параметров</h3> <p> Ключи в query параметрах имеют разные типы значений. В зависимости от типа значения, вы можете использовать разные операторы для фильтрации для поиска максимально релевантного фильма, сериала и т.д. в базе. <br /> Поля с типом <code>Number</code> могут принимать значения в форматах: <code>rating.kp=1-10</code>, <code>rating.kp=1</code>, <code>year=2022&year=2023</code>. <br /> Поля с типом <code>Date</code> могут принимать значения в форматах: <code>premiere.russia=dd.mm.yyyy-dd.mm.yyyy</code>, <code>premiere.russia=dd.mm.yyyy</code>. <br /> Поля с типом <code>String</code> могут принимать значения в форматах: <code>genres.name=драма</code>, <code>genres.name=криминал</code>, <code>genres.name=криминал&genres.name=драма</code> <br/> Поля с типом <code>Boolean</code> могут принимать значения в форматах: <code>isSeries=true</code>, <code>isSeries=false</code>. <br /> Параметры жанров и стран могут принимать операторы <code>+</code> и <code>!</code>, для указания включаемых и исключаемых значений. Например, вы хотите получить список фильмов в жанрах <code>драма</code> и <code>криминал</code>, тогда ваш запрос будет выглядеть так: <code>genres.name=+драма&genres.name=+криминал</code>. Или вы хотите получить список фильмов с жанром <code>драма</code> и без жанра <code>криминал</code>, тогда ваш запрос будет выглядеть так: <code>genres.name=+драма&genres.name=!криминал</code>. <br /> </p> <p> Расшифровка операторов: <ul>   <li><code>!</code> - исключить. Этот символ нужно отправлять в кодированной форме <code>%21</code></li>   <li><code>+</code> - включить. Этот символ нужно отправлять в кодированной форме <code>%2B</code></li>   <li><code>-</code> - диапазон значений, используется в качестве разделителя.</li> </ul> </p>  <p>По вопросам работы с API обращайтесь в чат <a href=\"https://t.me/+jeHPZVXiLPFhODJi\">Developer Community KinopoiskDev</a>.</p>  <p>Если вы обнаружили ошибку или у вас есть предложения по улучшению, создавайте issue на <a href=\"https://github.com/mdwitr0/kinopoiskdev\">GitHub</a>.</p>  <h3>Полезные ссылки:</h3> <ul>   <li><a href=\"https://kinopoiskdev.readme.io\">Более удобная документация</a></li>   <li><a href=\"https://github.com/OpenMovieDB/kinopoiskdev_client\">JavaScript и TypeScript клиент (Устарел, ждет обновления)</a></li>   <li><a href=\"https://github.com/odi1n/kinopoisk_dev\">Python клиент (Устарел, ждет обновления)</a></li>   <li><a href=\"/documentation-json\">OpenAPI Specification (JSON)</a></li>   <li><a href=\"/documentation-yaml\">OpenAPI Specification (YAML)</a></li> </ul> 

API version: 1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kinopoisk_api

import (
	"encoding/json"
	"time"
)

// SeasonV14 struct for SeasonV14
type SeasonV14 struct {
	MovieId *float32 `json:"movieId,omitempty"`
	Number *float32 `json:"number,omitempty"`
	EpisodesCount *float32 `json:"episodesCount,omitempty"`
	Episodes []EpisodeV14 `json:"episodes,omitempty"`
	Poster *ShortImage `json:"poster,omitempty"`
	Name *string `json:"name,omitempty"`
	EnName *string `json:"enName,omitempty"`
	Duration *float32 `json:"duration,omitempty"`
	Description *string `json:"description,omitempty"`
	EnDescription *string `json:"enDescription,omitempty"`
	AirDate *string `json:"airDate,omitempty"`
	UpdatedAt time.Time `json:"updatedAt"`
	CreatedAt time.Time `json:"createdAt"`
}

// NewSeasonV14 instantiates a new SeasonV14 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSeasonV14(updatedAt time.Time, createdAt time.Time) *SeasonV14 {
	this := SeasonV14{}
	this.UpdatedAt = updatedAt
	this.CreatedAt = createdAt
	return &this
}

// NewSeasonV14WithDefaults instantiates a new SeasonV14 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSeasonV14WithDefaults() *SeasonV14 {
	this := SeasonV14{}
	return &this
}

// GetMovieId returns the MovieId field value if set, zero value otherwise.
func (o *SeasonV14) GetMovieId() float32 {
	if o == nil || o.MovieId == nil {
		var ret float32
		return ret
	}
	return *o.MovieId
}

// GetMovieIdOk returns a tuple with the MovieId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeasonV14) GetMovieIdOk() (*float32, bool) {
	if o == nil || o.MovieId == nil {
		return nil, false
	}
	return o.MovieId, true
}

// HasMovieId returns a boolean if a field has been set.
func (o *SeasonV14) HasMovieId() bool {
	if o != nil && o.MovieId != nil {
		return true
	}

	return false
}

// SetMovieId gets a reference to the given float32 and assigns it to the MovieId field.
func (o *SeasonV14) SetMovieId(v float32) {
	o.MovieId = &v
}

// GetNumber returns the Number field value if set, zero value otherwise.
func (o *SeasonV14) GetNumber() float32 {
	if o == nil || o.Number == nil {
		var ret float32
		return ret
	}
	return *o.Number
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeasonV14) GetNumberOk() (*float32, bool) {
	if o == nil || o.Number == nil {
		return nil, false
	}
	return o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *SeasonV14) HasNumber() bool {
	if o != nil && o.Number != nil {
		return true
	}

	return false
}

// SetNumber gets a reference to the given float32 and assigns it to the Number field.
func (o *SeasonV14) SetNumber(v float32) {
	o.Number = &v
}

// GetEpisodesCount returns the EpisodesCount field value if set, zero value otherwise.
func (o *SeasonV14) GetEpisodesCount() float32 {
	if o == nil || o.EpisodesCount == nil {
		var ret float32
		return ret
	}
	return *o.EpisodesCount
}

// GetEpisodesCountOk returns a tuple with the EpisodesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeasonV14) GetEpisodesCountOk() (*float32, bool) {
	if o == nil || o.EpisodesCount == nil {
		return nil, false
	}
	return o.EpisodesCount, true
}

// HasEpisodesCount returns a boolean if a field has been set.
func (o *SeasonV14) HasEpisodesCount() bool {
	if o != nil && o.EpisodesCount != nil {
		return true
	}

	return false
}

// SetEpisodesCount gets a reference to the given float32 and assigns it to the EpisodesCount field.
func (o *SeasonV14) SetEpisodesCount(v float32) {
	o.EpisodesCount = &v
}

// GetEpisodes returns the Episodes field value if set, zero value otherwise.
func (o *SeasonV14) GetEpisodes() []EpisodeV14 {
	if o == nil || o.Episodes == nil {
		var ret []EpisodeV14
		return ret
	}
	return o.Episodes
}

// GetEpisodesOk returns a tuple with the Episodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeasonV14) GetEpisodesOk() ([]EpisodeV14, bool) {
	if o == nil || o.Episodes == nil {
		return nil, false
	}
	return o.Episodes, true
}

// HasEpisodes returns a boolean if a field has been set.
func (o *SeasonV14) HasEpisodes() bool {
	if o != nil && o.Episodes != nil {
		return true
	}

	return false
}

// SetEpisodes gets a reference to the given []EpisodeV14 and assigns it to the Episodes field.
func (o *SeasonV14) SetEpisodes(v []EpisodeV14) {
	o.Episodes = v
}

// GetPoster returns the Poster field value if set, zero value otherwise.
func (o *SeasonV14) GetPoster() ShortImage {
	if o == nil || o.Poster == nil {
		var ret ShortImage
		return ret
	}
	return *o.Poster
}

// GetPosterOk returns a tuple with the Poster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeasonV14) GetPosterOk() (*ShortImage, bool) {
	if o == nil || o.Poster == nil {
		return nil, false
	}
	return o.Poster, true
}

// HasPoster returns a boolean if a field has been set.
func (o *SeasonV14) HasPoster() bool {
	if o != nil && o.Poster != nil {
		return true
	}

	return false
}

// SetPoster gets a reference to the given ShortImage and assigns it to the Poster field.
func (o *SeasonV14) SetPoster(v ShortImage) {
	o.Poster = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SeasonV14) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeasonV14) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SeasonV14) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SeasonV14) SetName(v string) {
	o.Name = &v
}

// GetEnName returns the EnName field value if set, zero value otherwise.
func (o *SeasonV14) GetEnName() string {
	if o == nil || o.EnName == nil {
		var ret string
		return ret
	}
	return *o.EnName
}

// GetEnNameOk returns a tuple with the EnName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeasonV14) GetEnNameOk() (*string, bool) {
	if o == nil || o.EnName == nil {
		return nil, false
	}
	return o.EnName, true
}

// HasEnName returns a boolean if a field has been set.
func (o *SeasonV14) HasEnName() bool {
	if o != nil && o.EnName != nil {
		return true
	}

	return false
}

// SetEnName gets a reference to the given string and assigns it to the EnName field.
func (o *SeasonV14) SetEnName(v string) {
	o.EnName = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *SeasonV14) GetDuration() float32 {
	if o == nil || o.Duration == nil {
		var ret float32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeasonV14) GetDurationOk() (*float32, bool) {
	if o == nil || o.Duration == nil {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *SeasonV14) HasDuration() bool {
	if o != nil && o.Duration != nil {
		return true
	}

	return false
}

// SetDuration gets a reference to the given float32 and assigns it to the Duration field.
func (o *SeasonV14) SetDuration(v float32) {
	o.Duration = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SeasonV14) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeasonV14) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SeasonV14) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SeasonV14) SetDescription(v string) {
	o.Description = &v
}

// GetEnDescription returns the EnDescription field value if set, zero value otherwise.
func (o *SeasonV14) GetEnDescription() string {
	if o == nil || o.EnDescription == nil {
		var ret string
		return ret
	}
	return *o.EnDescription
}

// GetEnDescriptionOk returns a tuple with the EnDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeasonV14) GetEnDescriptionOk() (*string, bool) {
	if o == nil || o.EnDescription == nil {
		return nil, false
	}
	return o.EnDescription, true
}

// HasEnDescription returns a boolean if a field has been set.
func (o *SeasonV14) HasEnDescription() bool {
	if o != nil && o.EnDescription != nil {
		return true
	}

	return false
}

// SetEnDescription gets a reference to the given string and assigns it to the EnDescription field.
func (o *SeasonV14) SetEnDescription(v string) {
	o.EnDescription = &v
}

// GetAirDate returns the AirDate field value if set, zero value otherwise.
func (o *SeasonV14) GetAirDate() string {
	if o == nil || o.AirDate == nil {
		var ret string
		return ret
	}
	return *o.AirDate
}

// GetAirDateOk returns a tuple with the AirDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeasonV14) GetAirDateOk() (*string, bool) {
	if o == nil || o.AirDate == nil {
		return nil, false
	}
	return o.AirDate, true
}

// HasAirDate returns a boolean if a field has been set.
func (o *SeasonV14) HasAirDate() bool {
	if o != nil && o.AirDate != nil {
		return true
	}

	return false
}

// SetAirDate gets a reference to the given string and assigns it to the AirDate field.
func (o *SeasonV14) SetAirDate(v string) {
	o.AirDate = &v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *SeasonV14) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *SeasonV14) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *SeasonV14) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *SeasonV14) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *SeasonV14) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *SeasonV14) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

func (o SeasonV14) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MovieId != nil {
		toSerialize["movieId"] = o.MovieId
	}
	if o.Number != nil {
		toSerialize["number"] = o.Number
	}
	if o.EpisodesCount != nil {
		toSerialize["episodesCount"] = o.EpisodesCount
	}
	if o.Episodes != nil {
		toSerialize["episodes"] = o.Episodes
	}
	if o.Poster != nil {
		toSerialize["poster"] = o.Poster
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.EnName != nil {
		toSerialize["enName"] = o.EnName
	}
	if o.Duration != nil {
		toSerialize["duration"] = o.Duration
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.EnDescription != nil {
		toSerialize["enDescription"] = o.EnDescription
	}
	if o.AirDate != nil {
		toSerialize["airDate"] = o.AirDate
	}
	if true {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if true {
		toSerialize["createdAt"] = o.CreatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableSeasonV14 struct {
	value *SeasonV14
	isSet bool
}

func (v NullableSeasonV14) Get() *SeasonV14 {
	return v.value
}

func (v *NullableSeasonV14) Set(val *SeasonV14) {
	v.value = val
	v.isSet = true
}

func (v NullableSeasonV14) IsSet() bool {
	return v.isSet
}

func (v *NullableSeasonV14) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSeasonV14(val *SeasonV14) *NullableSeasonV14 {
	return &NullableSeasonV14{value: val, isSet: true}
}

func (v NullableSeasonV14) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSeasonV14) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


