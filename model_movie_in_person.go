/*
Документация для неофициального API кинопоиска (kinopoisk.dev).

 <!-- Yandex.Metrika counter --> <div><img src=\"https://mc.yandex.ru/watch/62307766\" style=\"position:absolute; left:-9999px;\" alt=\"\" /></div> <!-- /Yandex.Metrika counter --> <p>Через этот API вы можете получить практически все данные из кинопоиска. Больше информации вы можете получить изучив эту документацию.</p> <h2>Как работать с документацией?</h2> <p> Для начала работы с API вам необходимо получить токен, который вы можете получить в боте <a href=\"https://t.me/kinopoiskdev_bot\">@kinopoiskdev_bot</a>. <br /> После получения токена, вам необходимо авторизоваться в документации, для этого нажмите на кнопку <strong>Authorize</strong> и введите токен в поле <strong>Value</strong>.<br /> После авторизации вы можете отправлять запросы к API, для этого нажмите на кнопку <strong>Try it out</strong> и заполните необходимые поля для составления нужного фильтра.<br /> После заполнения полей нажмите на кнопку <strong>Execute</strong> и получите ответ от API и пример запроса. </p> <h3>Как работать с API?</h3> <p> API работает по принципу REST, все запросы отправляются на адрес <code>https://api.kinopoisk.dev/</code> с указанием версии API и необходимого ресурса.<br /> Все запросы к API кинопоиска должны содержать заголовок <code>X-API-KEY</code> с вашим токеном. В противном случае вы получите ошибку <code>401</code>.<br /> При составлении запроса учитывайте, что все параметры должны быть в <code>query</code> и <code>path</code>. В зависимости от метода который вы используете. Например, вы хотите получить список фильмов за 2023 год в жанре <code>криминал</code>, тогда ваш запрос будет выглядеть так: <code>https://api.kinopoisk.dev/v1.4/movie?year=2023&genres.name=криминал</code>. Или вы хотите получить список фильмов с рейтингом выше 8, тогда ваш запрос будет выглядеть так: <code>https://api.kinopoisk.dev/v1.4/movie?rating.imdb=8-10</code>. Документация kinopoisk api может помочь вам составить нужный запрос, для этого воспользуйтесь ее конструктором. </p> <h3>Особенности синтекса query параметров</h3> <p> Ключи в query параметрах имеют разные типы значений. В зависимости от типа значения, вы можете использовать разные операторы для фильтрации для поиска максимально релевантного фильма, сериала и т.д. в базе. <br /> Поля с типом <code>Number</code> могут принимать значения в форматах: <code>rating.kp=1-10</code>, <code>rating.kp=1</code>, <code>year=2022&year=2023</code>. <br /> Поля с типом <code>Date</code> могут принимать значения в форматах: <code>premiere.russia=dd.mm.yyyy-dd.mm.yyyy</code>, <code>premiere.russia=dd.mm.yyyy</code>. <br /> Поля с типом <code>String</code> могут принимать значения в форматах: <code>genres.name=драма</code>, <code>genres.name=криминал</code>, <code>genres.name=криминал&genres.name=драма</code> <br/> Поля с типом <code>Boolean</code> могут принимать значения в форматах: <code>isSeries=true</code>, <code>isSeries=false</code>. <br /> Параметры жанров и стран могут принимать операторы <code>+</code> и <code>!</code>, для указания включаемых и исключаемых значений. Например, вы хотите получить список фильмов в жанрах <code>драма</code> и <code>криминал</code>, тогда ваш запрос будет выглядеть так: <code>genres.name=+драма&genres.name=+криминал</code>. Или вы хотите получить список фильмов с жанром <code>драма</code> и без жанра <code>криминал</code>, тогда ваш запрос будет выглядеть так: <code>genres.name=+драма&genres.name=!криминал</code>. <br /> </p> <p> Расшифровка операторов: <ul>   <li><code>!</code> - исключить. Этот символ нужно отправлять в кодированной форме <code>%21</code></li>   <li><code>+</code> - включить. Этот символ нужно отправлять в кодированной форме <code>%2B</code></li>   <li><code>-</code> - диапазон значений, используется в качестве разделителя.</li> </ul> </p>  <p>По вопросам работы с API обращайтесь в чат <a href=\"https://t.me/+jeHPZVXiLPFhODJi\">Developer Community KinopoiskDev</a>.</p>  <p>Если вы обнаружили ошибку или у вас есть предложения по улучшению, создавайте issue на <a href=\"https://github.com/mdwitr0/kinopoiskdev\">GitHub</a>.</p>  <h3>Полезные ссылки:</h3> <ul>   <li><a href=\"https://kinopoiskdev.readme.io\">Более удобная документация</a></li>   <li><a href=\"https://github.com/OpenMovieDB/kinopoiskdev_client\">JavaScript и TypeScript клиент (Устарел, ждет обновления)</a></li>   <li><a href=\"https://github.com/odi1n/kinopoisk_dev\">Python клиент (Устарел, ждет обновления)</a></li>   <li><a href=\"/documentation-json\">OpenAPI Specification (JSON)</a></li>   <li><a href=\"/documentation-yaml\">OpenAPI Specification (YAML)</a></li> </ul> 

API version: 1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kinopoisk_api

import (
	"encoding/json"
)

// MovieInPerson struct for MovieInPerson
type MovieInPerson struct {
	Id float32 `json:"id"`
	Name NullableString `json:"name,omitempty"`
	AlternativeName NullableString `json:"alternativeName,omitempty"`
	Rating NullableFloat32 `json:"rating,omitempty"`
	General NullableBool `json:"general,omitempty"`
	Description NullableString `json:"description,omitempty"`
	EnProfession NullableString `json:"enProfession,omitempty"`
}

// NewMovieInPerson instantiates a new MovieInPerson object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMovieInPerson(id float32) *MovieInPerson {
	this := MovieInPerson{}
	this.Id = id
	return &this
}

// NewMovieInPersonWithDefaults instantiates a new MovieInPerson object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMovieInPersonWithDefaults() *MovieInPerson {
	this := MovieInPerson{}
	return &this
}

// GetId returns the Id field value
func (o *MovieInPerson) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MovieInPerson) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MovieInPerson) SetId(v float32) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieInPerson) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieInPerson) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *MovieInPerson) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *MovieInPerson) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *MovieInPerson) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *MovieInPerson) UnsetName() {
	o.Name.Unset()
}

// GetAlternativeName returns the AlternativeName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieInPerson) GetAlternativeName() string {
	if o == nil || o.AlternativeName.Get() == nil {
		var ret string
		return ret
	}
	return *o.AlternativeName.Get()
}

// GetAlternativeNameOk returns a tuple with the AlternativeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieInPerson) GetAlternativeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AlternativeName.Get(), o.AlternativeName.IsSet()
}

// HasAlternativeName returns a boolean if a field has been set.
func (o *MovieInPerson) HasAlternativeName() bool {
	if o != nil && o.AlternativeName.IsSet() {
		return true
	}

	return false
}

// SetAlternativeName gets a reference to the given NullableString and assigns it to the AlternativeName field.
func (o *MovieInPerson) SetAlternativeName(v string) {
	o.AlternativeName.Set(&v)
}
// SetAlternativeNameNil sets the value for AlternativeName to be an explicit nil
func (o *MovieInPerson) SetAlternativeNameNil() {
	o.AlternativeName.Set(nil)
}

// UnsetAlternativeName ensures that no value is present for AlternativeName, not even an explicit nil
func (o *MovieInPerson) UnsetAlternativeName() {
	o.AlternativeName.Unset()
}

// GetRating returns the Rating field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieInPerson) GetRating() float32 {
	if o == nil || o.Rating.Get() == nil {
		var ret float32
		return ret
	}
	return *o.Rating.Get()
}

// GetRatingOk returns a tuple with the Rating field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieInPerson) GetRatingOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rating.Get(), o.Rating.IsSet()
}

// HasRating returns a boolean if a field has been set.
func (o *MovieInPerson) HasRating() bool {
	if o != nil && o.Rating.IsSet() {
		return true
	}

	return false
}

// SetRating gets a reference to the given NullableFloat32 and assigns it to the Rating field.
func (o *MovieInPerson) SetRating(v float32) {
	o.Rating.Set(&v)
}
// SetRatingNil sets the value for Rating to be an explicit nil
func (o *MovieInPerson) SetRatingNil() {
	o.Rating.Set(nil)
}

// UnsetRating ensures that no value is present for Rating, not even an explicit nil
func (o *MovieInPerson) UnsetRating() {
	o.Rating.Unset()
}

// GetGeneral returns the General field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieInPerson) GetGeneral() bool {
	if o == nil || o.General.Get() == nil {
		var ret bool
		return ret
	}
	return *o.General.Get()
}

// GetGeneralOk returns a tuple with the General field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieInPerson) GetGeneralOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.General.Get(), o.General.IsSet()
}

// HasGeneral returns a boolean if a field has been set.
func (o *MovieInPerson) HasGeneral() bool {
	if o != nil && o.General.IsSet() {
		return true
	}

	return false
}

// SetGeneral gets a reference to the given NullableBool and assigns it to the General field.
func (o *MovieInPerson) SetGeneral(v bool) {
	o.General.Set(&v)
}
// SetGeneralNil sets the value for General to be an explicit nil
func (o *MovieInPerson) SetGeneralNil() {
	o.General.Set(nil)
}

// UnsetGeneral ensures that no value is present for General, not even an explicit nil
func (o *MovieInPerson) UnsetGeneral() {
	o.General.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieInPerson) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieInPerson) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *MovieInPerson) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *MovieInPerson) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *MovieInPerson) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *MovieInPerson) UnsetDescription() {
	o.Description.Unset()
}

// GetEnProfession returns the EnProfession field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieInPerson) GetEnProfession() string {
	if o == nil || o.EnProfession.Get() == nil {
		var ret string
		return ret
	}
	return *o.EnProfession.Get()
}

// GetEnProfessionOk returns a tuple with the EnProfession field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieInPerson) GetEnProfessionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnProfession.Get(), o.EnProfession.IsSet()
}

// HasEnProfession returns a boolean if a field has been set.
func (o *MovieInPerson) HasEnProfession() bool {
	if o != nil && o.EnProfession.IsSet() {
		return true
	}

	return false
}

// SetEnProfession gets a reference to the given NullableString and assigns it to the EnProfession field.
func (o *MovieInPerson) SetEnProfession(v string) {
	o.EnProfession.Set(&v)
}
// SetEnProfessionNil sets the value for EnProfession to be an explicit nil
func (o *MovieInPerson) SetEnProfessionNil() {
	o.EnProfession.Set(nil)
}

// UnsetEnProfession ensures that no value is present for EnProfession, not even an explicit nil
func (o *MovieInPerson) UnsetEnProfession() {
	o.EnProfession.Unset()
}

func (o MovieInPerson) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.AlternativeName.IsSet() {
		toSerialize["alternativeName"] = o.AlternativeName.Get()
	}
	if o.Rating.IsSet() {
		toSerialize["rating"] = o.Rating.Get()
	}
	if o.General.IsSet() {
		toSerialize["general"] = o.General.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.EnProfession.IsSet() {
		toSerialize["enProfession"] = o.EnProfession.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMovieInPerson struct {
	value *MovieInPerson
	isSet bool
}

func (v NullableMovieInPerson) Get() *MovieInPerson {
	return v.value
}

func (v *NullableMovieInPerson) Set(val *MovieInPerson) {
	v.value = val
	v.isSet = true
}

func (v NullableMovieInPerson) IsSet() bool {
	return v.isSet
}

func (v *NullableMovieInPerson) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMovieInPerson(val *MovieInPerson) *NullableMovieInPerson {
	return &NullableMovieInPerson{value: val, isSet: true}
}

func (v NullableMovieInPerson) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMovieInPerson) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


