/*
Документация для неофициального API кинопоиска (kinopoisk.dev).

 <!-- Yandex.Metrika counter --> <div><img src=\"https://mc.yandex.ru/watch/62307766\" style=\"position:absolute; left:-9999px;\" alt=\"\" /></div> <!-- /Yandex.Metrika counter --> <p>Через этот API вы можете получить практически все данные из кинопоиска. Больше информации вы можете получить изучив эту документацию.</p> <h2>Как работать с документацией?</h2> <p> Для начала работы с API вам необходимо получить токен, который вы можете получить в боте <a href=\"https://t.me/kinopoiskdev_bot\">@kinopoiskdev_bot</a>. <br /> После получения токена, вам необходимо авторизоваться в документации, для этого нажмите на кнопку <strong>Authorize</strong> и введите токен в поле <strong>Value</strong>.<br /> После авторизации вы можете отправлять запросы к API, для этого нажмите на кнопку <strong>Try it out</strong> и заполните необходимые поля для составления нужного фильтра.<br /> После заполнения полей нажмите на кнопку <strong>Execute</strong> и получите ответ от API и пример запроса. </p> <h3>Как работать с API?</h3> <p> API работает по принципу REST, все запросы отправляются на адрес <code>https://api.kinopoisk.dev/</code> с указанием версии API и необходимого ресурса.<br /> Все запросы к API кинопоиска должны содержать заголовок <code>X-API-KEY</code> с вашим токеном. В противном случае вы получите ошибку <code>401</code>.<br /> При составлении запроса учитывайте, что все параметры должны быть в <code>query</code> и <code>path</code>. В зависимости от метода который вы используете. Например, вы хотите получить список фильмов за 2023 год в жанре <code>криминал</code>, тогда ваш запрос будет выглядеть так: <code>https://api.kinopoisk.dev/v1.4/movie?year=2023&genres.name=криминал</code>. Или вы хотите получить список фильмов с рейтингом выше 8, тогда ваш запрос будет выглядеть так: <code>https://api.kinopoisk.dev/v1.4/movie?rating.imdb=8-10</code>. Документация kinopoisk api может помочь вам составить нужный запрос, для этого воспользуйтесь ее конструктором. </p> <h3>Особенности синтекса query параметров</h3> <p> Ключи в query параметрах имеют разные типы значений. В зависимости от типа значения, вы можете использовать разные операторы для фильтрации для поиска максимально релевантного фильма, сериала и т.д. в базе. <br /> Поля с типом <code>Number</code> могут принимать значения в форматах: <code>rating.kp=1-10</code>, <code>rating.kp=1</code>, <code>year=2022&year=2023</code>. <br /> Поля с типом <code>Date</code> могут принимать значения в форматах: <code>premiere.russia=dd.mm.yyyy-dd.mm.yyyy</code>, <code>premiere.russia=dd.mm.yyyy</code>. <br /> Поля с типом <code>String</code> могут принимать значения в форматах: <code>genres.name=драма</code>, <code>genres.name=криминал</code>, <code>genres.name=криминал&genres.name=драма</code> <br/> Поля с типом <code>Boolean</code> могут принимать значения в форматах: <code>isSeries=true</code>, <code>isSeries=false</code>. <br /> Параметры жанров и стран могут принимать операторы <code>+</code> и <code>!</code>, для указания включаемых и исключаемых значений. Например, вы хотите получить список фильмов в жанрах <code>драма</code> и <code>криминал</code>, тогда ваш запрос будет выглядеть так: <code>genres.name=+драма&genres.name=+криминал</code>. Или вы хотите получить список фильмов с жанром <code>драма</code> и без жанра <code>криминал</code>, тогда ваш запрос будет выглядеть так: <code>genres.name=+драма&genres.name=!криминал</code>. <br /> </p> <p> Расшифровка операторов: <ul>   <li><code>!</code> - исключить. Этот символ нужно отправлять в кодированной форме <code>%21</code></li>   <li><code>+</code> - включить. Этот символ нужно отправлять в кодированной форме <code>%2B</code></li>   <li><code>-</code> - диапазон значений, используется в качестве разделителя.</li> </ul> </p>  <p>По вопросам работы с API обращайтесь в чат <a href=\"https://t.me/+jeHPZVXiLPFhODJi\">Developer Community KinopoiskDev</a>.</p>  <p>Если вы обнаружили ошибку или у вас есть предложения по улучшению, создавайте issue на <a href=\"https://github.com/mdwitr0/kinopoiskdev\">GitHub</a>.</p>  <h3>Полезные ссылки:</h3> <ul>   <li><a href=\"https://kinopoiskdev.readme.io\">Более удобная документация</a></li>   <li><a href=\"https://github.com/OpenMovieDB/kinopoiskdev_client\">JavaScript и TypeScript клиент (Устарел, ждет обновления)</a></li>   <li><a href=\"https://github.com/odi1n/kinopoisk_dev\">Python клиент (Устарел, ждет обновления)</a></li>   <li><a href=\"/documentation-json\">OpenAPI Specification (JSON)</a></li>   <li><a href=\"/documentation-yaml\">OpenAPI Specification (YAML)</a></li> </ul> 

API version: 1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kinopoisk_api

import (
	"encoding/json"
	"time"
)

// PersonAward struct for PersonAward
type PersonAward struct {
	Nomination Nomination `json:"nomination"`
	Winning bool `json:"winning"`
	UpdatedAt time.Time `json:"updatedAt"`
	CreatedAt time.Time `json:"createdAt"`
	PersonId float32 `json:"personId"`
	Movie Movie `json:"movie"`
}

// NewPersonAward instantiates a new PersonAward object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPersonAward(nomination Nomination, winning bool, updatedAt time.Time, createdAt time.Time, personId float32, movie Movie) *PersonAward {
	this := PersonAward{}
	this.Nomination = nomination
	this.Winning = winning
	this.UpdatedAt = updatedAt
	this.CreatedAt = createdAt
	this.PersonId = personId
	this.Movie = movie
	return &this
}

// NewPersonAwardWithDefaults instantiates a new PersonAward object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPersonAwardWithDefaults() *PersonAward {
	this := PersonAward{}
	return &this
}

// GetNomination returns the Nomination field value
func (o *PersonAward) GetNomination() Nomination {
	if o == nil {
		var ret Nomination
		return ret
	}

	return o.Nomination
}

// GetNominationOk returns a tuple with the Nomination field value
// and a boolean to check if the value has been set.
func (o *PersonAward) GetNominationOk() (*Nomination, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Nomination, true
}

// SetNomination sets field value
func (o *PersonAward) SetNomination(v Nomination) {
	o.Nomination = v
}

// GetWinning returns the Winning field value
func (o *PersonAward) GetWinning() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Winning
}

// GetWinningOk returns a tuple with the Winning field value
// and a boolean to check if the value has been set.
func (o *PersonAward) GetWinningOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Winning, true
}

// SetWinning sets field value
func (o *PersonAward) SetWinning(v bool) {
	o.Winning = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *PersonAward) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *PersonAward) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *PersonAward) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *PersonAward) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *PersonAward) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *PersonAward) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetPersonId returns the PersonId field value
func (o *PersonAward) GetPersonId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.PersonId
}

// GetPersonIdOk returns a tuple with the PersonId field value
// and a boolean to check if the value has been set.
func (o *PersonAward) GetPersonIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PersonId, true
}

// SetPersonId sets field value
func (o *PersonAward) SetPersonId(v float32) {
	o.PersonId = v
}

// GetMovie returns the Movie field value
func (o *PersonAward) GetMovie() Movie {
	if o == nil {
		var ret Movie
		return ret
	}

	return o.Movie
}

// GetMovieOk returns a tuple with the Movie field value
// and a boolean to check if the value has been set.
func (o *PersonAward) GetMovieOk() (*Movie, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Movie, true
}

// SetMovie sets field value
func (o *PersonAward) SetMovie(v Movie) {
	o.Movie = v
}

func (o PersonAward) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["nomination"] = o.Nomination
	}
	if true {
		toSerialize["winning"] = o.Winning
	}
	if true {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if true {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if true {
		toSerialize["personId"] = o.PersonId
	}
	if true {
		toSerialize["movie"] = o.Movie
	}
	return json.Marshal(toSerialize)
}

type NullablePersonAward struct {
	value *PersonAward
	isSet bool
}

func (v NullablePersonAward) Get() *PersonAward {
	return v.value
}

func (v *NullablePersonAward) Set(val *PersonAward) {
	v.value = val
	v.isSet = true
}

func (v NullablePersonAward) IsSet() bool {
	return v.isSet
}

func (v *NullablePersonAward) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePersonAward(val *PersonAward) *NullablePersonAward {
	return &NullablePersonAward{value: val, isSet: true}
}

func (v NullablePersonAward) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePersonAward) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


