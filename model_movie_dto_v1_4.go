/*
Документация для неофициального API кинопоиска (kinopoisk.dev).

 <!-- Yandex.Metrika counter --> <div><img src=\"https://mc.yandex.ru/watch/62307766\" style=\"position:absolute; left:-9999px;\" alt=\"\" /></div> <!-- /Yandex.Metrika counter --> <p>Через этот API вы можете получить практически все данные из кинопоиска. Больше информации вы можете получить изучив эту документацию.</p> <h2>Как работать с документацией?</h2> <p> Для начала работы с API вам необходимо получить токен, который вы можете получить в боте <a href=\"https://t.me/kinopoiskdev_bot\">@kinopoiskdev_bot</a>. <br /> После получения токена, вам необходимо авторизоваться в документации, для этого нажмите на кнопку <strong>Authorize</strong> и введите токен в поле <strong>Value</strong>.<br /> После авторизации вы можете отправлять запросы к API, для этого нажмите на кнопку <strong>Try it out</strong> и заполните необходимые поля для составления нужного фильтра.<br /> После заполнения полей нажмите на кнопку <strong>Execute</strong> и получите ответ от API и пример запроса. </p> <h3>Как работать с API?</h3> <p> API работает по принципу REST, все запросы отправляются на адрес <code>https://api.kinopoisk.dev/</code> с указанием версии API и необходимого ресурса.<br /> Все запросы к API кинопоиска должны содержать заголовок <code>X-API-KEY</code> с вашим токеном. В противном случае вы получите ошибку <code>401</code>.<br /> При составлении запроса учитывайте, что все параметры должны быть в <code>query</code> и <code>path</code>. В зависимости от метода который вы используете. Например, вы хотите получить список фильмов за 2023 год в жанре <code>криминал</code>, тогда ваш запрос будет выглядеть так: <code>https://api.kinopoisk.dev/v1.4/movie?year=2023&genres.name=криминал</code>. Или вы хотите получить список фильмов с рейтингом выше 8, тогда ваш запрос будет выглядеть так: <code>https://api.kinopoisk.dev/v1.4/movie?rating.imdb=8-10</code>. Документация kinopoisk api может помочь вам составить нужный запрос, для этого воспользуйтесь ее конструктором. </p> <h3>Особенности синтекса query параметров</h3> <p> Ключи в query параметрах имеют разные типы значений. В зависимости от типа значения, вы можете использовать разные операторы для фильтрации для поиска максимально релевантного фильма, сериала и т.д. в базе. <br /> Поля с типом <code>Number</code> могут принимать значения в форматах: <code>rating.kp=1-10</code>, <code>rating.kp=1</code>, <code>year=2022&year=2023</code>. <br /> Поля с типом <code>Date</code> могут принимать значения в форматах: <code>premiere.russia=dd.mm.yyyy-dd.mm.yyyy</code>, <code>premiere.russia=dd.mm.yyyy</code>. <br /> Поля с типом <code>String</code> могут принимать значения в форматах: <code>genres.name=драма</code>, <code>genres.name=криминал</code>, <code>genres.name=криминал&genres.name=драма</code> <br/> Поля с типом <code>Boolean</code> могут принимать значения в форматах: <code>isSeries=true</code>, <code>isSeries=false</code>. <br /> Параметры жанров и стран могут принимать операторы <code>+</code> и <code>!</code>, для указания включаемых и исключаемых значений. Например, вы хотите получить список фильмов в жанрах <code>драма</code> и <code>криминал</code>, тогда ваш запрос будет выглядеть так: <code>genres.name=+драма&genres.name=+криминал</code>. Или вы хотите получить список фильмов с жанром <code>драма</code> и без жанра <code>криминал</code>, тогда ваш запрос будет выглядеть так: <code>genres.name=+драма&genres.name=!криминал</code>. <br /> </p> <p> Расшифровка операторов: <ul>   <li><code>!</code> - исключить. Этот символ нужно отправлять в кодированной форме <code>%21</code></li>   <li><code>+</code> - включить. Этот символ нужно отправлять в кодированной форме <code>%2B</code></li>   <li><code>-</code> - диапазон значений, используется в качестве разделителя.</li> </ul> </p>  <p>По вопросам работы с API обращайтесь в чат <a href=\"https://t.me/+jeHPZVXiLPFhODJi\">Developer Community KinopoiskDev</a>.</p>  <p>Если вы обнаружили ошибку или у вас есть предложения по улучшению, создавайте issue на <a href=\"https://github.com/mdwitr0/kinopoiskdev\">GitHub</a>.</p>  <h3>Полезные ссылки:</h3> <ul>   <li><a href=\"https://kinopoiskdev.readme.io\">Более удобная документация</a></li>   <li><a href=\"https://github.com/OpenMovieDB/kinopoiskdev_client\">JavaScript и TypeScript клиент (Устарел, ждет обновления)</a></li>   <li><a href=\"https://github.com/odi1n/kinopoisk_dev\">Python клиент (Устарел, ждет обновления)</a></li>   <li><a href=\"/documentation-json\">OpenAPI Specification (JSON)</a></li>   <li><a href=\"/documentation-yaml\">OpenAPI Specification (YAML)</a></li> </ul> 

API version: 1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kinopoisk_api

import (
	"encoding/json"
	"time"
)

// MovieDtoV14 struct for MovieDtoV14
type MovieDtoV14 struct {
	// Id фильма с кинопоиска
	Id float32 `json:"id"`
	ExternalId ExternalId `json:"externalId"`
	Name NullableString `json:"name,omitempty"`
	AlternativeName NullableString `json:"alternativeName,omitempty"`
	EnName NullableString `json:"enName,omitempty"`
	Names []Name `json:"names"`
	// Тип тайтла. Доступны: movie | tv-series | cartoon | anime | animated-series | tv-show
	Type string `json:"type"`
	// Тип тайтла в числовом обозначении. Доступны: 1 (movie) | 2 (tv-series) | 3 (cartoon) | 4 (anime) | 5 (animated-series) | 6 (tv-show)
	TypeNumber float32 `json:"typeNumber"`
	// Год премьеры. При поиске по этому полю, можно использовать интервалы 1860-2030
	Year NullableFloat32 `json:"year,omitempty"`
	// Описание тайтла
	Description NullableString `json:"description,omitempty"`
	// Сокращенное описание
	ShortDescription NullableString `json:"shortDescription,omitempty"`
	// Слоган
	Slogan NullableString `json:"slogan,omitempty"`
	// Статус релиза тайтла. Доступные значения: filming | pre-production | completed | announced | post-production
	Status NullableString `json:"status,omitempty"`
	Rating *Rating `json:"rating,omitempty"`
	Votes *Votes `json:"votes,omitempty"`
	// Продолжительность фильма
	MovieLength NullableFloat32 `json:"movieLength,omitempty"`
	// Возрастной рейтинг по MPAA
	RatingMpaa NullableString `json:"ratingMpaa,omitempty"`
	// Возрастной рейтинг
	AgeRating NullableFloat32 `json:"ageRating,omitempty"`
	Logo *Logo `json:"logo,omitempty"`
	Poster *ShortImage `json:"poster,omitempty"`
	Backdrop *ShortImage `json:"backdrop,omitempty"`
	Videos *VideoTypes `json:"videos,omitempty"`
	Genres []ItemName `json:"genres,omitempty"`
	Countries []ItemName `json:"countries,omitempty"`
	Persons []PersonInMovie `json:"persons,omitempty"`
	ReviewInfo *ReviewInfo `json:"reviewInfo,omitempty"`
	SeasonsInfo []SeasonInfo `json:"seasonsInfo,omitempty"`
	Budget *CurrencyValue `json:"budget,omitempty"`
	Fees *Fees `json:"fees,omitempty"`
	Premiere *Premiere `json:"premiere,omitempty"`
	SimilarMovies []LinkedMovieV14 `json:"similarMovies,omitempty"`
	SequelsAndPrequels []LinkedMovieV14 `json:"sequelsAndPrequels,omitempty"`
	Watchability *Watchability `json:"watchability,omitempty"`
	ReleaseYears []YearRange `json:"releaseYears,omitempty"`
	// Позиция тайтла в топ 10. Чтобы найти фильмы участвующие в рейтинге используйте: `!null`
	Top10 NullableFloat32 `json:"top10,omitempty"`
	// Позиция тайтла в топ 250. Чтобы найти фильмы участвующие в рейтинге используйте: `!null`
	Top250 NullableFloat32 `json:"top250,omitempty"`
	// Признак того, что тайтл находится в прокате
	TicketsOnSale NullableBool `json:"ticketsOnSale,omitempty"`
	// Продолжительность всех серий
	TotalSeriesLength NullableFloat32 `json:"totalSeriesLength,omitempty"`
	// Средняя продолжительность серии
	SeriesLength NullableFloat32 `json:"seriesLength,omitempty"`
	// Признак сериала
	IsSeries bool `json:"isSeries"`
	Audience []Audience `json:"audience,omitempty"`
	// Список коллекций, в которых находится тайтл.
	Lists []string `json:"lists,omitempty"`
	Networks []NetworksV14 `json:"networks"`
	UpdatedAt time.Time `json:"updatedAt"`
	CreatedAt time.Time `json:"createdAt"`
	Facts []FactInMovie `json:"facts"`
	ImagesInfo Images `json:"imagesInfo"`
}

// NewMovieDtoV14 instantiates a new MovieDtoV14 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMovieDtoV14(id float32, externalId ExternalId, names []Name, type_ string, typeNumber float32, isSeries bool, networks []NetworksV14, updatedAt time.Time, createdAt time.Time, facts []FactInMovie, imagesInfo Images) *MovieDtoV14 {
	this := MovieDtoV14{}
	this.Id = id
	this.ExternalId = externalId
	this.Names = names
	this.Type = type_
	this.TypeNumber = typeNumber
	this.IsSeries = isSeries
	this.Networks = networks
	this.UpdatedAt = updatedAt
	this.CreatedAt = createdAt
	this.Facts = facts
	this.ImagesInfo = imagesInfo
	return &this
}

// NewMovieDtoV14WithDefaults instantiates a new MovieDtoV14 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMovieDtoV14WithDefaults() *MovieDtoV14 {
	this := MovieDtoV14{}
	return &this
}

// GetId returns the Id field value
func (o *MovieDtoV14) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MovieDtoV14) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MovieDtoV14) SetId(v float32) {
	o.Id = v
}

// GetExternalId returns the ExternalId field value
func (o *MovieDtoV14) GetExternalId() ExternalId {
	if o == nil {
		var ret ExternalId
		return ret
	}

	return o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value
// and a boolean to check if the value has been set.
func (o *MovieDtoV14) GetExternalIdOk() (*ExternalId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExternalId, true
}

// SetExternalId sets field value
func (o *MovieDtoV14) SetExternalId(v ExternalId) {
	o.ExternalId = v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieDtoV14) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieDtoV14) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *MovieDtoV14) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *MovieDtoV14) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *MovieDtoV14) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *MovieDtoV14) UnsetName() {
	o.Name.Unset()
}

// GetAlternativeName returns the AlternativeName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieDtoV14) GetAlternativeName() string {
	if o == nil || o.AlternativeName.Get() == nil {
		var ret string
		return ret
	}
	return *o.AlternativeName.Get()
}

// GetAlternativeNameOk returns a tuple with the AlternativeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieDtoV14) GetAlternativeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AlternativeName.Get(), o.AlternativeName.IsSet()
}

// HasAlternativeName returns a boolean if a field has been set.
func (o *MovieDtoV14) HasAlternativeName() bool {
	if o != nil && o.AlternativeName.IsSet() {
		return true
	}

	return false
}

// SetAlternativeName gets a reference to the given NullableString and assigns it to the AlternativeName field.
func (o *MovieDtoV14) SetAlternativeName(v string) {
	o.AlternativeName.Set(&v)
}
// SetAlternativeNameNil sets the value for AlternativeName to be an explicit nil
func (o *MovieDtoV14) SetAlternativeNameNil() {
	o.AlternativeName.Set(nil)
}

// UnsetAlternativeName ensures that no value is present for AlternativeName, not even an explicit nil
func (o *MovieDtoV14) UnsetAlternativeName() {
	o.AlternativeName.Unset()
}

// GetEnName returns the EnName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieDtoV14) GetEnName() string {
	if o == nil || o.EnName.Get() == nil {
		var ret string
		return ret
	}
	return *o.EnName.Get()
}

// GetEnNameOk returns a tuple with the EnName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieDtoV14) GetEnNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnName.Get(), o.EnName.IsSet()
}

// HasEnName returns a boolean if a field has been set.
func (o *MovieDtoV14) HasEnName() bool {
	if o != nil && o.EnName.IsSet() {
		return true
	}

	return false
}

// SetEnName gets a reference to the given NullableString and assigns it to the EnName field.
func (o *MovieDtoV14) SetEnName(v string) {
	o.EnName.Set(&v)
}
// SetEnNameNil sets the value for EnName to be an explicit nil
func (o *MovieDtoV14) SetEnNameNil() {
	o.EnName.Set(nil)
}

// UnsetEnName ensures that no value is present for EnName, not even an explicit nil
func (o *MovieDtoV14) UnsetEnName() {
	o.EnName.Unset()
}

// GetNames returns the Names field value
func (o *MovieDtoV14) GetNames() []Name {
	if o == nil {
		var ret []Name
		return ret
	}

	return o.Names
}

// GetNamesOk returns a tuple with the Names field value
// and a boolean to check if the value has been set.
func (o *MovieDtoV14) GetNamesOk() ([]Name, bool) {
	if o == nil {
		return nil, false
	}
	return o.Names, true
}

// SetNames sets field value
func (o *MovieDtoV14) SetNames(v []Name) {
	o.Names = v
}

// GetType returns the Type field value
func (o *MovieDtoV14) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MovieDtoV14) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MovieDtoV14) SetType(v string) {
	o.Type = v
}

// GetTypeNumber returns the TypeNumber field value
func (o *MovieDtoV14) GetTypeNumber() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TypeNumber
}

// GetTypeNumberOk returns a tuple with the TypeNumber field value
// and a boolean to check if the value has been set.
func (o *MovieDtoV14) GetTypeNumberOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TypeNumber, true
}

// SetTypeNumber sets field value
func (o *MovieDtoV14) SetTypeNumber(v float32) {
	o.TypeNumber = v
}

// GetYear returns the Year field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieDtoV14) GetYear() float32 {
	if o == nil || o.Year.Get() == nil {
		var ret float32
		return ret
	}
	return *o.Year.Get()
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieDtoV14) GetYearOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Year.Get(), o.Year.IsSet()
}

// HasYear returns a boolean if a field has been set.
func (o *MovieDtoV14) HasYear() bool {
	if o != nil && o.Year.IsSet() {
		return true
	}

	return false
}

// SetYear gets a reference to the given NullableFloat32 and assigns it to the Year field.
func (o *MovieDtoV14) SetYear(v float32) {
	o.Year.Set(&v)
}
// SetYearNil sets the value for Year to be an explicit nil
func (o *MovieDtoV14) SetYearNil() {
	o.Year.Set(nil)
}

// UnsetYear ensures that no value is present for Year, not even an explicit nil
func (o *MovieDtoV14) UnsetYear() {
	o.Year.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieDtoV14) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieDtoV14) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *MovieDtoV14) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *MovieDtoV14) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *MovieDtoV14) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *MovieDtoV14) UnsetDescription() {
	o.Description.Unset()
}

// GetShortDescription returns the ShortDescription field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieDtoV14) GetShortDescription() string {
	if o == nil || o.ShortDescription.Get() == nil {
		var ret string
		return ret
	}
	return *o.ShortDescription.Get()
}

// GetShortDescriptionOk returns a tuple with the ShortDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieDtoV14) GetShortDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShortDescription.Get(), o.ShortDescription.IsSet()
}

// HasShortDescription returns a boolean if a field has been set.
func (o *MovieDtoV14) HasShortDescription() bool {
	if o != nil && o.ShortDescription.IsSet() {
		return true
	}

	return false
}

// SetShortDescription gets a reference to the given NullableString and assigns it to the ShortDescription field.
func (o *MovieDtoV14) SetShortDescription(v string) {
	o.ShortDescription.Set(&v)
}
// SetShortDescriptionNil sets the value for ShortDescription to be an explicit nil
func (o *MovieDtoV14) SetShortDescriptionNil() {
	o.ShortDescription.Set(nil)
}

// UnsetShortDescription ensures that no value is present for ShortDescription, not even an explicit nil
func (o *MovieDtoV14) UnsetShortDescription() {
	o.ShortDescription.Unset()
}

// GetSlogan returns the Slogan field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieDtoV14) GetSlogan() string {
	if o == nil || o.Slogan.Get() == nil {
		var ret string
		return ret
	}
	return *o.Slogan.Get()
}

// GetSloganOk returns a tuple with the Slogan field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieDtoV14) GetSloganOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Slogan.Get(), o.Slogan.IsSet()
}

// HasSlogan returns a boolean if a field has been set.
func (o *MovieDtoV14) HasSlogan() bool {
	if o != nil && o.Slogan.IsSet() {
		return true
	}

	return false
}

// SetSlogan gets a reference to the given NullableString and assigns it to the Slogan field.
func (o *MovieDtoV14) SetSlogan(v string) {
	o.Slogan.Set(&v)
}
// SetSloganNil sets the value for Slogan to be an explicit nil
func (o *MovieDtoV14) SetSloganNil() {
	o.Slogan.Set(nil)
}

// UnsetSlogan ensures that no value is present for Slogan, not even an explicit nil
func (o *MovieDtoV14) UnsetSlogan() {
	o.Slogan.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieDtoV14) GetStatus() string {
	if o == nil || o.Status.Get() == nil {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieDtoV14) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *MovieDtoV14) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *MovieDtoV14) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *MovieDtoV14) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *MovieDtoV14) UnsetStatus() {
	o.Status.Unset()
}

// GetRating returns the Rating field value if set, zero value otherwise.
func (o *MovieDtoV14) GetRating() Rating {
	if o == nil || o.Rating == nil {
		var ret Rating
		return ret
	}
	return *o.Rating
}

// GetRatingOk returns a tuple with the Rating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieDtoV14) GetRatingOk() (*Rating, bool) {
	if o == nil || o.Rating == nil {
		return nil, false
	}
	return o.Rating, true
}

// HasRating returns a boolean if a field has been set.
func (o *MovieDtoV14) HasRating() bool {
	if o != nil && o.Rating != nil {
		return true
	}

	return false
}

// SetRating gets a reference to the given Rating and assigns it to the Rating field.
func (o *MovieDtoV14) SetRating(v Rating) {
	o.Rating = &v
}

// GetVotes returns the Votes field value if set, zero value otherwise.
func (o *MovieDtoV14) GetVotes() Votes {
	if o == nil || o.Votes == nil {
		var ret Votes
		return ret
	}
	return *o.Votes
}

// GetVotesOk returns a tuple with the Votes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieDtoV14) GetVotesOk() (*Votes, bool) {
	if o == nil || o.Votes == nil {
		return nil, false
	}
	return o.Votes, true
}

// HasVotes returns a boolean if a field has been set.
func (o *MovieDtoV14) HasVotes() bool {
	if o != nil && o.Votes != nil {
		return true
	}

	return false
}

// SetVotes gets a reference to the given Votes and assigns it to the Votes field.
func (o *MovieDtoV14) SetVotes(v Votes) {
	o.Votes = &v
}

// GetMovieLength returns the MovieLength field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieDtoV14) GetMovieLength() float32 {
	if o == nil || o.MovieLength.Get() == nil {
		var ret float32
		return ret
	}
	return *o.MovieLength.Get()
}

// GetMovieLengthOk returns a tuple with the MovieLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieDtoV14) GetMovieLengthOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MovieLength.Get(), o.MovieLength.IsSet()
}

// HasMovieLength returns a boolean if a field has been set.
func (o *MovieDtoV14) HasMovieLength() bool {
	if o != nil && o.MovieLength.IsSet() {
		return true
	}

	return false
}

// SetMovieLength gets a reference to the given NullableFloat32 and assigns it to the MovieLength field.
func (o *MovieDtoV14) SetMovieLength(v float32) {
	o.MovieLength.Set(&v)
}
// SetMovieLengthNil sets the value for MovieLength to be an explicit nil
func (o *MovieDtoV14) SetMovieLengthNil() {
	o.MovieLength.Set(nil)
}

// UnsetMovieLength ensures that no value is present for MovieLength, not even an explicit nil
func (o *MovieDtoV14) UnsetMovieLength() {
	o.MovieLength.Unset()
}

// GetRatingMpaa returns the RatingMpaa field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieDtoV14) GetRatingMpaa() string {
	if o == nil || o.RatingMpaa.Get() == nil {
		var ret string
		return ret
	}
	return *o.RatingMpaa.Get()
}

// GetRatingMpaaOk returns a tuple with the RatingMpaa field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieDtoV14) GetRatingMpaaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RatingMpaa.Get(), o.RatingMpaa.IsSet()
}

// HasRatingMpaa returns a boolean if a field has been set.
func (o *MovieDtoV14) HasRatingMpaa() bool {
	if o != nil && o.RatingMpaa.IsSet() {
		return true
	}

	return false
}

// SetRatingMpaa gets a reference to the given NullableString and assigns it to the RatingMpaa field.
func (o *MovieDtoV14) SetRatingMpaa(v string) {
	o.RatingMpaa.Set(&v)
}
// SetRatingMpaaNil sets the value for RatingMpaa to be an explicit nil
func (o *MovieDtoV14) SetRatingMpaaNil() {
	o.RatingMpaa.Set(nil)
}

// UnsetRatingMpaa ensures that no value is present for RatingMpaa, not even an explicit nil
func (o *MovieDtoV14) UnsetRatingMpaa() {
	o.RatingMpaa.Unset()
}

// GetAgeRating returns the AgeRating field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieDtoV14) GetAgeRating() float32 {
	if o == nil || o.AgeRating.Get() == nil {
		var ret float32
		return ret
	}
	return *o.AgeRating.Get()
}

// GetAgeRatingOk returns a tuple with the AgeRating field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieDtoV14) GetAgeRatingOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AgeRating.Get(), o.AgeRating.IsSet()
}

// HasAgeRating returns a boolean if a field has been set.
func (o *MovieDtoV14) HasAgeRating() bool {
	if o != nil && o.AgeRating.IsSet() {
		return true
	}

	return false
}

// SetAgeRating gets a reference to the given NullableFloat32 and assigns it to the AgeRating field.
func (o *MovieDtoV14) SetAgeRating(v float32) {
	o.AgeRating.Set(&v)
}
// SetAgeRatingNil sets the value for AgeRating to be an explicit nil
func (o *MovieDtoV14) SetAgeRatingNil() {
	o.AgeRating.Set(nil)
}

// UnsetAgeRating ensures that no value is present for AgeRating, not even an explicit nil
func (o *MovieDtoV14) UnsetAgeRating() {
	o.AgeRating.Unset()
}

// GetLogo returns the Logo field value if set, zero value otherwise.
func (o *MovieDtoV14) GetLogo() Logo {
	if o == nil || o.Logo == nil {
		var ret Logo
		return ret
	}
	return *o.Logo
}

// GetLogoOk returns a tuple with the Logo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieDtoV14) GetLogoOk() (*Logo, bool) {
	if o == nil || o.Logo == nil {
		return nil, false
	}
	return o.Logo, true
}

// HasLogo returns a boolean if a field has been set.
func (o *MovieDtoV14) HasLogo() bool {
	if o != nil && o.Logo != nil {
		return true
	}

	return false
}

// SetLogo gets a reference to the given Logo and assigns it to the Logo field.
func (o *MovieDtoV14) SetLogo(v Logo) {
	o.Logo = &v
}

// GetPoster returns the Poster field value if set, zero value otherwise.
func (o *MovieDtoV14) GetPoster() ShortImage {
	if o == nil || o.Poster == nil {
		var ret ShortImage
		return ret
	}
	return *o.Poster
}

// GetPosterOk returns a tuple with the Poster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieDtoV14) GetPosterOk() (*ShortImage, bool) {
	if o == nil || o.Poster == nil {
		return nil, false
	}
	return o.Poster, true
}

// HasPoster returns a boolean if a field has been set.
func (o *MovieDtoV14) HasPoster() bool {
	if o != nil && o.Poster != nil {
		return true
	}

	return false
}

// SetPoster gets a reference to the given ShortImage and assigns it to the Poster field.
func (o *MovieDtoV14) SetPoster(v ShortImage) {
	o.Poster = &v
}

// GetBackdrop returns the Backdrop field value if set, zero value otherwise.
func (o *MovieDtoV14) GetBackdrop() ShortImage {
	if o == nil || o.Backdrop == nil {
		var ret ShortImage
		return ret
	}
	return *o.Backdrop
}

// GetBackdropOk returns a tuple with the Backdrop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieDtoV14) GetBackdropOk() (*ShortImage, bool) {
	if o == nil || o.Backdrop == nil {
		return nil, false
	}
	return o.Backdrop, true
}

// HasBackdrop returns a boolean if a field has been set.
func (o *MovieDtoV14) HasBackdrop() bool {
	if o != nil && o.Backdrop != nil {
		return true
	}

	return false
}

// SetBackdrop gets a reference to the given ShortImage and assigns it to the Backdrop field.
func (o *MovieDtoV14) SetBackdrop(v ShortImage) {
	o.Backdrop = &v
}

// GetVideos returns the Videos field value if set, zero value otherwise.
func (o *MovieDtoV14) GetVideos() VideoTypes {
	if o == nil || o.Videos == nil {
		var ret VideoTypes
		return ret
	}
	return *o.Videos
}

// GetVideosOk returns a tuple with the Videos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieDtoV14) GetVideosOk() (*VideoTypes, bool) {
	if o == nil || o.Videos == nil {
		return nil, false
	}
	return o.Videos, true
}

// HasVideos returns a boolean if a field has been set.
func (o *MovieDtoV14) HasVideos() bool {
	if o != nil && o.Videos != nil {
		return true
	}

	return false
}

// SetVideos gets a reference to the given VideoTypes and assigns it to the Videos field.
func (o *MovieDtoV14) SetVideos(v VideoTypes) {
	o.Videos = &v
}

// GetGenres returns the Genres field value if set, zero value otherwise.
func (o *MovieDtoV14) GetGenres() []ItemName {
	if o == nil || o.Genres == nil {
		var ret []ItemName
		return ret
	}
	return o.Genres
}

// GetGenresOk returns a tuple with the Genres field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieDtoV14) GetGenresOk() ([]ItemName, bool) {
	if o == nil || o.Genres == nil {
		return nil, false
	}
	return o.Genres, true
}

// HasGenres returns a boolean if a field has been set.
func (o *MovieDtoV14) HasGenres() bool {
	if o != nil && o.Genres != nil {
		return true
	}

	return false
}

// SetGenres gets a reference to the given []ItemName and assigns it to the Genres field.
func (o *MovieDtoV14) SetGenres(v []ItemName) {
	o.Genres = v
}

// GetCountries returns the Countries field value if set, zero value otherwise.
func (o *MovieDtoV14) GetCountries() []ItemName {
	if o == nil || o.Countries == nil {
		var ret []ItemName
		return ret
	}
	return o.Countries
}

// GetCountriesOk returns a tuple with the Countries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieDtoV14) GetCountriesOk() ([]ItemName, bool) {
	if o == nil || o.Countries == nil {
		return nil, false
	}
	return o.Countries, true
}

// HasCountries returns a boolean if a field has been set.
func (o *MovieDtoV14) HasCountries() bool {
	if o != nil && o.Countries != nil {
		return true
	}

	return false
}

// SetCountries gets a reference to the given []ItemName and assigns it to the Countries field.
func (o *MovieDtoV14) SetCountries(v []ItemName) {
	o.Countries = v
}

// GetPersons returns the Persons field value if set, zero value otherwise.
func (o *MovieDtoV14) GetPersons() []PersonInMovie {
	if o == nil || o.Persons == nil {
		var ret []PersonInMovie
		return ret
	}
	return o.Persons
}

// GetPersonsOk returns a tuple with the Persons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieDtoV14) GetPersonsOk() ([]PersonInMovie, bool) {
	if o == nil || o.Persons == nil {
		return nil, false
	}
	return o.Persons, true
}

// HasPersons returns a boolean if a field has been set.
func (o *MovieDtoV14) HasPersons() bool {
	if o != nil && o.Persons != nil {
		return true
	}

	return false
}

// SetPersons gets a reference to the given []PersonInMovie and assigns it to the Persons field.
func (o *MovieDtoV14) SetPersons(v []PersonInMovie) {
	o.Persons = v
}

// GetReviewInfo returns the ReviewInfo field value if set, zero value otherwise.
func (o *MovieDtoV14) GetReviewInfo() ReviewInfo {
	if o == nil || o.ReviewInfo == nil {
		var ret ReviewInfo
		return ret
	}
	return *o.ReviewInfo
}

// GetReviewInfoOk returns a tuple with the ReviewInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieDtoV14) GetReviewInfoOk() (*ReviewInfo, bool) {
	if o == nil || o.ReviewInfo == nil {
		return nil, false
	}
	return o.ReviewInfo, true
}

// HasReviewInfo returns a boolean if a field has been set.
func (o *MovieDtoV14) HasReviewInfo() bool {
	if o != nil && o.ReviewInfo != nil {
		return true
	}

	return false
}

// SetReviewInfo gets a reference to the given ReviewInfo and assigns it to the ReviewInfo field.
func (o *MovieDtoV14) SetReviewInfo(v ReviewInfo) {
	o.ReviewInfo = &v
}

// GetSeasonsInfo returns the SeasonsInfo field value if set, zero value otherwise.
func (o *MovieDtoV14) GetSeasonsInfo() []SeasonInfo {
	if o == nil || o.SeasonsInfo == nil {
		var ret []SeasonInfo
		return ret
	}
	return o.SeasonsInfo
}

// GetSeasonsInfoOk returns a tuple with the SeasonsInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieDtoV14) GetSeasonsInfoOk() ([]SeasonInfo, bool) {
	if o == nil || o.SeasonsInfo == nil {
		return nil, false
	}
	return o.SeasonsInfo, true
}

// HasSeasonsInfo returns a boolean if a field has been set.
func (o *MovieDtoV14) HasSeasonsInfo() bool {
	if o != nil && o.SeasonsInfo != nil {
		return true
	}

	return false
}

// SetSeasonsInfo gets a reference to the given []SeasonInfo and assigns it to the SeasonsInfo field.
func (o *MovieDtoV14) SetSeasonsInfo(v []SeasonInfo) {
	o.SeasonsInfo = v
}

// GetBudget returns the Budget field value if set, zero value otherwise.
func (o *MovieDtoV14) GetBudget() CurrencyValue {
	if o == nil || o.Budget == nil {
		var ret CurrencyValue
		return ret
	}
	return *o.Budget
}

// GetBudgetOk returns a tuple with the Budget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieDtoV14) GetBudgetOk() (*CurrencyValue, bool) {
	if o == nil || o.Budget == nil {
		return nil, false
	}
	return o.Budget, true
}

// HasBudget returns a boolean if a field has been set.
func (o *MovieDtoV14) HasBudget() bool {
	if o != nil && o.Budget != nil {
		return true
	}

	return false
}

// SetBudget gets a reference to the given CurrencyValue and assigns it to the Budget field.
func (o *MovieDtoV14) SetBudget(v CurrencyValue) {
	o.Budget = &v
}

// GetFees returns the Fees field value if set, zero value otherwise.
func (o *MovieDtoV14) GetFees() Fees {
	if o == nil || o.Fees == nil {
		var ret Fees
		return ret
	}
	return *o.Fees
}

// GetFeesOk returns a tuple with the Fees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieDtoV14) GetFeesOk() (*Fees, bool) {
	if o == nil || o.Fees == nil {
		return nil, false
	}
	return o.Fees, true
}

// HasFees returns a boolean if a field has been set.
func (o *MovieDtoV14) HasFees() bool {
	if o != nil && o.Fees != nil {
		return true
	}

	return false
}

// SetFees gets a reference to the given Fees and assigns it to the Fees field.
func (o *MovieDtoV14) SetFees(v Fees) {
	o.Fees = &v
}

// GetPremiere returns the Premiere field value if set, zero value otherwise.
func (o *MovieDtoV14) GetPremiere() Premiere {
	if o == nil || o.Premiere == nil {
		var ret Premiere
		return ret
	}
	return *o.Premiere
}

// GetPremiereOk returns a tuple with the Premiere field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieDtoV14) GetPremiereOk() (*Premiere, bool) {
	if o == nil || o.Premiere == nil {
		return nil, false
	}
	return o.Premiere, true
}

// HasPremiere returns a boolean if a field has been set.
func (o *MovieDtoV14) HasPremiere() bool {
	if o != nil && o.Premiere != nil {
		return true
	}

	return false
}

// SetPremiere gets a reference to the given Premiere and assigns it to the Premiere field.
func (o *MovieDtoV14) SetPremiere(v Premiere) {
	o.Premiere = &v
}

// GetSimilarMovies returns the SimilarMovies field value if set, zero value otherwise.
func (o *MovieDtoV14) GetSimilarMovies() []LinkedMovieV14 {
	if o == nil || o.SimilarMovies == nil {
		var ret []LinkedMovieV14
		return ret
	}
	return o.SimilarMovies
}

// GetSimilarMoviesOk returns a tuple with the SimilarMovies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieDtoV14) GetSimilarMoviesOk() ([]LinkedMovieV14, bool) {
	if o == nil || o.SimilarMovies == nil {
		return nil, false
	}
	return o.SimilarMovies, true
}

// HasSimilarMovies returns a boolean if a field has been set.
func (o *MovieDtoV14) HasSimilarMovies() bool {
	if o != nil && o.SimilarMovies != nil {
		return true
	}

	return false
}

// SetSimilarMovies gets a reference to the given []LinkedMovieV14 and assigns it to the SimilarMovies field.
func (o *MovieDtoV14) SetSimilarMovies(v []LinkedMovieV14) {
	o.SimilarMovies = v
}

// GetSequelsAndPrequels returns the SequelsAndPrequels field value if set, zero value otherwise.
func (o *MovieDtoV14) GetSequelsAndPrequels() []LinkedMovieV14 {
	if o == nil || o.SequelsAndPrequels == nil {
		var ret []LinkedMovieV14
		return ret
	}
	return o.SequelsAndPrequels
}

// GetSequelsAndPrequelsOk returns a tuple with the SequelsAndPrequels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieDtoV14) GetSequelsAndPrequelsOk() ([]LinkedMovieV14, bool) {
	if o == nil || o.SequelsAndPrequels == nil {
		return nil, false
	}
	return o.SequelsAndPrequels, true
}

// HasSequelsAndPrequels returns a boolean if a field has been set.
func (o *MovieDtoV14) HasSequelsAndPrequels() bool {
	if o != nil && o.SequelsAndPrequels != nil {
		return true
	}

	return false
}

// SetSequelsAndPrequels gets a reference to the given []LinkedMovieV14 and assigns it to the SequelsAndPrequels field.
func (o *MovieDtoV14) SetSequelsAndPrequels(v []LinkedMovieV14) {
	o.SequelsAndPrequels = v
}

// GetWatchability returns the Watchability field value if set, zero value otherwise.
func (o *MovieDtoV14) GetWatchability() Watchability {
	if o == nil || o.Watchability == nil {
		var ret Watchability
		return ret
	}
	return *o.Watchability
}

// GetWatchabilityOk returns a tuple with the Watchability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieDtoV14) GetWatchabilityOk() (*Watchability, bool) {
	if o == nil || o.Watchability == nil {
		return nil, false
	}
	return o.Watchability, true
}

// HasWatchability returns a boolean if a field has been set.
func (o *MovieDtoV14) HasWatchability() bool {
	if o != nil && o.Watchability != nil {
		return true
	}

	return false
}

// SetWatchability gets a reference to the given Watchability and assigns it to the Watchability field.
func (o *MovieDtoV14) SetWatchability(v Watchability) {
	o.Watchability = &v
}

// GetReleaseYears returns the ReleaseYears field value if set, zero value otherwise.
func (o *MovieDtoV14) GetReleaseYears() []YearRange {
	if o == nil || o.ReleaseYears == nil {
		var ret []YearRange
		return ret
	}
	return o.ReleaseYears
}

// GetReleaseYearsOk returns a tuple with the ReleaseYears field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieDtoV14) GetReleaseYearsOk() ([]YearRange, bool) {
	if o == nil || o.ReleaseYears == nil {
		return nil, false
	}
	return o.ReleaseYears, true
}

// HasReleaseYears returns a boolean if a field has been set.
func (o *MovieDtoV14) HasReleaseYears() bool {
	if o != nil && o.ReleaseYears != nil {
		return true
	}

	return false
}

// SetReleaseYears gets a reference to the given []YearRange and assigns it to the ReleaseYears field.
func (o *MovieDtoV14) SetReleaseYears(v []YearRange) {
	o.ReleaseYears = v
}

// GetTop10 returns the Top10 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieDtoV14) GetTop10() float32 {
	if o == nil || o.Top10.Get() == nil {
		var ret float32
		return ret
	}
	return *o.Top10.Get()
}

// GetTop10Ok returns a tuple with the Top10 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieDtoV14) GetTop10Ok() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Top10.Get(), o.Top10.IsSet()
}

// HasTop10 returns a boolean if a field has been set.
func (o *MovieDtoV14) HasTop10() bool {
	if o != nil && o.Top10.IsSet() {
		return true
	}

	return false
}

// SetTop10 gets a reference to the given NullableFloat32 and assigns it to the Top10 field.
func (o *MovieDtoV14) SetTop10(v float32) {
	o.Top10.Set(&v)
}
// SetTop10Nil sets the value for Top10 to be an explicit nil
func (o *MovieDtoV14) SetTop10Nil() {
	o.Top10.Set(nil)
}

// UnsetTop10 ensures that no value is present for Top10, not even an explicit nil
func (o *MovieDtoV14) UnsetTop10() {
	o.Top10.Unset()
}

// GetTop250 returns the Top250 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieDtoV14) GetTop250() float32 {
	if o == nil || o.Top250.Get() == nil {
		var ret float32
		return ret
	}
	return *o.Top250.Get()
}

// GetTop250Ok returns a tuple with the Top250 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieDtoV14) GetTop250Ok() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Top250.Get(), o.Top250.IsSet()
}

// HasTop250 returns a boolean if a field has been set.
func (o *MovieDtoV14) HasTop250() bool {
	if o != nil && o.Top250.IsSet() {
		return true
	}

	return false
}

// SetTop250 gets a reference to the given NullableFloat32 and assigns it to the Top250 field.
func (o *MovieDtoV14) SetTop250(v float32) {
	o.Top250.Set(&v)
}
// SetTop250Nil sets the value for Top250 to be an explicit nil
func (o *MovieDtoV14) SetTop250Nil() {
	o.Top250.Set(nil)
}

// UnsetTop250 ensures that no value is present for Top250, not even an explicit nil
func (o *MovieDtoV14) UnsetTop250() {
	o.Top250.Unset()
}

// GetTicketsOnSale returns the TicketsOnSale field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieDtoV14) GetTicketsOnSale() bool {
	if o == nil || o.TicketsOnSale.Get() == nil {
		var ret bool
		return ret
	}
	return *o.TicketsOnSale.Get()
}

// GetTicketsOnSaleOk returns a tuple with the TicketsOnSale field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieDtoV14) GetTicketsOnSaleOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TicketsOnSale.Get(), o.TicketsOnSale.IsSet()
}

// HasTicketsOnSale returns a boolean if a field has been set.
func (o *MovieDtoV14) HasTicketsOnSale() bool {
	if o != nil && o.TicketsOnSale.IsSet() {
		return true
	}

	return false
}

// SetTicketsOnSale gets a reference to the given NullableBool and assigns it to the TicketsOnSale field.
func (o *MovieDtoV14) SetTicketsOnSale(v bool) {
	o.TicketsOnSale.Set(&v)
}
// SetTicketsOnSaleNil sets the value for TicketsOnSale to be an explicit nil
func (o *MovieDtoV14) SetTicketsOnSaleNil() {
	o.TicketsOnSale.Set(nil)
}

// UnsetTicketsOnSale ensures that no value is present for TicketsOnSale, not even an explicit nil
func (o *MovieDtoV14) UnsetTicketsOnSale() {
	o.TicketsOnSale.Unset()
}

// GetTotalSeriesLength returns the TotalSeriesLength field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieDtoV14) GetTotalSeriesLength() float32 {
	if o == nil || o.TotalSeriesLength.Get() == nil {
		var ret float32
		return ret
	}
	return *o.TotalSeriesLength.Get()
}

// GetTotalSeriesLengthOk returns a tuple with the TotalSeriesLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieDtoV14) GetTotalSeriesLengthOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalSeriesLength.Get(), o.TotalSeriesLength.IsSet()
}

// HasTotalSeriesLength returns a boolean if a field has been set.
func (o *MovieDtoV14) HasTotalSeriesLength() bool {
	if o != nil && o.TotalSeriesLength.IsSet() {
		return true
	}

	return false
}

// SetTotalSeriesLength gets a reference to the given NullableFloat32 and assigns it to the TotalSeriesLength field.
func (o *MovieDtoV14) SetTotalSeriesLength(v float32) {
	o.TotalSeriesLength.Set(&v)
}
// SetTotalSeriesLengthNil sets the value for TotalSeriesLength to be an explicit nil
func (o *MovieDtoV14) SetTotalSeriesLengthNil() {
	o.TotalSeriesLength.Set(nil)
}

// UnsetTotalSeriesLength ensures that no value is present for TotalSeriesLength, not even an explicit nil
func (o *MovieDtoV14) UnsetTotalSeriesLength() {
	o.TotalSeriesLength.Unset()
}

// GetSeriesLength returns the SeriesLength field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieDtoV14) GetSeriesLength() float32 {
	if o == nil || o.SeriesLength.Get() == nil {
		var ret float32
		return ret
	}
	return *o.SeriesLength.Get()
}

// GetSeriesLengthOk returns a tuple with the SeriesLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieDtoV14) GetSeriesLengthOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SeriesLength.Get(), o.SeriesLength.IsSet()
}

// HasSeriesLength returns a boolean if a field has been set.
func (o *MovieDtoV14) HasSeriesLength() bool {
	if o != nil && o.SeriesLength.IsSet() {
		return true
	}

	return false
}

// SetSeriesLength gets a reference to the given NullableFloat32 and assigns it to the SeriesLength field.
func (o *MovieDtoV14) SetSeriesLength(v float32) {
	o.SeriesLength.Set(&v)
}
// SetSeriesLengthNil sets the value for SeriesLength to be an explicit nil
func (o *MovieDtoV14) SetSeriesLengthNil() {
	o.SeriesLength.Set(nil)
}

// UnsetSeriesLength ensures that no value is present for SeriesLength, not even an explicit nil
func (o *MovieDtoV14) UnsetSeriesLength() {
	o.SeriesLength.Unset()
}

// GetIsSeries returns the IsSeries field value
func (o *MovieDtoV14) GetIsSeries() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsSeries
}

// GetIsSeriesOk returns a tuple with the IsSeries field value
// and a boolean to check if the value has been set.
func (o *MovieDtoV14) GetIsSeriesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsSeries, true
}

// SetIsSeries sets field value
func (o *MovieDtoV14) SetIsSeries(v bool) {
	o.IsSeries = v
}

// GetAudience returns the Audience field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieDtoV14) GetAudience() []Audience {
	if o == nil {
		var ret []Audience
		return ret
	}
	return o.Audience
}

// GetAudienceOk returns a tuple with the Audience field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieDtoV14) GetAudienceOk() ([]Audience, bool) {
	if o == nil || o.Audience == nil {
		return nil, false
	}
	return o.Audience, true
}

// HasAudience returns a boolean if a field has been set.
func (o *MovieDtoV14) HasAudience() bool {
	if o != nil && o.Audience != nil {
		return true
	}

	return false
}

// SetAudience gets a reference to the given []Audience and assigns it to the Audience field.
func (o *MovieDtoV14) SetAudience(v []Audience) {
	o.Audience = v
}

// GetLists returns the Lists field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieDtoV14) GetLists() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Lists
}

// GetListsOk returns a tuple with the Lists field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieDtoV14) GetListsOk() ([]string, bool) {
	if o == nil || o.Lists == nil {
		return nil, false
	}
	return o.Lists, true
}

// HasLists returns a boolean if a field has been set.
func (o *MovieDtoV14) HasLists() bool {
	if o != nil && o.Lists != nil {
		return true
	}

	return false
}

// SetLists gets a reference to the given []string and assigns it to the Lists field.
func (o *MovieDtoV14) SetLists(v []string) {
	o.Lists = v
}

// GetNetworks returns the Networks field value
func (o *MovieDtoV14) GetNetworks() []NetworksV14 {
	if o == nil {
		var ret []NetworksV14
		return ret
	}

	return o.Networks
}

// GetNetworksOk returns a tuple with the Networks field value
// and a boolean to check if the value has been set.
func (o *MovieDtoV14) GetNetworksOk() ([]NetworksV14, bool) {
	if o == nil {
		return nil, false
	}
	return o.Networks, true
}

// SetNetworks sets field value
func (o *MovieDtoV14) SetNetworks(v []NetworksV14) {
	o.Networks = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *MovieDtoV14) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *MovieDtoV14) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *MovieDtoV14) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *MovieDtoV14) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *MovieDtoV14) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *MovieDtoV14) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetFacts returns the Facts field value
func (o *MovieDtoV14) GetFacts() []FactInMovie {
	if o == nil {
		var ret []FactInMovie
		return ret
	}

	return o.Facts
}

// GetFactsOk returns a tuple with the Facts field value
// and a boolean to check if the value has been set.
func (o *MovieDtoV14) GetFactsOk() ([]FactInMovie, bool) {
	if o == nil {
		return nil, false
	}
	return o.Facts, true
}

// SetFacts sets field value
func (o *MovieDtoV14) SetFacts(v []FactInMovie) {
	o.Facts = v
}

// GetImagesInfo returns the ImagesInfo field value
func (o *MovieDtoV14) GetImagesInfo() Images {
	if o == nil {
		var ret Images
		return ret
	}

	return o.ImagesInfo
}

// GetImagesInfoOk returns a tuple with the ImagesInfo field value
// and a boolean to check if the value has been set.
func (o *MovieDtoV14) GetImagesInfoOk() (*Images, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImagesInfo, true
}

// SetImagesInfo sets field value
func (o *MovieDtoV14) SetImagesInfo(v Images) {
	o.ImagesInfo = v
}

func (o MovieDtoV14) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["externalId"] = o.ExternalId
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.AlternativeName.IsSet() {
		toSerialize["alternativeName"] = o.AlternativeName.Get()
	}
	if o.EnName.IsSet() {
		toSerialize["enName"] = o.EnName.Get()
	}
	if true {
		toSerialize["names"] = o.Names
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["typeNumber"] = o.TypeNumber
	}
	if o.Year.IsSet() {
		toSerialize["year"] = o.Year.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.ShortDescription.IsSet() {
		toSerialize["shortDescription"] = o.ShortDescription.Get()
	}
	if o.Slogan.IsSet() {
		toSerialize["slogan"] = o.Slogan.Get()
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.Rating != nil {
		toSerialize["rating"] = o.Rating
	}
	if o.Votes != nil {
		toSerialize["votes"] = o.Votes
	}
	if o.MovieLength.IsSet() {
		toSerialize["movieLength"] = o.MovieLength.Get()
	}
	if o.RatingMpaa.IsSet() {
		toSerialize["ratingMpaa"] = o.RatingMpaa.Get()
	}
	if o.AgeRating.IsSet() {
		toSerialize["ageRating"] = o.AgeRating.Get()
	}
	if o.Logo != nil {
		toSerialize["logo"] = o.Logo
	}
	if o.Poster != nil {
		toSerialize["poster"] = o.Poster
	}
	if o.Backdrop != nil {
		toSerialize["backdrop"] = o.Backdrop
	}
	if o.Videos != nil {
		toSerialize["videos"] = o.Videos
	}
	if o.Genres != nil {
		toSerialize["genres"] = o.Genres
	}
	if o.Countries != nil {
		toSerialize["countries"] = o.Countries
	}
	if o.Persons != nil {
		toSerialize["persons"] = o.Persons
	}
	if o.ReviewInfo != nil {
		toSerialize["reviewInfo"] = o.ReviewInfo
	}
	if o.SeasonsInfo != nil {
		toSerialize["seasonsInfo"] = o.SeasonsInfo
	}
	if o.Budget != nil {
		toSerialize["budget"] = o.Budget
	}
	if o.Fees != nil {
		toSerialize["fees"] = o.Fees
	}
	if o.Premiere != nil {
		toSerialize["premiere"] = o.Premiere
	}
	if o.SimilarMovies != nil {
		toSerialize["similarMovies"] = o.SimilarMovies
	}
	if o.SequelsAndPrequels != nil {
		toSerialize["sequelsAndPrequels"] = o.SequelsAndPrequels
	}
	if o.Watchability != nil {
		toSerialize["watchability"] = o.Watchability
	}
	if o.ReleaseYears != nil {
		toSerialize["releaseYears"] = o.ReleaseYears
	}
	if o.Top10.IsSet() {
		toSerialize["top10"] = o.Top10.Get()
	}
	if o.Top250.IsSet() {
		toSerialize["top250"] = o.Top250.Get()
	}
	if o.TicketsOnSale.IsSet() {
		toSerialize["ticketsOnSale"] = o.TicketsOnSale.Get()
	}
	if o.TotalSeriesLength.IsSet() {
		toSerialize["totalSeriesLength"] = o.TotalSeriesLength.Get()
	}
	if o.SeriesLength.IsSet() {
		toSerialize["seriesLength"] = o.SeriesLength.Get()
	}
	if true {
		toSerialize["isSeries"] = o.IsSeries
	}
	if o.Audience != nil {
		toSerialize["audience"] = o.Audience
	}
	if o.Lists != nil {
		toSerialize["lists"] = o.Lists
	}
	if true {
		toSerialize["networks"] = o.Networks
	}
	if true {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if true {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if true {
		toSerialize["facts"] = o.Facts
	}
	if true {
		toSerialize["imagesInfo"] = o.ImagesInfo
	}
	return json.Marshal(toSerialize)
}

type NullableMovieDtoV14 struct {
	value *MovieDtoV14
	isSet bool
}

func (v NullableMovieDtoV14) Get() *MovieDtoV14 {
	return v.value
}

func (v *NullableMovieDtoV14) Set(val *MovieDtoV14) {
	v.value = val
	v.isSet = true
}

func (v NullableMovieDtoV14) IsSet() bool {
	return v.isSet
}

func (v *NullableMovieDtoV14) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMovieDtoV14(val *MovieDtoV14) *NullableMovieDtoV14 {
	return &NullableMovieDtoV14{value: val, isSet: true}
}

func (v NullableMovieDtoV14) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMovieDtoV14) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


