/*
Документация для неофициального API кинопоиска (kinopoisk.dev).

 <!-- Yandex.Metrika counter --> <div><img src=\"https://mc.yandex.ru/watch/62307766\" style=\"position:absolute; left:-9999px;\" alt=\"\" /></div> <!-- /Yandex.Metrika counter --> <p>Через этот API вы можете получить практически все данные из кинопоиска. Больше информации вы можете получить изучив эту документацию.</p> <h2>Как работать с документацией?</h2> <p> Для начала работы с API вам необходимо получить токен, который вы можете получить в боте <a href=\"https://t.me/kinopoiskdev_bot\">@kinopoiskdev_bot</a>. <br /> После получения токена, вам необходимо авторизоваться в документации, для этого нажмите на кнопку <strong>Authorize</strong> и введите токен в поле <strong>Value</strong>.<br /> После авторизации вы можете отправлять запросы к API, для этого нажмите на кнопку <strong>Try it out</strong> и заполните необходимые поля для составления нужного фильтра.<br /> После заполнения полей нажмите на кнопку <strong>Execute</strong> и получите ответ от API и пример запроса. </p> <h3>Как работать с API?</h3> <p> API работает по принципу REST, все запросы отправляются на адрес <code>https://api.kinopoisk.dev/</code> с указанием версии API и необходимого ресурса.<br /> Все запросы к API кинопоиска должны содержать заголовок <code>X-API-KEY</code> с вашим токеном. В противном случае вы получите ошибку <code>401</code>.<br /> При составлении запроса учитывайте, что все параметры должны быть в <code>query</code> и <code>path</code>. В зависимости от метода который вы используете. Например, вы хотите получить список фильмов за 2023 год в жанре <code>криминал</code>, тогда ваш запрос будет выглядеть так: <code>https://api.kinopoisk.dev/v1.4/movie?year=2023&genres.name=криминал</code>. Или вы хотите получить список фильмов с рейтингом выше 8, тогда ваш запрос будет выглядеть так: <code>https://api.kinopoisk.dev/v1.4/movie?rating.imdb=8-10</code>. Документация kinopoisk api может помочь вам составить нужный запрос, для этого воспользуйтесь ее конструктором. </p> <h3>Особенности синтекса query параметров</h3> <p> Ключи в query параметрах имеют разные типы значений. В зависимости от типа значения, вы можете использовать разные операторы для фильтрации для поиска максимально релевантного фильма, сериала и т.д. в базе. <br /> Поля с типом <code>Number</code> могут принимать значения в форматах: <code>rating.kp=1-10</code>, <code>rating.kp=1</code>, <code>year=2022&year=2023</code>. <br /> Поля с типом <code>Date</code> могут принимать значения в форматах: <code>premiere.russia=dd.mm.yyyy-dd.mm.yyyy</code>, <code>premiere.russia=dd.mm.yyyy</code>. <br /> Поля с типом <code>String</code> могут принимать значения в форматах: <code>genres.name=драма</code>, <code>genres.name=криминал</code>, <code>genres.name=криминал&genres.name=драма</code> <br/> Поля с типом <code>Boolean</code> могут принимать значения в форматах: <code>isSeries=true</code>, <code>isSeries=false</code>. <br /> Параметры жанров и стран могут принимать операторы <code>+</code> и <code>!</code>, для указания включаемых и исключаемых значений. Например, вы хотите получить список фильмов в жанрах <code>драма</code> и <code>криминал</code>, тогда ваш запрос будет выглядеть так: <code>genres.name=+драма&genres.name=+криминал</code>. Или вы хотите получить список фильмов с жанром <code>драма</code> и без жанра <code>криминал</code>, тогда ваш запрос будет выглядеть так: <code>genres.name=+драма&genres.name=!криминал</code>. <br /> </p> <p> Расшифровка операторов: <ul>   <li><code>!</code> - исключить. Этот символ нужно отправлять в кодированной форме <code>%21</code></li>   <li><code>+</code> - включить. Этот символ нужно отправлять в кодированной форме <code>%2B</code></li>   <li><code>-</code> - диапазон значений, используется в качестве разделителя.</li> </ul> </p>  <p>По вопросам работы с API обращайтесь в чат <a href=\"https://t.me/+jeHPZVXiLPFhODJi\">Developer Community KinopoiskDev</a>.</p>  <p>Если вы обнаружили ошибку или у вас есть предложения по улучшению, создавайте issue на <a href=\"https://github.com/mdwitr0/kinopoiskdev\">GitHub</a>.</p>  <h3>Полезные ссылки:</h3> <ul>   <li><a href=\"https://kinopoiskdev.readme.io\">Более удобная документация</a></li>   <li><a href=\"https://github.com/OpenMovieDB/kinopoiskdev_client\">JavaScript и TypeScript клиент (Устарел, ждет обновления)</a></li>   <li><a href=\"https://github.com/odi1n/kinopoisk_dev\">Python клиент (Устарел, ждет обновления)</a></li>   <li><a href=\"/documentation-json\">OpenAPI Specification (JSON)</a></li>   <li><a href=\"/documentation-yaml\">OpenAPI Specification (YAML)</a></li> </ul> 

API version: 1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kinopoisk_api

import (
	"encoding/json"
)

// Rating struct for Rating
type Rating struct {
	// Рейтинг кинопоиска
	Kp NullableFloat32 `json:"kp,omitempty"`
	// Рейтинг IMDB
	Imdb NullableFloat32 `json:"imdb,omitempty"`
	// Рейтинг TMDB
	Tmdb NullableFloat32 `json:"tmdb,omitempty"`
	// Рейтинг кинокритиков
	FilmCritics NullableFloat32 `json:"filmCritics,omitempty"`
	// Рейтинг кинокритиков из РФ
	RussianFilmCritics NullableFloat32 `json:"russianFilmCritics,omitempty"`
	// Рейтинг основанный на ожиданиях пользователей
	Await NullableFloat32 `json:"await,omitempty"`
}

// NewRating instantiates a new Rating object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRating() *Rating {
	this := Rating{}
	return &this
}

// NewRatingWithDefaults instantiates a new Rating object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRatingWithDefaults() *Rating {
	this := Rating{}
	return &this
}

// GetKp returns the Kp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Rating) GetKp() float32 {
	if o == nil || o.Kp.Get() == nil {
		var ret float32
		return ret
	}
	return *o.Kp.Get()
}

// GetKpOk returns a tuple with the Kp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Rating) GetKpOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Kp.Get(), o.Kp.IsSet()
}

// HasKp returns a boolean if a field has been set.
func (o *Rating) HasKp() bool {
	if o != nil && o.Kp.IsSet() {
		return true
	}

	return false
}

// SetKp gets a reference to the given NullableFloat32 and assigns it to the Kp field.
func (o *Rating) SetKp(v float32) {
	o.Kp.Set(&v)
}
// SetKpNil sets the value for Kp to be an explicit nil
func (o *Rating) SetKpNil() {
	o.Kp.Set(nil)
}

// UnsetKp ensures that no value is present for Kp, not even an explicit nil
func (o *Rating) UnsetKp() {
	o.Kp.Unset()
}

// GetImdb returns the Imdb field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Rating) GetImdb() float32 {
	if o == nil || o.Imdb.Get() == nil {
		var ret float32
		return ret
	}
	return *o.Imdb.Get()
}

// GetImdbOk returns a tuple with the Imdb field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Rating) GetImdbOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Imdb.Get(), o.Imdb.IsSet()
}

// HasImdb returns a boolean if a field has been set.
func (o *Rating) HasImdb() bool {
	if o != nil && o.Imdb.IsSet() {
		return true
	}

	return false
}

// SetImdb gets a reference to the given NullableFloat32 and assigns it to the Imdb field.
func (o *Rating) SetImdb(v float32) {
	o.Imdb.Set(&v)
}
// SetImdbNil sets the value for Imdb to be an explicit nil
func (o *Rating) SetImdbNil() {
	o.Imdb.Set(nil)
}

// UnsetImdb ensures that no value is present for Imdb, not even an explicit nil
func (o *Rating) UnsetImdb() {
	o.Imdb.Unset()
}

// GetTmdb returns the Tmdb field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Rating) GetTmdb() float32 {
	if o == nil || o.Tmdb.Get() == nil {
		var ret float32
		return ret
	}
	return *o.Tmdb.Get()
}

// GetTmdbOk returns a tuple with the Tmdb field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Rating) GetTmdbOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tmdb.Get(), o.Tmdb.IsSet()
}

// HasTmdb returns a boolean if a field has been set.
func (o *Rating) HasTmdb() bool {
	if o != nil && o.Tmdb.IsSet() {
		return true
	}

	return false
}

// SetTmdb gets a reference to the given NullableFloat32 and assigns it to the Tmdb field.
func (o *Rating) SetTmdb(v float32) {
	o.Tmdb.Set(&v)
}
// SetTmdbNil sets the value for Tmdb to be an explicit nil
func (o *Rating) SetTmdbNil() {
	o.Tmdb.Set(nil)
}

// UnsetTmdb ensures that no value is present for Tmdb, not even an explicit nil
func (o *Rating) UnsetTmdb() {
	o.Tmdb.Unset()
}

// GetFilmCritics returns the FilmCritics field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Rating) GetFilmCritics() float32 {
	if o == nil || o.FilmCritics.Get() == nil {
		var ret float32
		return ret
	}
	return *o.FilmCritics.Get()
}

// GetFilmCriticsOk returns a tuple with the FilmCritics field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Rating) GetFilmCriticsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.FilmCritics.Get(), o.FilmCritics.IsSet()
}

// HasFilmCritics returns a boolean if a field has been set.
func (o *Rating) HasFilmCritics() bool {
	if o != nil && o.FilmCritics.IsSet() {
		return true
	}

	return false
}

// SetFilmCritics gets a reference to the given NullableFloat32 and assigns it to the FilmCritics field.
func (o *Rating) SetFilmCritics(v float32) {
	o.FilmCritics.Set(&v)
}
// SetFilmCriticsNil sets the value for FilmCritics to be an explicit nil
func (o *Rating) SetFilmCriticsNil() {
	o.FilmCritics.Set(nil)
}

// UnsetFilmCritics ensures that no value is present for FilmCritics, not even an explicit nil
func (o *Rating) UnsetFilmCritics() {
	o.FilmCritics.Unset()
}

// GetRussianFilmCritics returns the RussianFilmCritics field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Rating) GetRussianFilmCritics() float32 {
	if o == nil || o.RussianFilmCritics.Get() == nil {
		var ret float32
		return ret
	}
	return *o.RussianFilmCritics.Get()
}

// GetRussianFilmCriticsOk returns a tuple with the RussianFilmCritics field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Rating) GetRussianFilmCriticsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RussianFilmCritics.Get(), o.RussianFilmCritics.IsSet()
}

// HasRussianFilmCritics returns a boolean if a field has been set.
func (o *Rating) HasRussianFilmCritics() bool {
	if o != nil && o.RussianFilmCritics.IsSet() {
		return true
	}

	return false
}

// SetRussianFilmCritics gets a reference to the given NullableFloat32 and assigns it to the RussianFilmCritics field.
func (o *Rating) SetRussianFilmCritics(v float32) {
	o.RussianFilmCritics.Set(&v)
}
// SetRussianFilmCriticsNil sets the value for RussianFilmCritics to be an explicit nil
func (o *Rating) SetRussianFilmCriticsNil() {
	o.RussianFilmCritics.Set(nil)
}

// UnsetRussianFilmCritics ensures that no value is present for RussianFilmCritics, not even an explicit nil
func (o *Rating) UnsetRussianFilmCritics() {
	o.RussianFilmCritics.Unset()
}

// GetAwait returns the Await field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Rating) GetAwait() float32 {
	if o == nil || o.Await.Get() == nil {
		var ret float32
		return ret
	}
	return *o.Await.Get()
}

// GetAwaitOk returns a tuple with the Await field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Rating) GetAwaitOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Await.Get(), o.Await.IsSet()
}

// HasAwait returns a boolean if a field has been set.
func (o *Rating) HasAwait() bool {
	if o != nil && o.Await.IsSet() {
		return true
	}

	return false
}

// SetAwait gets a reference to the given NullableFloat32 and assigns it to the Await field.
func (o *Rating) SetAwait(v float32) {
	o.Await.Set(&v)
}
// SetAwaitNil sets the value for Await to be an explicit nil
func (o *Rating) SetAwaitNil() {
	o.Await.Set(nil)
}

// UnsetAwait ensures that no value is present for Await, not even an explicit nil
func (o *Rating) UnsetAwait() {
	o.Await.Unset()
}

func (o Rating) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Kp.IsSet() {
		toSerialize["kp"] = o.Kp.Get()
	}
	if o.Imdb.IsSet() {
		toSerialize["imdb"] = o.Imdb.Get()
	}
	if o.Tmdb.IsSet() {
		toSerialize["tmdb"] = o.Tmdb.Get()
	}
	if o.FilmCritics.IsSet() {
		toSerialize["filmCritics"] = o.FilmCritics.Get()
	}
	if o.RussianFilmCritics.IsSet() {
		toSerialize["russianFilmCritics"] = o.RussianFilmCritics.Get()
	}
	if o.Await.IsSet() {
		toSerialize["await"] = o.Await.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRating struct {
	value *Rating
	isSet bool
}

func (v NullableRating) Get() *Rating {
	return v.value
}

func (v *NullableRating) Set(val *Rating) {
	v.value = val
	v.isSet = true
}

func (v NullableRating) IsSet() bool {
	return v.isSet
}

func (v *NullableRating) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRating(val *Rating) *NullableRating {
	return &NullableRating{value: val, isSet: true}
}

func (v NullableRating) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRating) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


