/*
Документация для неофициального API кинопоиска (kinopoisk.dev).

 <!-- Yandex.Metrika counter --> <div><img src=\"https://mc.yandex.ru/watch/62307766\" style=\"position:absolute; left:-9999px;\" alt=\"\" /></div> <!-- /Yandex.Metrika counter --> <p>Через этот API вы можете получить практически все данные из кинопоиска. Больше информации вы можете получить изучив эту документацию.</p> <h2>Как работать с документацией?</h2> <p> Для начала работы с API вам необходимо получить токен, который вы можете получить в боте <a href=\"https://t.me/kinopoiskdev_bot\">@kinopoiskdev_bot</a>. <br /> После получения токена, вам необходимо авторизоваться в документации, для этого нажмите на кнопку <strong>Authorize</strong> и введите токен в поле <strong>Value</strong>.<br /> После авторизации вы можете отправлять запросы к API, для этого нажмите на кнопку <strong>Try it out</strong> и заполните необходимые поля для составления нужного фильтра.<br /> После заполнения полей нажмите на кнопку <strong>Execute</strong> и получите ответ от API и пример запроса. </p> <h3>Как работать с API?</h3> <p> API работает по принципу REST, все запросы отправляются на адрес <code>https://api.kinopoisk.dev/</code> с указанием версии API и необходимого ресурса.<br /> Все запросы к API кинопоиска должны содержать заголовок <code>X-API-KEY</code> с вашим токеном. В противном случае вы получите ошибку <code>401</code>.<br /> При составлении запроса учитывайте, что все параметры должны быть в <code>query</code> и <code>path</code>. В зависимости от метода который вы используете. Например, вы хотите получить список фильмов за 2023 год в жанре <code>криминал</code>, тогда ваш запрос будет выглядеть так: <code>https://api.kinopoisk.dev/v1.4/movie?year=2023&genres.name=криминал</code>. Или вы хотите получить список фильмов с рейтингом выше 8, тогда ваш запрос будет выглядеть так: <code>https://api.kinopoisk.dev/v1.4/movie?rating.imdb=8-10</code>. Документация kinopoisk api может помочь вам составить нужный запрос, для этого воспользуйтесь ее конструктором. </p> <h3>Особенности синтекса query параметров</h3> <p> Ключи в query параметрах имеют разные типы значений. В зависимости от типа значения, вы можете использовать разные операторы для фильтрации для поиска максимально релевантного фильма, сериала и т.д. в базе. <br /> Поля с типом <code>Number</code> могут принимать значения в форматах: <code>rating.kp=1-10</code>, <code>rating.kp=1</code>, <code>year=2022&year=2023</code>. <br /> Поля с типом <code>Date</code> могут принимать значения в форматах: <code>premiere.russia=dd.mm.yyyy-dd.mm.yyyy</code>, <code>premiere.russia=dd.mm.yyyy</code>. <br /> Поля с типом <code>String</code> могут принимать значения в форматах: <code>genres.name=драма</code>, <code>genres.name=криминал</code>, <code>genres.name=криминал&genres.name=драма</code> <br/> Поля с типом <code>Boolean</code> могут принимать значения в форматах: <code>isSeries=true</code>, <code>isSeries=false</code>. <br /> Параметры жанров и стран могут принимать операторы <code>+</code> и <code>!</code>, для указания включаемых и исключаемых значений. Например, вы хотите получить список фильмов в жанрах <code>драма</code> и <code>криминал</code>, тогда ваш запрос будет выглядеть так: <code>genres.name=+драма&genres.name=+криминал</code>. Или вы хотите получить список фильмов с жанром <code>драма</code> и без жанра <code>криминал</code>, тогда ваш запрос будет выглядеть так: <code>genres.name=+драма&genres.name=!криминал</code>. <br /> </p> <p> Расшифровка операторов: <ul>   <li><code>!</code> - исключить. Этот символ нужно отправлять в кодированной форме <code>%21</code></li>   <li><code>+</code> - включить. Этот символ нужно отправлять в кодированной форме <code>%2B</code></li>   <li><code>-</code> - диапазон значений, используется в качестве разделителя.</li> </ul> </p>  <p>По вопросам работы с API обращайтесь в чат <a href=\"https://t.me/+jeHPZVXiLPFhODJi\">Developer Community KinopoiskDev</a>.</p>  <p>Если вы обнаружили ошибку или у вас есть предложения по улучшению, создавайте issue на <a href=\"https://github.com/mdwitr0/kinopoiskdev\">GitHub</a>.</p>  <h3>Полезные ссылки:</h3> <ul>   <li><a href=\"https://kinopoiskdev.readme.io\">Более удобная документация</a></li>   <li><a href=\"https://github.com/OpenMovieDB/kinopoiskdev_client\">JavaScript и TypeScript клиент (Устарел, ждет обновления)</a></li>   <li><a href=\"https://github.com/odi1n/kinopoisk_dev\">Python клиент (Устарел, ждет обновления)</a></li>   <li><a href=\"/documentation-json\">OpenAPI Specification (JSON)</a></li>   <li><a href=\"/documentation-yaml\">OpenAPI Specification (YAML)</a></li> </ul> 

API version: 1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kinopoisk_api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// DefaultApiService DefaultApi service
type DefaultApiService service

type ApiImageControllerFindManyV14Request struct {
	ctx context.Context
	ApiService *DefaultApiService
	page *float32
	limit *float32
	selectFields *[]string
	notNullFields *[]string
	sortField *[]string
	sortType *[]string
	movieId *[]string
	type_ *[]string
	language *[]string
	height *[]string
	width *[]string
	updatedAt *[]string
	createdAt *[]string
}

// Номер страницы
func (r ApiImageControllerFindManyV14Request) Page(page float32) ApiImageControllerFindManyV14Request {
	r.page = &page
	return r
}

// Количество элементов на странице
func (r ApiImageControllerFindManyV14Request) Limit(limit float32) ApiImageControllerFindManyV14Request {
	r.limit = &limit
	return r
}

// Список полей требуемых в ответе из модели
func (r ApiImageControllerFindManyV14Request) SelectFields(selectFields []string) ApiImageControllerFindManyV14Request {
	r.selectFields = &selectFields
	return r
}

// Список полей которые не должны быть null или пусты
func (r ApiImageControllerFindManyV14Request) NotNullFields(notNullFields []string) ApiImageControllerFindManyV14Request {
	r.notNullFields = &notNullFields
	return r
}

// Сортировка по полям из модели
func (r ApiImageControllerFindManyV14Request) SortField(sortField []string) ApiImageControllerFindManyV14Request {
	r.sortField = &sortField
	return r
}

// Тип сортировки применительно к полям из sortField (пример: &#x60;\&quot;1\&quot;, \&quot;-1\&quot;&#x60;)
func (r ApiImageControllerFindManyV14Request) SortType(sortType []string) ApiImageControllerFindManyV14Request {
	r.sortType = &sortType
	return r
}

// Поиск картинок по id фильма (пример: &#x60;\&quot;666\&quot;, \&quot;!666\&quot;&#x60;)
func (r ApiImageControllerFindManyV14Request) MovieId(movieId []string) ApiImageControllerFindManyV14Request {
	r.movieId = &movieId
	return r
}

// Поиск картинок по типу (пример: &#x60;\&quot;cover\&quot;, \&quot;!cover\&quot;&#x60;)
func (r ApiImageControllerFindManyV14Request) Type_(type_ []string) ApiImageControllerFindManyV14Request {
	r.type_ = &type_
	return r
}

// Поиск картинок по языку (пример: &#x60;\&quot;en\&quot;, \&quot;!de\&quot;&#x60;)
func (r ApiImageControllerFindManyV14Request) Language(language []string) ApiImageControllerFindManyV14Request {
	r.language = &language
	return r
}

// Поиск картинок по высоте (пример: &#x60;\&quot;1920\&quot;, \&quot;360-1920\&quot;&#x60;)
func (r ApiImageControllerFindManyV14Request) Height(height []string) ApiImageControllerFindManyV14Request {
	r.height = &height
	return r
}

// Поиск картинок по ширине (пример: &#x60;\&quot;1080\&quot;, \&quot;320-1080\&quot;&#x60;)
func (r ApiImageControllerFindManyV14Request) Width(width []string) ApiImageControllerFindManyV14Request {
	r.width = &width
	return r
}

// Поиск по дате обновления в базе (пример: &#x60;01.01.2020, 01.01.2020-31.12.2020&#x60;)
func (r ApiImageControllerFindManyV14Request) UpdatedAt(updatedAt []string) ApiImageControllerFindManyV14Request {
	r.updatedAt = &updatedAt
	return r
}

// Поиск по дате добавления в базу (пример: &#x60;01.01.2020, 01.01.2020-31.12.2020&#x60;)
func (r ApiImageControllerFindManyV14Request) CreatedAt(createdAt []string) ApiImageControllerFindManyV14Request {
	r.createdAt = &createdAt
	return r
}

func (r ApiImageControllerFindManyV14Request) Execute() (*ImageDocsResponseDtoV14, *http.Response, error) {
	return r.ApiService.ImageControllerFindManyV14Execute(r)
}

/*
ImageControllerFindManyV14 Поиск картинок

Этот метод предназначен для поиска картинок которые привязаны к фильмам и сериалам

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiImageControllerFindManyV14Request
*/
func (a *DefaultApiService) ImageControllerFindManyV14(ctx context.Context) ApiImageControllerFindManyV14Request {
	return ApiImageControllerFindManyV14Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ImageDocsResponseDtoV14
func (a *DefaultApiService) ImageControllerFindManyV14Execute(r ApiImageControllerFindManyV14Request) (*ImageDocsResponseDtoV14, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ImageDocsResponseDtoV14
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ImageControllerFindManyV14")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1.4/image"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.selectFields != nil {
		t := *r.selectFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("selectFields", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("selectFields", parameterToString(t, "multi"))
		}
	}
	if r.notNullFields != nil {
		t := *r.notNullFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("notNullFields", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("notNullFields", parameterToString(t, "multi"))
		}
	}
	if r.sortField != nil {
		t := *r.sortField
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("sortField", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("sortField", parameterToString(t, "multi"))
		}
	}
	if r.sortType != nil {
		t := *r.sortType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("sortType", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("sortType", parameterToString(t, "multi"))
		}
	}
	if r.movieId != nil {
		t := *r.movieId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("movieId", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("movieId", parameterToString(t, "multi"))
		}
	}
	if r.type_ != nil {
		t := *r.type_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("type", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("type", parameterToString(t, "multi"))
		}
	}
	if r.language != nil {
		t := *r.language
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("language", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("language", parameterToString(t, "multi"))
		}
	}
	if r.height != nil {
		t := *r.height
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("height", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("height", parameterToString(t, "multi"))
		}
	}
	if r.width != nil {
		t := *r.width
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("width", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("width", parameterToString(t, "multi"))
		}
	}
	if r.updatedAt != nil {
		t := *r.updatedAt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("updatedAt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("updatedAt", parameterToString(t, "multi"))
		}
	}
	if r.createdAt != nil {
		t := *r.createdAt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("createdAt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("createdAt", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-API-KEY"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-KEY"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiKeywordControllerFindManyV14Request struct {
	ctx context.Context
	ApiService *DefaultApiService
	page *float32
	limit *float32
	selectFields *[]string
	notNullFields *[]string
	sortField *[]string
	sortType *[]string
	id *[]string
	moviesId *[]string
	title *[]string
	updatedAt *[]string
	createdAt *[]string
}

// Номер страницы
func (r ApiKeywordControllerFindManyV14Request) Page(page float32) ApiKeywordControllerFindManyV14Request {
	r.page = &page
	return r
}

// Количество элементов на странице
func (r ApiKeywordControllerFindManyV14Request) Limit(limit float32) ApiKeywordControllerFindManyV14Request {
	r.limit = &limit
	return r
}

// Список полей требуемых в ответе из модели
func (r ApiKeywordControllerFindManyV14Request) SelectFields(selectFields []string) ApiKeywordControllerFindManyV14Request {
	r.selectFields = &selectFields
	return r
}

// Список полей которые не должны быть null или пусты
func (r ApiKeywordControllerFindManyV14Request) NotNullFields(notNullFields []string) ApiKeywordControllerFindManyV14Request {
	r.notNullFields = &notNullFields
	return r
}

// Сортировка по полям из модели
func (r ApiKeywordControllerFindManyV14Request) SortField(sortField []string) ApiKeywordControllerFindManyV14Request {
	r.sortField = &sortField
	return r
}

// Тип сортировки применительно к полям из sortField (пример: &#x60;\&quot;1\&quot;, \&quot;-1\&quot;&#x60;)
func (r ApiKeywordControllerFindManyV14Request) SortType(sortType []string) ApiKeywordControllerFindManyV14Request {
	r.sortType = &sortType
	return r
}

// Поиск ключевого слова по id (пример: &#x60;\&quot;666\&quot;, \&quot;!666\&quot;&#x60;)
func (r ApiKeywordControllerFindManyV14Request) Id(id []string) ApiKeywordControllerFindManyV14Request {
	r.id = &id
	return r
}

// Поиск ключевых слов по id фильма (пример: &#x60;\&quot;666\&quot;, \&quot;!666\&quot;&#x60;)
func (r ApiKeywordControllerFindManyV14Request) MoviesId(moviesId []string) ApiKeywordControllerFindManyV14Request {
	r.moviesId = &moviesId
	return r
}

// Поиск ключевых слов по наименованию (пример: &#x60;\&quot;1980-е\&quot;, \&quot;!1980-е\&quot;&#x60;)
func (r ApiKeywordControllerFindManyV14Request) Title(title []string) ApiKeywordControllerFindManyV14Request {
	r.title = &title
	return r
}

// Поиск по дате обновления в базе (пример: &#x60;01.01.2020, 01.01.2020-31.12.2020&#x60;)
func (r ApiKeywordControllerFindManyV14Request) UpdatedAt(updatedAt []string) ApiKeywordControllerFindManyV14Request {
	r.updatedAt = &updatedAt
	return r
}

// Поиск по дате добавления в базу (пример: &#x60;01.01.2020, 01.01.2020-31.12.2020&#x60;)
func (r ApiKeywordControllerFindManyV14Request) CreatedAt(createdAt []string) ApiKeywordControllerFindManyV14Request {
	r.createdAt = &createdAt
	return r
}

func (r ApiKeywordControllerFindManyV14Request) Execute() (*KeywordDocsResponseDtoV14, *http.Response, error) {
	return r.ApiService.KeywordControllerFindManyV14Execute(r)
}

/*
KeywordControllerFindManyV14 Поиск ключевых слов

Этот метод предназначен для поиска ключевых слов

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiKeywordControllerFindManyV14Request
*/
func (a *DefaultApiService) KeywordControllerFindManyV14(ctx context.Context) ApiKeywordControllerFindManyV14Request {
	return ApiKeywordControllerFindManyV14Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KeywordDocsResponseDtoV14
func (a *DefaultApiService) KeywordControllerFindManyV14Execute(r ApiKeywordControllerFindManyV14Request) (*KeywordDocsResponseDtoV14, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KeywordDocsResponseDtoV14
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.KeywordControllerFindManyV14")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1.4/keyword"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.selectFields != nil {
		t := *r.selectFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("selectFields", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("selectFields", parameterToString(t, "multi"))
		}
	}
	if r.notNullFields != nil {
		t := *r.notNullFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("notNullFields", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("notNullFields", parameterToString(t, "multi"))
		}
	}
	if r.sortField != nil {
		t := *r.sortField
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("sortField", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("sortField", parameterToString(t, "multi"))
		}
	}
	if r.sortType != nil {
		t := *r.sortType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("sortType", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("sortType", parameterToString(t, "multi"))
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.moviesId != nil {
		t := *r.moviesId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("movies.id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("movies.id", parameterToString(t, "multi"))
		}
	}
	if r.title != nil {
		t := *r.title
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("title", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("title", parameterToString(t, "multi"))
		}
	}
	if r.updatedAt != nil {
		t := *r.updatedAt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("updatedAt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("updatedAt", parameterToString(t, "multi"))
		}
	}
	if r.createdAt != nil {
		t := *r.createdAt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("createdAt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("createdAt", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-API-KEY"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-KEY"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListControllerFindManyV14Request struct {
	ctx context.Context
	ApiService *DefaultApiService
	page *float32
	limit *float32
	selectFields *[]string
	notNullFields *[]string
	sortField *[]string
	sortType *[]string
	slug *[]string
	category *[]string
	moviesCount *[]string
	updatedAt *[]string
	createdAt *[]string
}

// Номер страницы
func (r ApiListControllerFindManyV14Request) Page(page float32) ApiListControllerFindManyV14Request {
	r.page = &page
	return r
}

// Количество элементов на странице
func (r ApiListControllerFindManyV14Request) Limit(limit float32) ApiListControllerFindManyV14Request {
	r.limit = &limit
	return r
}

// Список полей требуемых в ответе из модели
func (r ApiListControllerFindManyV14Request) SelectFields(selectFields []string) ApiListControllerFindManyV14Request {
	r.selectFields = &selectFields
	return r
}

// Список полей которые не должны быть null или пусты
func (r ApiListControllerFindManyV14Request) NotNullFields(notNullFields []string) ApiListControllerFindManyV14Request {
	r.notNullFields = &notNullFields
	return r
}

// Сортировка по полям из модели
func (r ApiListControllerFindManyV14Request) SortField(sortField []string) ApiListControllerFindManyV14Request {
	r.sortField = &sortField
	return r
}

// Тип сортировки применительно к полям из sortField (пример: &#x60;\&quot;1\&quot;, \&quot;-1\&quot;&#x60;)
func (r ApiListControllerFindManyV14Request) SortType(sortType []string) ApiListControllerFindManyV14Request {
	r.sortType = &sortType
	return r
}

// Поиск slug (пример: &#x60;\&quot;!top250\&quot;, \&quot;top250\&quot;&#x60;)
func (r ApiListControllerFindManyV14Request) Slug(slug []string) ApiListControllerFindManyV14Request {
	r.slug = &slug
	return r
}

// Поиск по категории (пример: &#x60;\&quot;Фильмы\&quot;, \&quot;!Фильмы\&quot;&#x60;)
func (r ApiListControllerFindManyV14Request) Category(category []string) ApiListControllerFindManyV14Request {
	r.category = &category
	return r
}

// Поиск по количеству фильмов (пример: &#x60;\&quot;1-200\&quot;, \&quot;10\&quot;&#x60;)
func (r ApiListControllerFindManyV14Request) MoviesCount(moviesCount []string) ApiListControllerFindManyV14Request {
	r.moviesCount = &moviesCount
	return r
}

// Поиск по дате обновления в базе (пример: &#x60;01.01.2020, 01.01.2020-31.12.2020&#x60;)
func (r ApiListControllerFindManyV14Request) UpdatedAt(updatedAt []string) ApiListControllerFindManyV14Request {
	r.updatedAt = &updatedAt
	return r
}

// Поиск по дате добавления в базу (пример: &#x60;01.01.2020, 01.01.2020-31.12.2020&#x60;)
func (r ApiListControllerFindManyV14Request) CreatedAt(createdAt []string) ApiListControllerFindManyV14Request {
	r.createdAt = &createdAt
	return r
}

func (r ApiListControllerFindManyV14Request) Execute() (*ListDocsResponseDtoV14, *http.Response, error) {
	return r.ApiService.ListControllerFindManyV14Execute(r)
}

/*
ListControllerFindManyV14 Поиск коллекций

Этот метод предназначен для поиска коллекций кино

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListControllerFindManyV14Request
*/
func (a *DefaultApiService) ListControllerFindManyV14(ctx context.Context) ApiListControllerFindManyV14Request {
	return ApiListControllerFindManyV14Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListDocsResponseDtoV14
func (a *DefaultApiService) ListControllerFindManyV14Execute(r ApiListControllerFindManyV14Request) (*ListDocsResponseDtoV14, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListDocsResponseDtoV14
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ListControllerFindManyV14")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1.4/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.selectFields != nil {
		t := *r.selectFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("selectFields", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("selectFields", parameterToString(t, "multi"))
		}
	}
	if r.notNullFields != nil {
		t := *r.notNullFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("notNullFields", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("notNullFields", parameterToString(t, "multi"))
		}
	}
	if r.sortField != nil {
		t := *r.sortField
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("sortField", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("sortField", parameterToString(t, "multi"))
		}
	}
	if r.sortType != nil {
		t := *r.sortType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("sortType", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("sortType", parameterToString(t, "multi"))
		}
	}
	if r.slug != nil {
		t := *r.slug
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug", parameterToString(t, "multi"))
		}
	}
	if r.category != nil {
		t := *r.category
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("category", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("category", parameterToString(t, "multi"))
		}
	}
	if r.moviesCount != nil {
		t := *r.moviesCount
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("moviesCount", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("moviesCount", parameterToString(t, "multi"))
		}
	}
	if r.updatedAt != nil {
		t := *r.updatedAt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("updatedAt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("updatedAt", parameterToString(t, "multi"))
		}
	}
	if r.createdAt != nil {
		t := *r.createdAt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("createdAt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("createdAt", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-API-KEY"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-KEY"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListControllerFindOneV14Request struct {
	ctx context.Context
	ApiService *DefaultApiService
	slug string
}

func (r ApiListControllerFindOneV14Request) Execute() (*List, *http.Response, error) {
	return r.ApiService.ListControllerFindOneV14Execute(r)
}

/*
ListControllerFindOneV14 Поиск коллекции по slug

Этот метод предназначен для поиска коллекции кино по slug

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param slug
 @return ApiListControllerFindOneV14Request
*/
func (a *DefaultApiService) ListControllerFindOneV14(ctx context.Context, slug string) ApiListControllerFindOneV14Request {
	return ApiListControllerFindOneV14Request{
		ApiService: a,
		ctx: ctx,
		slug: slug,
	}
}

// Execute executes the request
//  @return List
func (a *DefaultApiService) ListControllerFindOneV14Execute(r ApiListControllerFindOneV14Request) (*List, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *List
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ListControllerFindOneV14")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1.4/list/{slug}"
	localVarPath = strings.Replace(localVarPath, "{"+"slug"+"}", url.PathEscape(parameterToString(r.slug, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-API-KEY"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-KEY"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMovieControllerFindManyAwardsV14Request struct {
	ctx context.Context
	ApiService *DefaultApiService
	page *float32
	limit *float32
	selectFields *[]string
	notNullFields *[]string
	sortField *[]string
	sortType *[]string
	movieId *[]string
	nominationTitle *[]string
	nominationAwardTitle *[]string
	nominationAwardYear *[]string
	winning *[]string
	updatedAt *[]string
	createdAt *[]string
}

// Номер страницы
func (r ApiMovieControllerFindManyAwardsV14Request) Page(page float32) ApiMovieControllerFindManyAwardsV14Request {
	r.page = &page
	return r
}

// Количество элементов на странице
func (r ApiMovieControllerFindManyAwardsV14Request) Limit(limit float32) ApiMovieControllerFindManyAwardsV14Request {
	r.limit = &limit
	return r
}

// Список полей требуемых в ответе из модели
func (r ApiMovieControllerFindManyAwardsV14Request) SelectFields(selectFields []string) ApiMovieControllerFindManyAwardsV14Request {
	r.selectFields = &selectFields
	return r
}

// Список полей которые не должны быть null или пусты
func (r ApiMovieControllerFindManyAwardsV14Request) NotNullFields(notNullFields []string) ApiMovieControllerFindManyAwardsV14Request {
	r.notNullFields = &notNullFields
	return r
}

// Сортировка по полям из модели
func (r ApiMovieControllerFindManyAwardsV14Request) SortField(sortField []string) ApiMovieControllerFindManyAwardsV14Request {
	r.sortField = &sortField
	return r
}

// Тип сортировки применительно к полям из sortField (пример: &#x60;\&quot;1\&quot;, \&quot;-1\&quot;&#x60;)
func (r ApiMovieControllerFindManyAwardsV14Request) SortType(sortType []string) ApiMovieControllerFindManyAwardsV14Request {
	r.sortType = &sortType
	return r
}

// Поиск по ID фильма (пример: &#x60;\&quot;666\&quot;, \&quot;555\&quot;, \&quot;!666\&quot;&#x60;)
func (r ApiMovieControllerFindManyAwardsV14Request) MovieId(movieId []string) ApiMovieControllerFindManyAwardsV14Request {
	r.movieId = &movieId
	return r
}

// Поиск по номинациям (пример: &#x60;\&quot;Оскар\&quot;, \&quot;Золотой глобус\&quot;&#x60;)
func (r ApiMovieControllerFindManyAwardsV14Request) NominationTitle(nominationTitle []string) ApiMovieControllerFindManyAwardsV14Request {
	r.nominationTitle = &nominationTitle
	return r
}

// Поиск по наградам (пример: &#x60;\&quot;Лучший фильм\&quot;, \&quot;Лучший актер\&quot;&#x60;)
func (r ApiMovieControllerFindManyAwardsV14Request) NominationAwardTitle(nominationAwardTitle []string) ApiMovieControllerFindManyAwardsV14Request {
	r.nominationAwardTitle = &nominationAwardTitle
	return r
}

// Поиск по году награды (пример: &#x60;\&quot;2019\&quot;, \&quot;2020\&quot;&#x60;)
func (r ApiMovieControllerFindManyAwardsV14Request) NominationAwardYear(nominationAwardYear []string) ApiMovieControllerFindManyAwardsV14Request {
	r.nominationAwardYear = &nominationAwardYear
	return r
}

// Поиск по победам (пример: &#x60;\&quot;true\&quot;, \&quot;false\&quot;&#x60;)
func (r ApiMovieControllerFindManyAwardsV14Request) Winning(winning []string) ApiMovieControllerFindManyAwardsV14Request {
	r.winning = &winning
	return r
}

// Поиск по дате обновления в базе (пример: &#x60;01.01.2020, 01.01.2020-31.12.2020&#x60;)
func (r ApiMovieControllerFindManyAwardsV14Request) UpdatedAt(updatedAt []string) ApiMovieControllerFindManyAwardsV14Request {
	r.updatedAt = &updatedAt
	return r
}

// Поиск по дате добавления в базу (пример: &#x60;01.01.2020, 01.01.2020-31.12.2020&#x60;)
func (r ApiMovieControllerFindManyAwardsV14Request) CreatedAt(createdAt []string) ApiMovieControllerFindManyAwardsV14Request {
	r.createdAt = &createdAt
	return r
}

func (r ApiMovieControllerFindManyAwardsV14Request) Execute() (*MovieAwardDocsResponseDto, *http.Response, error) {
	return r.ApiService.MovieControllerFindManyAwardsV14Execute(r)
}

/*
MovieControllerFindManyAwardsV14 Награды тайтлов

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMovieControllerFindManyAwardsV14Request
*/
func (a *DefaultApiService) MovieControllerFindManyAwardsV14(ctx context.Context) ApiMovieControllerFindManyAwardsV14Request {
	return ApiMovieControllerFindManyAwardsV14Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MovieAwardDocsResponseDto
func (a *DefaultApiService) MovieControllerFindManyAwardsV14Execute(r ApiMovieControllerFindManyAwardsV14Request) (*MovieAwardDocsResponseDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MovieAwardDocsResponseDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.MovieControllerFindManyAwardsV14")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1.4/movie/awards"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.selectFields != nil {
		t := *r.selectFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("selectFields", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("selectFields", parameterToString(t, "multi"))
		}
	}
	if r.notNullFields != nil {
		t := *r.notNullFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("notNullFields", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("notNullFields", parameterToString(t, "multi"))
		}
	}
	if r.sortField != nil {
		t := *r.sortField
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("sortField", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("sortField", parameterToString(t, "multi"))
		}
	}
	if r.sortType != nil {
		t := *r.sortType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("sortType", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("sortType", parameterToString(t, "multi"))
		}
	}
	if r.movieId != nil {
		t := *r.movieId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("movieId", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("movieId", parameterToString(t, "multi"))
		}
	}
	if r.nominationTitle != nil {
		t := *r.nominationTitle
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("nomination.title", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("nomination.title", parameterToString(t, "multi"))
		}
	}
	if r.nominationAwardTitle != nil {
		t := *r.nominationAwardTitle
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("nomination.award.title", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("nomination.award.title", parameterToString(t, "multi"))
		}
	}
	if r.nominationAwardYear != nil {
		t := *r.nominationAwardYear
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("nomination.award.year", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("nomination.award.year", parameterToString(t, "multi"))
		}
	}
	if r.winning != nil {
		t := *r.winning
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("winning", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("winning", parameterToString(t, "multi"))
		}
	}
	if r.updatedAt != nil {
		t := *r.updatedAt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("updatedAt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("updatedAt", parameterToString(t, "multi"))
		}
	}
	if r.createdAt != nil {
		t := *r.createdAt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("createdAt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("createdAt", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-API-KEY"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-KEY"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMovieControllerFindManyByQueryV14Request struct {
	ctx context.Context
	ApiService *DefaultApiService
	page *float32
	limit *float32
	selectFields *[]string
	notNullFields *[]string
	sortField *[]string
	sortType *[]string
	id *[]string
	externalIdImdb *[]string
	externalIdTmdb *[]float32
	externalIdKpHD *[]string
	type_ *[]string
	typeNumber *[]string
	isSeries *[]string
	status *[]string
	year *[]string
	releaseYearsStart *[]string
	releaseYearsEnd *[]string
	ratingKp *[]string
	ratingImdb *[]string
	ratingTmdb *[]string
	ratingMpaa *[]string
	ageRating *[]string
	votesKp *[]string
	votesImdb *[]string
	votesTmdb *[]string
	votesFilmCritics *[]string
	votesRussianFilmCritics *[]string
	votesAwait *[]string
	budgetValue *[]string
	audienceCount *[]string
	movieLength *[]string
	seriesLength *[]string
	totalSeriesLength *[]string
	genresName *[]string
	countriesName *[]string
	ticketsOnSale *[]string
	networksItemsName *[]string
	personsId *[]string
	personsProfession *[]string
	personsEnProfession *[]string
	feesWorld *[]string
	feesUsa *[]string
	feesRussia *[]string
	premiereWorld *[]string
	premiereUsa *[]string
	premiereRussia *[]string
	premiereDigital *[]string
	premiereCinema *[]string
	premiereCountry *[]string
	similarMoviesId *[]string
	sequelsAndPrequelsId *[]string
	watchabilityItemsName *[]string
	lists *[]string
	updatedAt *[]string
	createdAt *[]string
}

// Номер страницы
func (r ApiMovieControllerFindManyByQueryV14Request) Page(page float32) ApiMovieControllerFindManyByQueryV14Request {
	r.page = &page
	return r
}

// Количество элементов на странице
func (r ApiMovieControllerFindManyByQueryV14Request) Limit(limit float32) ApiMovieControllerFindManyByQueryV14Request {
	r.limit = &limit
	return r
}

// Список полей требуемых в ответе из модели
func (r ApiMovieControllerFindManyByQueryV14Request) SelectFields(selectFields []string) ApiMovieControllerFindManyByQueryV14Request {
	r.selectFields = &selectFields
	return r
}

// Список полей которые не должны быть null или пусты
func (r ApiMovieControllerFindManyByQueryV14Request) NotNullFields(notNullFields []string) ApiMovieControllerFindManyByQueryV14Request {
	r.notNullFields = &notNullFields
	return r
}

// Сортировка по полям из модели
func (r ApiMovieControllerFindManyByQueryV14Request) SortField(sortField []string) ApiMovieControllerFindManyByQueryV14Request {
	r.sortField = &sortField
	return r
}

// Тип сортировки применительно к полям из sortField (пример: &#x60;\&quot;1\&quot;, \&quot;-1\&quot;&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) SortType(sortType []string) ApiMovieControllerFindManyByQueryV14Request {
	r.sortType = &sortType
	return r
}

// Поиск по ID KinoPoisk (пример: &#x60;\&quot;666\&quot;, \&quot;555\&quot;, \&quot;!666\&quot;&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) Id(id []string) ApiMovieControllerFindManyByQueryV14Request {
	r.id = &id
	return r
}

// Поиск по IMDB ID (пример: &#x60;\&quot;tt666\&quot;, \&quot;tt555\&quot;, \&quot;!tt666\&quot;&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) ExternalIdImdb(externalIdImdb []string) ApiMovieControllerFindManyByQueryV14Request {
	r.externalIdImdb = &externalIdImdb
	return r
}

// Поиск по TMDB ID (пример: &#x60;666, 555, !666&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) ExternalIdTmdb(externalIdTmdb []float32) ApiMovieControllerFindManyByQueryV14Request {
	r.externalIdTmdb = &externalIdTmdb
	return r
}

// Поиск по id KinoPoisk HD (пример: &#x60;\&quot;48e8d0acb0f62d8585101798eaeceec5\&quot;, \&quot;!48e8d0acb0f62d8585101798eaeceec5\&quot;&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) ExternalIdKpHD(externalIdKpHD []string) ApiMovieControllerFindManyByQueryV14Request {
	r.externalIdKpHD = &externalIdKpHD
	return r
}

// Поиск по типу фильма (пример: &#x60;\&quot;movie\&quot;, \&quot;tv-series\&quot;, \&quot;!anime\&quot;&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) Type_(type_ []string) ApiMovieControllerFindManyByQueryV14Request {
	r.type_ = &type_
	return r
}

// Поиск по номеру типа фильма (пример: &#x60;1, 2, !3&#x60;). Список типов: 1 (movie), 2 (tv-series), 3 (cartoon), 4 (anime), 5 (animated-series).
func (r ApiMovieControllerFindManyByQueryV14Request) TypeNumber(typeNumber []string) ApiMovieControllerFindManyByQueryV14Request {
	r.typeNumber = &typeNumber
	return r
}

// Поиск по индикатору сериала (пример: &#x60;true, false&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) IsSeries(isSeries []string) ApiMovieControllerFindManyByQueryV14Request {
	r.isSeries = &isSeries
	return r
}

// Поиск по статусу фильма (пример: &#x60;\&quot;announced\&quot;, \&quot;completed\&quot;, \&quot;!filming\&quot;&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) Status(status []string) ApiMovieControllerFindManyByQueryV14Request {
	r.status = &status
	return r
}

// Поиск по году (пример: &#x60;1874, 2050, !2020, 2020-2024&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) Year(year []string) ApiMovieControllerFindManyByQueryV14Request {
	r.year = &year
	return r
}

// Поиск по года начала релиза (пример: &#x60;1874, 2050, !2020, 2020-2024&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) ReleaseYearsStart(releaseYearsStart []string) ApiMovieControllerFindManyByQueryV14Request {
	r.releaseYearsStart = &releaseYearsStart
	return r
}

// Поиск по года окончания релиза (пример: &#x60;1874, 2050, !2020, 2020-2024&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) ReleaseYearsEnd(releaseYearsEnd []string) ApiMovieControllerFindManyByQueryV14Request {
	r.releaseYearsEnd = &releaseYearsEnd
	return r
}

// Поиск по рейтингу Кинопоиск (пример: &#x60;7, 10, 7.2-10&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) RatingKp(ratingKp []string) ApiMovieControllerFindManyByQueryV14Request {
	r.ratingKp = &ratingKp
	return r
}

// Поиск по рейтингу IMDB (пример: &#x60;7, 10, 7.2-10&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) RatingImdb(ratingImdb []string) ApiMovieControllerFindManyByQueryV14Request {
	r.ratingImdb = &ratingImdb
	return r
}

// Поиск по рейтингу TMDB (пример: &#x60;7, 10, 7.2-10&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) RatingTmdb(ratingTmdb []string) ApiMovieControllerFindManyByQueryV14Request {
	r.ratingTmdb = &ratingTmdb
	return r
}

// Поиск по рейтингу MPAA (пример: &#x60;\&quot;G\&quot;, \&quot;NC-17\&quot;, \&quot;!R\&quot;&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) RatingMpaa(ratingMpaa []string) ApiMovieControllerFindManyByQueryV14Request {
	r.ratingMpaa = &ratingMpaa
	return r
}

// Поиск по возрастному рейтингу (пример: &#x60;12, !18, 12-18&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) AgeRating(ageRating []string) ApiMovieControllerFindManyByQueryV14Request {
	r.ageRating = &ageRating
	return r
}

// Поиск по количеству голосов на KP (пример: &#x60;1000-6666666&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) VotesKp(votesKp []string) ApiMovieControllerFindManyByQueryV14Request {
	r.votesKp = &votesKp
	return r
}

// Поиск по количеству голосов на IMDB (пример: &#x60;1000-6666666&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) VotesImdb(votesImdb []string) ApiMovieControllerFindManyByQueryV14Request {
	r.votesImdb = &votesImdb
	return r
}

// Поиск по количеству голосов на TMDB (пример: &#x60;1000-6666666&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) VotesTmdb(votesTmdb []string) ApiMovieControllerFindManyByQueryV14Request {
	r.votesTmdb = &votesTmdb
	return r
}

// Поиск по количеству голосов кинокритиков (пример: &#x60;1000-6666666&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) VotesFilmCritics(votesFilmCritics []string) ApiMovieControllerFindManyByQueryV14Request {
	r.votesFilmCritics = &votesFilmCritics
	return r
}

// Поиск по количеству голосов кинокритиков из России (пример: &#x60;1000-6666666&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) VotesRussianFilmCritics(votesRussianFilmCritics []string) ApiMovieControllerFindManyByQueryV14Request {
	r.votesRussianFilmCritics = &votesRussianFilmCritics
	return r
}

// Поиск по количеству голосов ожидания на Кинопоиске (пример: &#x60;1000-6666666&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) VotesAwait(votesAwait []string) ApiMovieControllerFindManyByQueryV14Request {
	r.votesAwait = &votesAwait
	return r
}

// Поиск по бюджету фильма (пример: &#x60;1000-6666666&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) BudgetValue(budgetValue []string) ApiMovieControllerFindManyByQueryV14Request {
	r.budgetValue = &budgetValue
	return r
}

// Поиск по количеству аудитории (пример: &#x60;1000-6666666&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) AudienceCount(audienceCount []string) ApiMovieControllerFindManyByQueryV14Request {
	r.audienceCount = &audienceCount
	return r
}

// Поиск по продолжительности фильма (пример: &#x60;100-120&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) MovieLength(movieLength []string) ApiMovieControllerFindManyByQueryV14Request {
	r.movieLength = &movieLength
	return r
}

// Поиск по всей продолжительности одной серии (пример: &#x60;20-60&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) SeriesLength(seriesLength []string) ApiMovieControllerFindManyByQueryV14Request {
	r.seriesLength = &seriesLength
	return r
}

// Поиск по всей продолжительности сериала (пример: &#x60;100-120&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) TotalSeriesLength(totalSeriesLength []string) ApiMovieControllerFindManyByQueryV14Request {
	r.totalSeriesLength = &totalSeriesLength
	return r
}

// Поиск по жанрам (пример: &#x60;\&quot;драма\&quot;, \&quot;комедия\&quot;, \&quot;!мелодрама\&quot;, \&quot;+ужасы\&quot;&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) GenresName(genresName []string) ApiMovieControllerFindManyByQueryV14Request {
	r.genresName = &genresName
	return r
}

// Поиск по странам (пример: &#x60;\&quot;США\&quot;, \&quot;Россия\&quot;, \&quot;!Франция\&quot; , \&quot;+Великобритания\&quot;&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) CountriesName(countriesName []string) ApiMovieControllerFindManyByQueryV14Request {
	r.countriesName = &countriesName
	return r
}

// Поиск по наличию билетов в продаже (пример: &#x60;true, false&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) TicketsOnSale(ticketsOnSale []string) ApiMovieControllerFindManyByQueryV14Request {
	r.ticketsOnSale = &ticketsOnSale
	return r
}

// Поиск по сетям производства фильма (пример: &#x60;\&quot;HBO\&quot;, \&quot;Netflix\&quot;, \&quot;!Amazon\&quot;&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) NetworksItemsName(networksItemsName []string) ApiMovieControllerFindManyByQueryV14Request {
	r.networksItemsName = &networksItemsName
	return r
}

// Поиск по ID персон (пример: &#x60;666, 555, !666&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) PersonsId(personsId []string) ApiMovieControllerFindManyByQueryV14Request {
	r.personsId = &personsId
	return r
}

// Поиск по профессиям персон (пример: &#x60;\&quot;актер\&quot;, \&quot;режиссер\&quot;, \&quot;!сценарист\&quot;&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) PersonsProfession(personsProfession []string) ApiMovieControllerFindManyByQueryV14Request {
	r.personsProfession = &personsProfession
	return r
}

// Поиск по английским профессиям персон (пример: &#x60;\&quot;actor\&quot;, \&quot;director\&quot;, \&quot;!writer\&quot;&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) PersonsEnProfession(personsEnProfession []string) ApiMovieControllerFindManyByQueryV14Request {
	r.personsEnProfession = &personsEnProfession
	return r
}

// Поиск по сборам в мире (пример: &#x60;1000-6666666&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) FeesWorld(feesWorld []string) ApiMovieControllerFindManyByQueryV14Request {
	r.feesWorld = &feesWorld
	return r
}

// Поиск по сборам в США (пример: &#x60;1000-6666666&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) FeesUsa(feesUsa []string) ApiMovieControllerFindManyByQueryV14Request {
	r.feesUsa = &feesUsa
	return r
}

// Поиск по сборам в России (пример: &#x60;1000-6666666&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) FeesRussia(feesRussia []string) ApiMovieControllerFindManyByQueryV14Request {
	r.feesRussia = &feesRussia
	return r
}

// Поиск по дате премьеры в мире (пример: &#x60;01.01.2020, 01.01.2020-31.12.2020&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) PremiereWorld(premiereWorld []string) ApiMovieControllerFindManyByQueryV14Request {
	r.premiereWorld = &premiereWorld
	return r
}

// Поиск по дате премьеры в США (пример: &#x60;01.01.2020, 01.01.2020-31.12.2020&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) PremiereUsa(premiereUsa []string) ApiMovieControllerFindManyByQueryV14Request {
	r.premiereUsa = &premiereUsa
	return r
}

// Поиск по дате премьеры в России (пример: &#x60;01.01.2020, 01.01.2020-31.12.2020&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) PremiereRussia(premiereRussia []string) ApiMovieControllerFindManyByQueryV14Request {
	r.premiereRussia = &premiereRussia
	return r
}

// Поиск по дате премьеры в стриминговых сервисах (пример: &#x60;01.01.2020, 01.01.2020-31.12.2020&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) PremiereDigital(premiereDigital []string) ApiMovieControllerFindManyByQueryV14Request {
	r.premiereDigital = &premiereDigital
	return r
}

// Поиск по дате премьеры в кинотеатрах (пример: &#x60;01.01.2020, 01.01.2020-31.12.2020&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) PremiereCinema(premiereCinema []string) ApiMovieControllerFindManyByQueryV14Request {
	r.premiereCinema = &premiereCinema
	return r
}

// Поиск по стране премьеры (пример: &#x60;\&quot;США\&quot;, \&quot;Россия\&quot;, \&quot;!Франция\&quot; , \&quot;+Великобритания\&quot;&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) PremiereCountry(premiereCountry []string) ApiMovieControllerFindManyByQueryV14Request {
	r.premiereCountry = &premiereCountry
	return r
}

// Поиск по ID KinoPoisk из списка похожих фильмов (пример: &#x60;666, 555, !666&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) SimilarMoviesId(similarMoviesId []string) ApiMovieControllerFindManyByQueryV14Request {
	r.similarMoviesId = &similarMoviesId
	return r
}

// Поиск по ID KinoPoisk из списка сиквелов и преквелов (пример: &#x60;666, 555, !666&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) SequelsAndPrequelsId(sequelsAndPrequelsId []string) ApiMovieControllerFindManyByQueryV14Request {
	r.sequelsAndPrequelsId = &sequelsAndPrequelsId
	return r
}

// Поиск по доуступным платформам для просмотра (пример: &#x60;\&quot;ivi\&quot;, \&quot;okko\&quot;, \&quot;!megogo\&quot;&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) WatchabilityItemsName(watchabilityItemsName []string) ApiMovieControllerFindManyByQueryV14Request {
	r.watchabilityItemsName = &watchabilityItemsName
	return r
}

// Поиск по коллекциям из KinoPoisk (пример: &#x60;\&quot;top250\&quot;, \&quot;top-100-indian-movies\&quot;, \&quot;!top-100-movies\&quot;&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) Lists(lists []string) ApiMovieControllerFindManyByQueryV14Request {
	r.lists = &lists
	return r
}

// Поиск по дате обновления в базе (пример: &#x60;01.01.2020, 01.01.2020-31.12.2020&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) UpdatedAt(updatedAt []string) ApiMovieControllerFindManyByQueryV14Request {
	r.updatedAt = &updatedAt
	return r
}

// Поиск по дате добавления в базу (пример: &#x60;01.01.2020, 01.01.2020-31.12.2020&#x60;)
func (r ApiMovieControllerFindManyByQueryV14Request) CreatedAt(createdAt []string) ApiMovieControllerFindManyByQueryV14Request {
	r.createdAt = &createdAt
	return r
}

func (r ApiMovieControllerFindManyByQueryV14Request) Execute() (*MovieDocsResponseDtoV14, *http.Response, error) {
	return r.ApiService.MovieControllerFindManyByQueryV14Execute(r)
}

/*
MovieControllerFindManyByQueryV14 Универсальный поиск с фильтрами

Этот метод вернет список фильмов удовлетворяющих вашему запросу. <br> В ответе придут поля указанные в параметре `selectFields`. Если его не указать, то вернутся только дефолтные поля.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMovieControllerFindManyByQueryV14Request
*/
func (a *DefaultApiService) MovieControllerFindManyByQueryV14(ctx context.Context) ApiMovieControllerFindManyByQueryV14Request {
	return ApiMovieControllerFindManyByQueryV14Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MovieDocsResponseDtoV14
func (a *DefaultApiService) MovieControllerFindManyByQueryV14Execute(r ApiMovieControllerFindManyByQueryV14Request) (*MovieDocsResponseDtoV14, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MovieDocsResponseDtoV14
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.MovieControllerFindManyByQueryV14")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1.4/movie"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.selectFields != nil {
		t := *r.selectFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("selectFields", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("selectFields", parameterToString(t, "multi"))
		}
	}
	if r.notNullFields != nil {
		t := *r.notNullFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("notNullFields", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("notNullFields", parameterToString(t, "multi"))
		}
	}
	if r.sortField != nil {
		t := *r.sortField
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("sortField", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("sortField", parameterToString(t, "multi"))
		}
	}
	if r.sortType != nil {
		t := *r.sortType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("sortType", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("sortType", parameterToString(t, "multi"))
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.externalIdImdb != nil {
		t := *r.externalIdImdb
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("externalId.imdb", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("externalId.imdb", parameterToString(t, "multi"))
		}
	}
	if r.externalIdTmdb != nil {
		t := *r.externalIdTmdb
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("externalId.tmdb", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("externalId.tmdb", parameterToString(t, "multi"))
		}
	}
	if r.externalIdKpHD != nil {
		t := *r.externalIdKpHD
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("externalId.kpHD", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("externalId.kpHD", parameterToString(t, "multi"))
		}
	}
	if r.type_ != nil {
		t := *r.type_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("type", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("type", parameterToString(t, "multi"))
		}
	}
	if r.typeNumber != nil {
		t := *r.typeNumber
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("typeNumber", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("typeNumber", parameterToString(t, "multi"))
		}
	}
	if r.isSeries != nil {
		t := *r.isSeries
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("isSeries", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("isSeries", parameterToString(t, "multi"))
		}
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("status", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("status", parameterToString(t, "multi"))
		}
	}
	if r.year != nil {
		t := *r.year
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("year", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("year", parameterToString(t, "multi"))
		}
	}
	if r.releaseYearsStart != nil {
		t := *r.releaseYearsStart
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("releaseYears.start", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("releaseYears.start", parameterToString(t, "multi"))
		}
	}
	if r.releaseYearsEnd != nil {
		t := *r.releaseYearsEnd
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("releaseYears.end", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("releaseYears.end", parameterToString(t, "multi"))
		}
	}
	if r.ratingKp != nil {
		t := *r.ratingKp
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("rating.kp", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("rating.kp", parameterToString(t, "multi"))
		}
	}
	if r.ratingImdb != nil {
		t := *r.ratingImdb
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("rating.imdb", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("rating.imdb", parameterToString(t, "multi"))
		}
	}
	if r.ratingTmdb != nil {
		t := *r.ratingTmdb
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("rating.tmdb", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("rating.tmdb", parameterToString(t, "multi"))
		}
	}
	if r.ratingMpaa != nil {
		t := *r.ratingMpaa
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("ratingMpaa", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("ratingMpaa", parameterToString(t, "multi"))
		}
	}
	if r.ageRating != nil {
		t := *r.ageRating
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("ageRating", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("ageRating", parameterToString(t, "multi"))
		}
	}
	if r.votesKp != nil {
		t := *r.votesKp
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("votes.kp", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("votes.kp", parameterToString(t, "multi"))
		}
	}
	if r.votesImdb != nil {
		t := *r.votesImdb
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("votes.imdb", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("votes.imdb", parameterToString(t, "multi"))
		}
	}
	if r.votesTmdb != nil {
		t := *r.votesTmdb
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("votes.tmdb", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("votes.tmdb", parameterToString(t, "multi"))
		}
	}
	if r.votesFilmCritics != nil {
		t := *r.votesFilmCritics
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("votes.filmCritics", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("votes.filmCritics", parameterToString(t, "multi"))
		}
	}
	if r.votesRussianFilmCritics != nil {
		t := *r.votesRussianFilmCritics
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("votes.russianFilmCritics", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("votes.russianFilmCritics", parameterToString(t, "multi"))
		}
	}
	if r.votesAwait != nil {
		t := *r.votesAwait
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("votes.await", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("votes.await", parameterToString(t, "multi"))
		}
	}
	if r.budgetValue != nil {
		t := *r.budgetValue
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("budget.value", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("budget.value", parameterToString(t, "multi"))
		}
	}
	if r.audienceCount != nil {
		t := *r.audienceCount
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("audience.count", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("audience.count", parameterToString(t, "multi"))
		}
	}
	if r.movieLength != nil {
		t := *r.movieLength
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("movieLength", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("movieLength", parameterToString(t, "multi"))
		}
	}
	if r.seriesLength != nil {
		t := *r.seriesLength
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("seriesLength", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("seriesLength", parameterToString(t, "multi"))
		}
	}
	if r.totalSeriesLength != nil {
		t := *r.totalSeriesLength
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("totalSeriesLength", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("totalSeriesLength", parameterToString(t, "multi"))
		}
	}
	if r.genresName != nil {
		t := *r.genresName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("genres.name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("genres.name", parameterToString(t, "multi"))
		}
	}
	if r.countriesName != nil {
		t := *r.countriesName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("countries.name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("countries.name", parameterToString(t, "multi"))
		}
	}
	if r.ticketsOnSale != nil {
		t := *r.ticketsOnSale
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("ticketsOnSale", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("ticketsOnSale", parameterToString(t, "multi"))
		}
	}
	if r.networksItemsName != nil {
		t := *r.networksItemsName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("networks.items.name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("networks.items.name", parameterToString(t, "multi"))
		}
	}
	if r.personsId != nil {
		t := *r.personsId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("persons.id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("persons.id", parameterToString(t, "multi"))
		}
	}
	if r.personsProfession != nil {
		t := *r.personsProfession
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("persons.profession", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("persons.profession", parameterToString(t, "multi"))
		}
	}
	if r.personsEnProfession != nil {
		t := *r.personsEnProfession
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("persons.enProfession", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("persons.enProfession", parameterToString(t, "multi"))
		}
	}
	if r.feesWorld != nil {
		t := *r.feesWorld
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("fees.world", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("fees.world", parameterToString(t, "multi"))
		}
	}
	if r.feesUsa != nil {
		t := *r.feesUsa
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("fees.usa", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("fees.usa", parameterToString(t, "multi"))
		}
	}
	if r.feesRussia != nil {
		t := *r.feesRussia
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("fees.russia", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("fees.russia", parameterToString(t, "multi"))
		}
	}
	if r.premiereWorld != nil {
		t := *r.premiereWorld
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("premiere.world", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("premiere.world", parameterToString(t, "multi"))
		}
	}
	if r.premiereUsa != nil {
		t := *r.premiereUsa
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("premiere.usa", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("premiere.usa", parameterToString(t, "multi"))
		}
	}
	if r.premiereRussia != nil {
		t := *r.premiereRussia
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("premiere.russia", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("premiere.russia", parameterToString(t, "multi"))
		}
	}
	if r.premiereDigital != nil {
		t := *r.premiereDigital
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("premiere.digital", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("premiere.digital", parameterToString(t, "multi"))
		}
	}
	if r.premiereCinema != nil {
		t := *r.premiereCinema
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("premiere.cinema", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("premiere.cinema", parameterToString(t, "multi"))
		}
	}
	if r.premiereCountry != nil {
		t := *r.premiereCountry
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("premiere.country", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("premiere.country", parameterToString(t, "multi"))
		}
	}
	if r.similarMoviesId != nil {
		t := *r.similarMoviesId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("similarMovies.id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("similarMovies.id", parameterToString(t, "multi"))
		}
	}
	if r.sequelsAndPrequelsId != nil {
		t := *r.sequelsAndPrequelsId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("sequelsAndPrequels.id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("sequelsAndPrequels.id", parameterToString(t, "multi"))
		}
	}
	if r.watchabilityItemsName != nil {
		t := *r.watchabilityItemsName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("watchability.items.name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("watchability.items.name", parameterToString(t, "multi"))
		}
	}
	if r.lists != nil {
		t := *r.lists
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("lists", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("lists", parameterToString(t, "multi"))
		}
	}
	if r.updatedAt != nil {
		t := *r.updatedAt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("updatedAt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("updatedAt", parameterToString(t, "multi"))
		}
	}
	if r.createdAt != nil {
		t := *r.createdAt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("createdAt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("createdAt", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-API-KEY"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-KEY"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMovieControllerFindOneV14Request struct {
	ctx context.Context
	ApiService *DefaultApiService
	id float32
}

func (r ApiMovieControllerFindOneV14Request) Execute() (*MovieDtoV14, *http.Response, error) {
	return r.ApiService.MovieControllerFindOneV14Execute(r)
}

/*
MovieControllerFindOneV14 Поиск по id

Возвращает всю доступную информацию о сущности.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ID из кинопоиска
 @return ApiMovieControllerFindOneV14Request
*/
func (a *DefaultApiService) MovieControllerFindOneV14(ctx context.Context, id float32) ApiMovieControllerFindOneV14Request {
	return ApiMovieControllerFindOneV14Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return MovieDtoV14
func (a *DefaultApiService) MovieControllerFindOneV14Execute(r ApiMovieControllerFindOneV14Request) (*MovieDtoV14, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MovieDtoV14
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.MovieControllerFindOneV14")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1.4/movie/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-API-KEY"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-KEY"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedErrorResponseDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ForbiddenErrorResponseDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ForbiddenErrorResponseDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v ErrorResponseDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMovieControllerGetPossibleValuesByFieldNameRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	field *string
}

func (r ApiMovieControllerGetPossibleValuesByFieldNameRequest) Field(field string) ApiMovieControllerGetPossibleValuesByFieldNameRequest {
	r.field = &field
	return r
}

func (r ApiMovieControllerGetPossibleValuesByFieldNameRequest) Execute() ([]PossibleValueDto, *http.Response, error) {
	return r.ApiService.MovieControllerGetPossibleValuesByFieldNameExecute(r)
}

/*
MovieControllerGetPossibleValuesByFieldName Получить список стран, жанров, и т.д.

Этот метод принимает только определенные поля, и возвращает по ним все доступные значения.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMovieControllerGetPossibleValuesByFieldNameRequest
*/
func (a *DefaultApiService) MovieControllerGetPossibleValuesByFieldName(ctx context.Context) ApiMovieControllerGetPossibleValuesByFieldNameRequest {
	return ApiMovieControllerGetPossibleValuesByFieldNameRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []PossibleValueDto
func (a *DefaultApiService) MovieControllerGetPossibleValuesByFieldNameExecute(r ApiMovieControllerGetPossibleValuesByFieldNameRequest) ([]PossibleValueDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PossibleValueDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.MovieControllerGetPossibleValuesByFieldName")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/movie/possible-values-by-field"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.field == nil {
		return localVarReturnValue, nil, reportError("field is required and must be specified")
	}

	localVarQueryParams.Add("field", parameterToString(*r.field, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-API-KEY"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-KEY"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v []PossibleValueDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMovieControllerGetRandomMovieV14Request struct {
	ctx context.Context
	ApiService *DefaultApiService
	notNullFields *[]string
	id *[]string
	externalIdImdb *[]string
	externalIdTmdb *[]float32
	externalIdKpHD *[]string
	type_ *[]string
	typeNumber *[]string
	isSeries *[]string
	status *[]string
	year *[]string
	releaseYearsStart *[]string
	releaseYearsEnd *[]string
	ratingKp *[]string
	ratingImdb *[]string
	ratingTmdb *[]string
	ratingMpaa *[]string
	ageRating *[]string
	votesKp *[]string
	votesImdb *[]string
	votesTmdb *[]string
	votesFilmCritics *[]string
	votesRussianFilmCritics *[]string
	votesAwait *[]string
	budgetValue *[]string
	audienceCount *[]string
	movieLength *[]string
	seriesLength *[]string
	totalSeriesLength *[]string
	genresName *[]string
	countriesName *[]string
	ticketsOnSale *[]string
	networksItemsName *[]string
	personsId *[]string
	personsProfession *[]string
	personsEnProfession *[]string
	feesWorld *[]string
	feesUsa *[]string
	feesRussia *[]string
	premiereWorld *[]string
	premiereUsa *[]string
	premiereRussia *[]string
	premiereDigital *[]string
	premiereCinema *[]string
	premiereCountry *[]string
	similarMoviesId *[]string
	sequelsAndPrequelsId *[]string
	watchabilityItemsName *[]string
	lists *[]string
}

// Список полей которые не должны быть null или пусты
func (r ApiMovieControllerGetRandomMovieV14Request) NotNullFields(notNullFields []string) ApiMovieControllerGetRandomMovieV14Request {
	r.notNullFields = &notNullFields
	return r
}

// Поиск по ID KinoPoisk (пример: &#x60;\&quot;666\&quot;, \&quot;555\&quot;, \&quot;!666\&quot;&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) Id(id []string) ApiMovieControllerGetRandomMovieV14Request {
	r.id = &id
	return r
}

// Поиск по IMDB ID (пример: &#x60;\&quot;tt666\&quot;, \&quot;tt555\&quot;, \&quot;!tt666\&quot;&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) ExternalIdImdb(externalIdImdb []string) ApiMovieControllerGetRandomMovieV14Request {
	r.externalIdImdb = &externalIdImdb
	return r
}

// Поиск по TMDB ID (пример: &#x60;666, 555, !666&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) ExternalIdTmdb(externalIdTmdb []float32) ApiMovieControllerGetRandomMovieV14Request {
	r.externalIdTmdb = &externalIdTmdb
	return r
}

// Поиск по id KinoPoisk HD (пример: &#x60;\&quot;48e8d0acb0f62d8585101798eaeceec5\&quot;, \&quot;!48e8d0acb0f62d8585101798eaeceec5\&quot;&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) ExternalIdKpHD(externalIdKpHD []string) ApiMovieControllerGetRandomMovieV14Request {
	r.externalIdKpHD = &externalIdKpHD
	return r
}

// Поиск по типу фильма (пример: &#x60;\&quot;movie\&quot;, \&quot;tv-series\&quot;, \&quot;!anime\&quot;&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) Type_(type_ []string) ApiMovieControllerGetRandomMovieV14Request {
	r.type_ = &type_
	return r
}

// Поиск по номеру типа фильма (пример: &#x60;1, 2, !3&#x60;). Список типов: 1 (movie), 2 (tv-series), 3 (cartoon), 4 (anime), 5 (animated-series).
func (r ApiMovieControllerGetRandomMovieV14Request) TypeNumber(typeNumber []string) ApiMovieControllerGetRandomMovieV14Request {
	r.typeNumber = &typeNumber
	return r
}

// Поиск по индикатору сериала (пример: &#x60;true, false&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) IsSeries(isSeries []string) ApiMovieControllerGetRandomMovieV14Request {
	r.isSeries = &isSeries
	return r
}

// Поиск по статусу фильма (пример: &#x60;\&quot;announced\&quot;, \&quot;completed\&quot;, \&quot;!filming\&quot;&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) Status(status []string) ApiMovieControllerGetRandomMovieV14Request {
	r.status = &status
	return r
}

// Поиск по году (пример: &#x60;1874, 2050, !2020, 2020-2024&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) Year(year []string) ApiMovieControllerGetRandomMovieV14Request {
	r.year = &year
	return r
}

// Поиск по года начала релиза (пример: &#x60;1874, 2050, !2020, 2020-2024&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) ReleaseYearsStart(releaseYearsStart []string) ApiMovieControllerGetRandomMovieV14Request {
	r.releaseYearsStart = &releaseYearsStart
	return r
}

// Поиск по года окончания релиза (пример: &#x60;1874, 2050, !2020, 2020-2024&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) ReleaseYearsEnd(releaseYearsEnd []string) ApiMovieControllerGetRandomMovieV14Request {
	r.releaseYearsEnd = &releaseYearsEnd
	return r
}

// Поиск по рейтингу Кинопоиск (пример: &#x60;7, 10, 7.2-10&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) RatingKp(ratingKp []string) ApiMovieControllerGetRandomMovieV14Request {
	r.ratingKp = &ratingKp
	return r
}

// Поиск по рейтингу IMDB (пример: &#x60;7, 10, 7.2-10&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) RatingImdb(ratingImdb []string) ApiMovieControllerGetRandomMovieV14Request {
	r.ratingImdb = &ratingImdb
	return r
}

// Поиск по рейтингу TMDB (пример: &#x60;7, 10, 7.2-10&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) RatingTmdb(ratingTmdb []string) ApiMovieControllerGetRandomMovieV14Request {
	r.ratingTmdb = &ratingTmdb
	return r
}

// Поиск по рейтингу MPAA (пример: &#x60;\&quot;G\&quot;, \&quot;NC-17\&quot;, \&quot;!R\&quot;&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) RatingMpaa(ratingMpaa []string) ApiMovieControllerGetRandomMovieV14Request {
	r.ratingMpaa = &ratingMpaa
	return r
}

// Поиск по возрастному рейтингу (пример: &#x60;12, !18, 12-18&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) AgeRating(ageRating []string) ApiMovieControllerGetRandomMovieV14Request {
	r.ageRating = &ageRating
	return r
}

// Поиск по количеству голосов на KP (пример: &#x60;1000-6666666&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) VotesKp(votesKp []string) ApiMovieControllerGetRandomMovieV14Request {
	r.votesKp = &votesKp
	return r
}

// Поиск по количеству голосов на IMDB (пример: &#x60;1000-6666666&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) VotesImdb(votesImdb []string) ApiMovieControllerGetRandomMovieV14Request {
	r.votesImdb = &votesImdb
	return r
}

// Поиск по количеству голосов на TMDB (пример: &#x60;1000-6666666&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) VotesTmdb(votesTmdb []string) ApiMovieControllerGetRandomMovieV14Request {
	r.votesTmdb = &votesTmdb
	return r
}

// Поиск по количеству голосов кинокритиков (пример: &#x60;1000-6666666&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) VotesFilmCritics(votesFilmCritics []string) ApiMovieControllerGetRandomMovieV14Request {
	r.votesFilmCritics = &votesFilmCritics
	return r
}

// Поиск по количеству голосов кинокритиков из России (пример: &#x60;1000-6666666&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) VotesRussianFilmCritics(votesRussianFilmCritics []string) ApiMovieControllerGetRandomMovieV14Request {
	r.votesRussianFilmCritics = &votesRussianFilmCritics
	return r
}

// Поиск по количеству голосов ожидания на Кинопоиске (пример: &#x60;1000-6666666&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) VotesAwait(votesAwait []string) ApiMovieControllerGetRandomMovieV14Request {
	r.votesAwait = &votesAwait
	return r
}

// Поиск по бюджету фильма (пример: &#x60;1000-6666666&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) BudgetValue(budgetValue []string) ApiMovieControllerGetRandomMovieV14Request {
	r.budgetValue = &budgetValue
	return r
}

// Поиск по количеству аудитории (пример: &#x60;1000-6666666&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) AudienceCount(audienceCount []string) ApiMovieControllerGetRandomMovieV14Request {
	r.audienceCount = &audienceCount
	return r
}

// Поиск по продолжительности фильма (пример: &#x60;100-120&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) MovieLength(movieLength []string) ApiMovieControllerGetRandomMovieV14Request {
	r.movieLength = &movieLength
	return r
}

// Поиск по всей продолжительности одной серии (пример: &#x60;20-60&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) SeriesLength(seriesLength []string) ApiMovieControllerGetRandomMovieV14Request {
	r.seriesLength = &seriesLength
	return r
}

// Поиск по всей продолжительности сериала (пример: &#x60;100-120&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) TotalSeriesLength(totalSeriesLength []string) ApiMovieControllerGetRandomMovieV14Request {
	r.totalSeriesLength = &totalSeriesLength
	return r
}

// Поиск по жанрам (пример: &#x60;\&quot;драма\&quot;, \&quot;комедия\&quot;, \&quot;!мелодрама\&quot;, \&quot;+ужасы\&quot;&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) GenresName(genresName []string) ApiMovieControllerGetRandomMovieV14Request {
	r.genresName = &genresName
	return r
}

// Поиск по странам (пример: &#x60;\&quot;США\&quot;, \&quot;Россия\&quot;, \&quot;!Франция\&quot; , \&quot;+Великобритания\&quot;&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) CountriesName(countriesName []string) ApiMovieControllerGetRandomMovieV14Request {
	r.countriesName = &countriesName
	return r
}

// Поиск по наличию билетов в продаже (пример: &#x60;true, false&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) TicketsOnSale(ticketsOnSale []string) ApiMovieControllerGetRandomMovieV14Request {
	r.ticketsOnSale = &ticketsOnSale
	return r
}

// Поиск по сетям производства фильма (пример: &#x60;\&quot;HBO\&quot;, \&quot;Netflix\&quot;, \&quot;!Amazon\&quot;&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) NetworksItemsName(networksItemsName []string) ApiMovieControllerGetRandomMovieV14Request {
	r.networksItemsName = &networksItemsName
	return r
}

// Поиск по ID персон (пример: &#x60;666, 555, !666&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) PersonsId(personsId []string) ApiMovieControllerGetRandomMovieV14Request {
	r.personsId = &personsId
	return r
}

// Поиск по профессиям персон (пример: &#x60;\&quot;актер\&quot;, \&quot;режиссер\&quot;, \&quot;!сценарист\&quot;&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) PersonsProfession(personsProfession []string) ApiMovieControllerGetRandomMovieV14Request {
	r.personsProfession = &personsProfession
	return r
}

// Поиск по английским профессиям персон (пример: &#x60;\&quot;actor\&quot;, \&quot;director\&quot;, \&quot;!writer\&quot;&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) PersonsEnProfession(personsEnProfession []string) ApiMovieControllerGetRandomMovieV14Request {
	r.personsEnProfession = &personsEnProfession
	return r
}

// Поиск по сборам в мире (пример: &#x60;1000-6666666&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) FeesWorld(feesWorld []string) ApiMovieControllerGetRandomMovieV14Request {
	r.feesWorld = &feesWorld
	return r
}

// Поиск по сборам в США (пример: &#x60;1000-6666666&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) FeesUsa(feesUsa []string) ApiMovieControllerGetRandomMovieV14Request {
	r.feesUsa = &feesUsa
	return r
}

// Поиск по сборам в России (пример: &#x60;1000-6666666&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) FeesRussia(feesRussia []string) ApiMovieControllerGetRandomMovieV14Request {
	r.feesRussia = &feesRussia
	return r
}

// Поиск по дате премьеры в мире (пример: &#x60;01.01.2020, 01.01.2020-31.12.2020&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) PremiereWorld(premiereWorld []string) ApiMovieControllerGetRandomMovieV14Request {
	r.premiereWorld = &premiereWorld
	return r
}

// Поиск по дате премьеры в США (пример: &#x60;01.01.2020, 01.01.2020-31.12.2020&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) PremiereUsa(premiereUsa []string) ApiMovieControllerGetRandomMovieV14Request {
	r.premiereUsa = &premiereUsa
	return r
}

// Поиск по дате премьеры в России (пример: &#x60;01.01.2020, 01.01.2020-31.12.2020&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) PremiereRussia(premiereRussia []string) ApiMovieControllerGetRandomMovieV14Request {
	r.premiereRussia = &premiereRussia
	return r
}

// Поиск по дате премьеры в стриминговых сервисах (пример: &#x60;01.01.2020, 01.01.2020-31.12.2020&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) PremiereDigital(premiereDigital []string) ApiMovieControllerGetRandomMovieV14Request {
	r.premiereDigital = &premiereDigital
	return r
}

// Поиск по дате премьеры в кинотеатрах (пример: &#x60;01.01.2020, 01.01.2020-31.12.2020&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) PremiereCinema(premiereCinema []string) ApiMovieControllerGetRandomMovieV14Request {
	r.premiereCinema = &premiereCinema
	return r
}

// Поиск по стране премьеры (пример: &#x60;\&quot;США\&quot;, \&quot;Россия\&quot;, \&quot;!Франция\&quot; , \&quot;+Великобритания\&quot;&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) PremiereCountry(premiereCountry []string) ApiMovieControllerGetRandomMovieV14Request {
	r.premiereCountry = &premiereCountry
	return r
}

// Поиск по ID KinoPoisk из списка похожих фильмов (пример: &#x60;666, 555, !666&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) SimilarMoviesId(similarMoviesId []string) ApiMovieControllerGetRandomMovieV14Request {
	r.similarMoviesId = &similarMoviesId
	return r
}

// Поиск по ID KinoPoisk из списка сиквелов и преквелов (пример: &#x60;666, 555, !666&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) SequelsAndPrequelsId(sequelsAndPrequelsId []string) ApiMovieControllerGetRandomMovieV14Request {
	r.sequelsAndPrequelsId = &sequelsAndPrequelsId
	return r
}

// Поиск по доуступным платформам для просмотра (пример: &#x60;\&quot;ivi\&quot;, \&quot;okko\&quot;, \&quot;!megogo\&quot;&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) WatchabilityItemsName(watchabilityItemsName []string) ApiMovieControllerGetRandomMovieV14Request {
	r.watchabilityItemsName = &watchabilityItemsName
	return r
}

// Поиск по коллекциям из KinoPoisk (пример: &#x60;\&quot;top250\&quot;, \&quot;top-100-indian-movies\&quot;, \&quot;!top-100-movies\&quot;&#x60;)
func (r ApiMovieControllerGetRandomMovieV14Request) Lists(lists []string) ApiMovieControllerGetRandomMovieV14Request {
	r.lists = &lists
	return r
}

func (r ApiMovieControllerGetRandomMovieV14Request) Execute() (*MovieDtoV14, *http.Response, error) {
	return r.ApiService.MovieControllerGetRandomMovieV14Execute(r)
}

/*
MovieControllerGetRandomMovieV14 Получить рандомный тайтл из базы

Этот метод вернет рандомный тайтл из базы. Вы можете составить фильтр, чтобы получить рандомный тайтл по вашим критериям.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMovieControllerGetRandomMovieV14Request
*/
func (a *DefaultApiService) MovieControllerGetRandomMovieV14(ctx context.Context) ApiMovieControllerGetRandomMovieV14Request {
	return ApiMovieControllerGetRandomMovieV14Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MovieDtoV14
func (a *DefaultApiService) MovieControllerGetRandomMovieV14Execute(r ApiMovieControllerGetRandomMovieV14Request) (*MovieDtoV14, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MovieDtoV14
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.MovieControllerGetRandomMovieV14")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1.4/movie/random"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.notNullFields != nil {
		t := *r.notNullFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("notNullFields", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("notNullFields", parameterToString(t, "multi"))
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.externalIdImdb != nil {
		t := *r.externalIdImdb
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("externalId.imdb", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("externalId.imdb", parameterToString(t, "multi"))
		}
	}
	if r.externalIdTmdb != nil {
		t := *r.externalIdTmdb
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("externalId.tmdb", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("externalId.tmdb", parameterToString(t, "multi"))
		}
	}
	if r.externalIdKpHD != nil {
		t := *r.externalIdKpHD
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("externalId.kpHD", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("externalId.kpHD", parameterToString(t, "multi"))
		}
	}
	if r.type_ != nil {
		t := *r.type_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("type", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("type", parameterToString(t, "multi"))
		}
	}
	if r.typeNumber != nil {
		t := *r.typeNumber
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("typeNumber", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("typeNumber", parameterToString(t, "multi"))
		}
	}
	if r.isSeries != nil {
		t := *r.isSeries
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("isSeries", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("isSeries", parameterToString(t, "multi"))
		}
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("status", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("status", parameterToString(t, "multi"))
		}
	}
	if r.year != nil {
		t := *r.year
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("year", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("year", parameterToString(t, "multi"))
		}
	}
	if r.releaseYearsStart != nil {
		t := *r.releaseYearsStart
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("releaseYears.start", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("releaseYears.start", parameterToString(t, "multi"))
		}
	}
	if r.releaseYearsEnd != nil {
		t := *r.releaseYearsEnd
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("releaseYears.end", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("releaseYears.end", parameterToString(t, "multi"))
		}
	}
	if r.ratingKp != nil {
		t := *r.ratingKp
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("rating.kp", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("rating.kp", parameterToString(t, "multi"))
		}
	}
	if r.ratingImdb != nil {
		t := *r.ratingImdb
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("rating.imdb", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("rating.imdb", parameterToString(t, "multi"))
		}
	}
	if r.ratingTmdb != nil {
		t := *r.ratingTmdb
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("rating.tmdb", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("rating.tmdb", parameterToString(t, "multi"))
		}
	}
	if r.ratingMpaa != nil {
		t := *r.ratingMpaa
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("ratingMpaa", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("ratingMpaa", parameterToString(t, "multi"))
		}
	}
	if r.ageRating != nil {
		t := *r.ageRating
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("ageRating", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("ageRating", parameterToString(t, "multi"))
		}
	}
	if r.votesKp != nil {
		t := *r.votesKp
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("votes.kp", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("votes.kp", parameterToString(t, "multi"))
		}
	}
	if r.votesImdb != nil {
		t := *r.votesImdb
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("votes.imdb", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("votes.imdb", parameterToString(t, "multi"))
		}
	}
	if r.votesTmdb != nil {
		t := *r.votesTmdb
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("votes.tmdb", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("votes.tmdb", parameterToString(t, "multi"))
		}
	}
	if r.votesFilmCritics != nil {
		t := *r.votesFilmCritics
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("votes.filmCritics", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("votes.filmCritics", parameterToString(t, "multi"))
		}
	}
	if r.votesRussianFilmCritics != nil {
		t := *r.votesRussianFilmCritics
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("votes.russianFilmCritics", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("votes.russianFilmCritics", parameterToString(t, "multi"))
		}
	}
	if r.votesAwait != nil {
		t := *r.votesAwait
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("votes.await", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("votes.await", parameterToString(t, "multi"))
		}
	}
	if r.budgetValue != nil {
		t := *r.budgetValue
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("budget.value", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("budget.value", parameterToString(t, "multi"))
		}
	}
	if r.audienceCount != nil {
		t := *r.audienceCount
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("audience.count", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("audience.count", parameterToString(t, "multi"))
		}
	}
	if r.movieLength != nil {
		t := *r.movieLength
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("movieLength", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("movieLength", parameterToString(t, "multi"))
		}
	}
	if r.seriesLength != nil {
		t := *r.seriesLength
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("seriesLength", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("seriesLength", parameterToString(t, "multi"))
		}
	}
	if r.totalSeriesLength != nil {
		t := *r.totalSeriesLength
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("totalSeriesLength", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("totalSeriesLength", parameterToString(t, "multi"))
		}
	}
	if r.genresName != nil {
		t := *r.genresName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("genres.name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("genres.name", parameterToString(t, "multi"))
		}
	}
	if r.countriesName != nil {
		t := *r.countriesName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("countries.name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("countries.name", parameterToString(t, "multi"))
		}
	}
	if r.ticketsOnSale != nil {
		t := *r.ticketsOnSale
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("ticketsOnSale", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("ticketsOnSale", parameterToString(t, "multi"))
		}
	}
	if r.networksItemsName != nil {
		t := *r.networksItemsName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("networks.items.name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("networks.items.name", parameterToString(t, "multi"))
		}
	}
	if r.personsId != nil {
		t := *r.personsId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("persons.id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("persons.id", parameterToString(t, "multi"))
		}
	}
	if r.personsProfession != nil {
		t := *r.personsProfession
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("persons.profession", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("persons.profession", parameterToString(t, "multi"))
		}
	}
	if r.personsEnProfession != nil {
		t := *r.personsEnProfession
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("persons.enProfession", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("persons.enProfession", parameterToString(t, "multi"))
		}
	}
	if r.feesWorld != nil {
		t := *r.feesWorld
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("fees.world", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("fees.world", parameterToString(t, "multi"))
		}
	}
	if r.feesUsa != nil {
		t := *r.feesUsa
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("fees.usa", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("fees.usa", parameterToString(t, "multi"))
		}
	}
	if r.feesRussia != nil {
		t := *r.feesRussia
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("fees.russia", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("fees.russia", parameterToString(t, "multi"))
		}
	}
	if r.premiereWorld != nil {
		t := *r.premiereWorld
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("premiere.world", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("premiere.world", parameterToString(t, "multi"))
		}
	}
	if r.premiereUsa != nil {
		t := *r.premiereUsa
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("premiere.usa", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("premiere.usa", parameterToString(t, "multi"))
		}
	}
	if r.premiereRussia != nil {
		t := *r.premiereRussia
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("premiere.russia", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("premiere.russia", parameterToString(t, "multi"))
		}
	}
	if r.premiereDigital != nil {
		t := *r.premiereDigital
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("premiere.digital", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("premiere.digital", parameterToString(t, "multi"))
		}
	}
	if r.premiereCinema != nil {
		t := *r.premiereCinema
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("premiere.cinema", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("premiere.cinema", parameterToString(t, "multi"))
		}
	}
	if r.premiereCountry != nil {
		t := *r.premiereCountry
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("premiere.country", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("premiere.country", parameterToString(t, "multi"))
		}
	}
	if r.similarMoviesId != nil {
		t := *r.similarMoviesId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("similarMovies.id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("similarMovies.id", parameterToString(t, "multi"))
		}
	}
	if r.sequelsAndPrequelsId != nil {
		t := *r.sequelsAndPrequelsId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("sequelsAndPrequels.id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("sequelsAndPrequels.id", parameterToString(t, "multi"))
		}
	}
	if r.watchabilityItemsName != nil {
		t := *r.watchabilityItemsName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("watchability.items.name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("watchability.items.name", parameterToString(t, "multi"))
		}
	}
	if r.lists != nil {
		t := *r.lists
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("lists", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("lists", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-API-KEY"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-KEY"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMovieControllerSearchMovieV14Request struct {
	ctx context.Context
	ApiService *DefaultApiService
	query *string
	page *float32
	limit *float32
}

// Поисковый запрос
func (r ApiMovieControllerSearchMovieV14Request) Query(query string) ApiMovieControllerSearchMovieV14Request {
	r.query = &query
	return r
}

// Страница выборки
func (r ApiMovieControllerSearchMovieV14Request) Page(page float32) ApiMovieControllerSearchMovieV14Request {
	r.page = &page
	return r
}

// Количество элементов на странице
func (r ApiMovieControllerSearchMovieV14Request) Limit(limit float32) ApiMovieControllerSearchMovieV14Request {
	r.limit = &limit
	return r
}

func (r ApiMovieControllerSearchMovieV14Request) Execute() (*SearchMovieResponseDtoV14, *http.Response, error) {
	return r.ApiService.MovieControllerSearchMovieV14Execute(r)
}

/*
MovieControllerSearchMovieV14 Поиск фильмов по названию

Этот метод вернет список фильмов которые подходят под ваш запрос.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMovieControllerSearchMovieV14Request
*/
func (a *DefaultApiService) MovieControllerSearchMovieV14(ctx context.Context) ApiMovieControllerSearchMovieV14Request {
	return ApiMovieControllerSearchMovieV14Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SearchMovieResponseDtoV14
func (a *DefaultApiService) MovieControllerSearchMovieV14Execute(r ApiMovieControllerSearchMovieV14Request) (*SearchMovieResponseDtoV14, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchMovieResponseDtoV14
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.MovieControllerSearchMovieV14")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1.4/movie/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.query == nil {
		return localVarReturnValue, nil, reportError("query is required and must be specified")
	}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	localVarQueryParams.Add("query", parameterToString(*r.query, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-API-KEY"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-KEY"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPersonControllerFindManyAwardsV14Request struct {
	ctx context.Context
	ApiService *DefaultApiService
	page *float32
	limit *float32
	selectFields *[]string
	notNullFields *[]string
	sortField *[]string
	sortType *[]string
	personId *[]string
	nominationTitle *[]string
	nominationAwardTitle *[]string
	nominationAwardYear *[]string
	winning *string
	updatedAt *[]string
	createdAt *[]string
}

// Номер страницы
func (r ApiPersonControllerFindManyAwardsV14Request) Page(page float32) ApiPersonControllerFindManyAwardsV14Request {
	r.page = &page
	return r
}

// Количество элементов на странице
func (r ApiPersonControllerFindManyAwardsV14Request) Limit(limit float32) ApiPersonControllerFindManyAwardsV14Request {
	r.limit = &limit
	return r
}

// Список полей требуемых в ответе из модели
func (r ApiPersonControllerFindManyAwardsV14Request) SelectFields(selectFields []string) ApiPersonControllerFindManyAwardsV14Request {
	r.selectFields = &selectFields
	return r
}

// Список полей которые не должны быть null или пусты
func (r ApiPersonControllerFindManyAwardsV14Request) NotNullFields(notNullFields []string) ApiPersonControllerFindManyAwardsV14Request {
	r.notNullFields = &notNullFields
	return r
}

// Сортировка по полям из модели
func (r ApiPersonControllerFindManyAwardsV14Request) SortField(sortField []string) ApiPersonControllerFindManyAwardsV14Request {
	r.sortField = &sortField
	return r
}

// Тип сортировки применительно к полям из sortField (пример: &#x60;\&quot;1\&quot;, \&quot;-1\&quot;&#x60;)
func (r ApiPersonControllerFindManyAwardsV14Request) SortType(sortType []string) ApiPersonControllerFindManyAwardsV14Request {
	r.sortType = &sortType
	return r
}

// Поиск по ID персоны (пример: &#x60;\&quot;666\&quot;, \&quot;555\&quot;, \&quot;!666\&quot;&#x60;)
func (r ApiPersonControllerFindManyAwardsV14Request) PersonId(personId []string) ApiPersonControllerFindManyAwardsV14Request {
	r.personId = &personId
	return r
}

// Поиск по номинациям (пример: &#x60;\&quot;Оскар\&quot;, \&quot;Золотой глобус\&quot;&#x60;)
func (r ApiPersonControllerFindManyAwardsV14Request) NominationTitle(nominationTitle []string) ApiPersonControllerFindManyAwardsV14Request {
	r.nominationTitle = &nominationTitle
	return r
}

// Поиск по наградам (пример: &#x60;\&quot;Лучший фильм\&quot;, \&quot;Лучший актер\&quot;&#x60;)
func (r ApiPersonControllerFindManyAwardsV14Request) NominationAwardTitle(nominationAwardTitle []string) ApiPersonControllerFindManyAwardsV14Request {
	r.nominationAwardTitle = &nominationAwardTitle
	return r
}

// Поиск по году награды (пример: &#x60;\&quot;2019\&quot;, \&quot;2020\&quot;&#x60;)
func (r ApiPersonControllerFindManyAwardsV14Request) NominationAwardYear(nominationAwardYear []string) ApiPersonControllerFindManyAwardsV14Request {
	r.nominationAwardYear = &nominationAwardYear
	return r
}

// Поиск по победам (пример: &#x60;\&quot;true\&quot;, \&quot;false\&quot;&#x60;)
func (r ApiPersonControllerFindManyAwardsV14Request) Winning(winning string) ApiPersonControllerFindManyAwardsV14Request {
	r.winning = &winning
	return r
}

// Поиск по дате обновления в базе (пример: &#x60;01.01.2020, 01.01.2020-31.12.2020&#x60;)
func (r ApiPersonControllerFindManyAwardsV14Request) UpdatedAt(updatedAt []string) ApiPersonControllerFindManyAwardsV14Request {
	r.updatedAt = &updatedAt
	return r
}

// Поиск по дате добавления в базу (пример: &#x60;01.01.2020, 01.01.2020-31.12.2020&#x60;)
func (r ApiPersonControllerFindManyAwardsV14Request) CreatedAt(createdAt []string) ApiPersonControllerFindManyAwardsV14Request {
	r.createdAt = &createdAt
	return r
}

func (r ApiPersonControllerFindManyAwardsV14Request) Execute() (*PersonAwardDocsResponseDto, *http.Response, error) {
	return r.ApiService.PersonControllerFindManyAwardsV14Execute(r)
}

/*
PersonControllerFindManyAwardsV14 Награды актеров

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPersonControllerFindManyAwardsV14Request
*/
func (a *DefaultApiService) PersonControllerFindManyAwardsV14(ctx context.Context) ApiPersonControllerFindManyAwardsV14Request {
	return ApiPersonControllerFindManyAwardsV14Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PersonAwardDocsResponseDto
func (a *DefaultApiService) PersonControllerFindManyAwardsV14Execute(r ApiPersonControllerFindManyAwardsV14Request) (*PersonAwardDocsResponseDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PersonAwardDocsResponseDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.PersonControllerFindManyAwardsV14")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1.4/person/awards"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.selectFields != nil {
		t := *r.selectFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("selectFields", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("selectFields", parameterToString(t, "multi"))
		}
	}
	if r.notNullFields != nil {
		t := *r.notNullFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("notNullFields", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("notNullFields", parameterToString(t, "multi"))
		}
	}
	if r.sortField != nil {
		t := *r.sortField
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("sortField", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("sortField", parameterToString(t, "multi"))
		}
	}
	if r.sortType != nil {
		t := *r.sortType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("sortType", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("sortType", parameterToString(t, "multi"))
		}
	}
	if r.personId != nil {
		t := *r.personId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("personId", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("personId", parameterToString(t, "multi"))
		}
	}
	if r.nominationTitle != nil {
		t := *r.nominationTitle
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("nomination.title", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("nomination.title", parameterToString(t, "multi"))
		}
	}
	if r.nominationAwardTitle != nil {
		t := *r.nominationAwardTitle
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("nomination.award.title", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("nomination.award.title", parameterToString(t, "multi"))
		}
	}
	if r.nominationAwardYear != nil {
		t := *r.nominationAwardYear
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("nomination.award.year", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("nomination.award.year", parameterToString(t, "multi"))
		}
	}
	if r.winning != nil {
		localVarQueryParams.Add("winning", parameterToString(*r.winning, ""))
	}
	if r.updatedAt != nil {
		t := *r.updatedAt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("updatedAt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("updatedAt", parameterToString(t, "multi"))
		}
	}
	if r.createdAt != nil {
		t := *r.createdAt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("createdAt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("createdAt", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-API-KEY"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-KEY"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPersonControllerFindManyV14Request struct {
	ctx context.Context
	ApiService *DefaultApiService
	page *float32
	limit *float32
	selectFields *[]string
	notNullFields *[]string
	sortField *[]string
	sortType *[]string
	id *[]string
	moviesId *[]string
	sex *[]string
	growth *[]string
	birthday *[]string
	death *[]string
	age *[]string
	birthPlaceValue *[]string
	deathPlaceValue *[]string
	spousesId *[]string
	spousesDivorced *string
	spousesSex *[]string
	countAwards *[]string
	professionValue *[]string
	moviesRating *[]string
	moviesEnProfession *[]string
	updatedAt *[]string
	createdAt *[]string
}

// Номер страницы
func (r ApiPersonControllerFindManyV14Request) Page(page float32) ApiPersonControllerFindManyV14Request {
	r.page = &page
	return r
}

// Количество элементов на странице
func (r ApiPersonControllerFindManyV14Request) Limit(limit float32) ApiPersonControllerFindManyV14Request {
	r.limit = &limit
	return r
}

// Список полей требуемых в ответе из модели
func (r ApiPersonControllerFindManyV14Request) SelectFields(selectFields []string) ApiPersonControllerFindManyV14Request {
	r.selectFields = &selectFields
	return r
}

// Список полей которые не должны быть null или пусты
func (r ApiPersonControllerFindManyV14Request) NotNullFields(notNullFields []string) ApiPersonControllerFindManyV14Request {
	r.notNullFields = &notNullFields
	return r
}

// Сортировка по полям из модели
func (r ApiPersonControllerFindManyV14Request) SortField(sortField []string) ApiPersonControllerFindManyV14Request {
	r.sortField = &sortField
	return r
}

// Тип сортировки применительно к полям из sortField (пример: &#x60;\&quot;1\&quot;, \&quot;-1\&quot;&#x60;)
func (r ApiPersonControllerFindManyV14Request) SortType(sortType []string) ApiPersonControllerFindManyV14Request {
	r.sortType = &sortType
	return r
}

// Поиск по ID KinoPoisk (пример: &#x60;\&quot;111\&quot;, \&quot;222\&quot;, \&quot;!666\&quot;&#x60;)
func (r ApiPersonControllerFindManyV14Request) Id(id []string) ApiPersonControllerFindManyV14Request {
	r.id = &id
	return r
}

// Поиск по ID фильма (пример: &#x60;\&quot;666\&quot;, \&quot;555\&quot;, \&quot;!666\&quot;&#x60;)
func (r ApiPersonControllerFindManyV14Request) MoviesId(moviesId []string) ApiPersonControllerFindManyV14Request {
	r.moviesId = &moviesId
	return r
}

// Поиск по гендеру (пример: &#x60;Женский, Мужской&#x60;)
func (r ApiPersonControllerFindManyV14Request) Sex(sex []string) ApiPersonControllerFindManyV14Request {
	r.sex = &sex
	return r
}

// Поиск по росту (пример: &#x60;170-180, 180&#x60;)
func (r ApiPersonControllerFindManyV14Request) Growth(growth []string) ApiPersonControllerFindManyV14Request {
	r.growth = &growth
	return r
}

// Поиск по дате рождения (пример: &#x60;01.01.2000-01.01.2001, 01.01.2000&#x60;)
func (r ApiPersonControllerFindManyV14Request) Birthday(birthday []string) ApiPersonControllerFindManyV14Request {
	r.birthday = &birthday
	return r
}

// Поиск по дате смерти (пример: &#x60;01.01.2000-01.01.2001, 01.01.2000&#x60;)
func (r ApiPersonControllerFindManyV14Request) Death(death []string) ApiPersonControllerFindManyV14Request {
	r.death = &death
	return r
}

// Поиск по возрасту (пример: &#x60;18-25, 25&#x60;)
func (r ApiPersonControllerFindManyV14Request) Age(age []string) ApiPersonControllerFindManyV14Request {
	r.age = &age
	return r
}

// Поиск по месту рождения (пример: &#x60;Москва, Санкт-Петербург&#x60;)
func (r ApiPersonControllerFindManyV14Request) BirthPlaceValue(birthPlaceValue []string) ApiPersonControllerFindManyV14Request {
	r.birthPlaceValue = &birthPlaceValue
	return r
}

// Поиск по месту смерти (пример: &#x60;Москва, Санкт-Петербург&#x60;)
func (r ApiPersonControllerFindManyV14Request) DeathPlaceValue(deathPlaceValue []string) ApiPersonControllerFindManyV14Request {
	r.deathPlaceValue = &deathPlaceValue
	return r
}

// Поиск по ID супруги(супруга) (пример: &#x60;111, 222&#x60;)
func (r ApiPersonControllerFindManyV14Request) SpousesId(spousesId []string) ApiPersonControllerFindManyV14Request {
	r.spousesId = &spousesId
	return r
}

// Поиск по статусу развода (пример: &#x60;true, false&#x60;)
func (r ApiPersonControllerFindManyV14Request) SpousesDivorced(spousesDivorced string) ApiPersonControllerFindManyV14Request {
	r.spousesDivorced = &spousesDivorced
	return r
}

// Поиск по гендеру супруги(супруга) (пример: &#x60;Женский, Мужской&#x60;)
func (r ApiPersonControllerFindManyV14Request) SpousesSex(spousesSex []string) ApiPersonControllerFindManyV14Request {
	r.spousesSex = &spousesSex
	return r
}

// Поиск по количеству наград (пример: &#x60;1-10, 10&#x60;)
func (r ApiPersonControllerFindManyV14Request) CountAwards(countAwards []string) ApiPersonControllerFindManyV14Request {
	r.countAwards = &countAwards
	return r
}

// Поиск по профессии (пример: &#x60;Актер, Режиссер&#x60;)
func (r ApiPersonControllerFindManyV14Request) ProfessionValue(professionValue []string) ApiPersonControllerFindManyV14Request {
	r.professionValue = &professionValue
	return r
}

// Поиск по рейтингу фильма (пример: &#x60;1-10, 10&#x60;)
func (r ApiPersonControllerFindManyV14Request) MoviesRating(moviesRating []string) ApiPersonControllerFindManyV14Request {
	r.moviesRating = &moviesRating
	return r
}

// Поиск по профессии в фильмах на английском (пример: &#x60;actor, director&#x60;)
func (r ApiPersonControllerFindManyV14Request) MoviesEnProfession(moviesEnProfession []string) ApiPersonControllerFindManyV14Request {
	r.moviesEnProfession = &moviesEnProfession
	return r
}

// Поиск по дате обновления в базе (пример: &#x60;01.01.2020, 01.01.2020-31.12.2020&#x60;)
func (r ApiPersonControllerFindManyV14Request) UpdatedAt(updatedAt []string) ApiPersonControllerFindManyV14Request {
	r.updatedAt = &updatedAt
	return r
}

// Поиск по дате добавления в базу (пример: &#x60;01.01.2020, 01.01.2020-31.12.2020&#x60;)
func (r ApiPersonControllerFindManyV14Request) CreatedAt(createdAt []string) ApiPersonControllerFindManyV14Request {
	r.createdAt = &createdAt
	return r
}

func (r ApiPersonControllerFindManyV14Request) Execute() (*PersonDocsResponseDtoV14, *http.Response, error) {
	return r.ApiService.PersonControllerFindManyV14Execute(r)
}

/*
PersonControllerFindManyV14 Универсальный поиск с фильтрами

Этот метод вернет список персон удовлетворяющих вашему запросу. <br> В ответе придут поля указанные в параметре `selectFields`. Если его не указать, то вернутся только дефолтные поля.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPersonControllerFindManyV14Request
*/
func (a *DefaultApiService) PersonControllerFindManyV14(ctx context.Context) ApiPersonControllerFindManyV14Request {
	return ApiPersonControllerFindManyV14Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PersonDocsResponseDtoV14
func (a *DefaultApiService) PersonControllerFindManyV14Execute(r ApiPersonControllerFindManyV14Request) (*PersonDocsResponseDtoV14, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PersonDocsResponseDtoV14
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.PersonControllerFindManyV14")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1.4/person"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.selectFields != nil {
		t := *r.selectFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("selectFields", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("selectFields", parameterToString(t, "multi"))
		}
	}
	if r.notNullFields != nil {
		t := *r.notNullFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("notNullFields", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("notNullFields", parameterToString(t, "multi"))
		}
	}
	if r.sortField != nil {
		t := *r.sortField
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("sortField", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("sortField", parameterToString(t, "multi"))
		}
	}
	if r.sortType != nil {
		t := *r.sortType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("sortType", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("sortType", parameterToString(t, "multi"))
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.moviesId != nil {
		t := *r.moviesId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("movies.id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("movies.id", parameterToString(t, "multi"))
		}
	}
	if r.sex != nil {
		t := *r.sex
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("sex", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("sex", parameterToString(t, "multi"))
		}
	}
	if r.growth != nil {
		t := *r.growth
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("growth", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("growth", parameterToString(t, "multi"))
		}
	}
	if r.birthday != nil {
		t := *r.birthday
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("birthday", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("birthday", parameterToString(t, "multi"))
		}
	}
	if r.death != nil {
		t := *r.death
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("death", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("death", parameterToString(t, "multi"))
		}
	}
	if r.age != nil {
		t := *r.age
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("age", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("age", parameterToString(t, "multi"))
		}
	}
	if r.birthPlaceValue != nil {
		t := *r.birthPlaceValue
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("birthPlace.value", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("birthPlace.value", parameterToString(t, "multi"))
		}
	}
	if r.deathPlaceValue != nil {
		t := *r.deathPlaceValue
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("deathPlace.value", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("deathPlace.value", parameterToString(t, "multi"))
		}
	}
	if r.spousesId != nil {
		t := *r.spousesId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("spouses.id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("spouses.id", parameterToString(t, "multi"))
		}
	}
	if r.spousesDivorced != nil {
		localVarQueryParams.Add("spouses.divorced", parameterToString(*r.spousesDivorced, ""))
	}
	if r.spousesSex != nil {
		t := *r.spousesSex
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("spouses.sex", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("spouses.sex", parameterToString(t, "multi"))
		}
	}
	if r.countAwards != nil {
		t := *r.countAwards
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("countAwards", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("countAwards", parameterToString(t, "multi"))
		}
	}
	if r.professionValue != nil {
		t := *r.professionValue
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("profession.value", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("profession.value", parameterToString(t, "multi"))
		}
	}
	if r.moviesRating != nil {
		t := *r.moviesRating
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("movies.rating", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("movies.rating", parameterToString(t, "multi"))
		}
	}
	if r.moviesEnProfession != nil {
		t := *r.moviesEnProfession
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("movies.enProfession", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("movies.enProfession", parameterToString(t, "multi"))
		}
	}
	if r.updatedAt != nil {
		t := *r.updatedAt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("updatedAt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("updatedAt", parameterToString(t, "multi"))
		}
	}
	if r.createdAt != nil {
		t := *r.createdAt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("createdAt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("createdAt", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-API-KEY"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-KEY"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPersonControllerFindOneV14Request struct {
	ctx context.Context
	ApiService *DefaultApiService
	id float32
}

func (r ApiPersonControllerFindOneV14Request) Execute() (*Person, *http.Response, error) {
	return r.ApiService.PersonControllerFindOneV14Execute(r)
}

/*
PersonControllerFindOneV14 Поиск по id

Возвращает всю доступную информацию о сущности.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ID из кинопоиска
 @return ApiPersonControllerFindOneV14Request
*/
func (a *DefaultApiService) PersonControllerFindOneV14(ctx context.Context, id float32) ApiPersonControllerFindOneV14Request {
	return ApiPersonControllerFindOneV14Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Person
func (a *DefaultApiService) PersonControllerFindOneV14Execute(r ApiPersonControllerFindOneV14Request) (*Person, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Person
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.PersonControllerFindOneV14")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1.4/person/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-API-KEY"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-KEY"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedErrorResponseDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ForbiddenErrorResponseDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ForbiddenErrorResponseDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v ErrorResponseDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPersonControllerSearchPersonV14Request struct {
	ctx context.Context
	ApiService *DefaultApiService
	query *string
	page *float32
	limit *float32
}

// Поисковый запрос
func (r ApiPersonControllerSearchPersonV14Request) Query(query string) ApiPersonControllerSearchPersonV14Request {
	r.query = &query
	return r
}

// Страница выборки
func (r ApiPersonControllerSearchPersonV14Request) Page(page float32) ApiPersonControllerSearchPersonV14Request {
	r.page = &page
	return r
}

// Количество элементов на странице
func (r ApiPersonControllerSearchPersonV14Request) Limit(limit float32) ApiPersonControllerSearchPersonV14Request {
	r.limit = &limit
	return r
}

func (r ApiPersonControllerSearchPersonV14Request) Execute() (*SearchPersonResponseDtoV14, *http.Response, error) {
	return r.ApiService.PersonControllerSearchPersonV14Execute(r)
}

/*
PersonControllerSearchPersonV14 Поиск актеров, режиссеров, и т.д по имени

Этот метод вернет список персон которые подходят под ваш запрос.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPersonControllerSearchPersonV14Request
*/
func (a *DefaultApiService) PersonControllerSearchPersonV14(ctx context.Context) ApiPersonControllerSearchPersonV14Request {
	return ApiPersonControllerSearchPersonV14Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SearchPersonResponseDtoV14
func (a *DefaultApiService) PersonControllerSearchPersonV14Execute(r ApiPersonControllerSearchPersonV14Request) (*SearchPersonResponseDtoV14, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchPersonResponseDtoV14
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.PersonControllerSearchPersonV14")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1.4/person/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.query == nil {
		return localVarReturnValue, nil, reportError("query is required and must be specified")
	}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	localVarQueryParams.Add("query", parameterToString(*r.query, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-API-KEY"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-KEY"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReviewControllerFindManyV14Request struct {
	ctx context.Context
	ApiService *DefaultApiService
	page *float32
	limit *float32
	selectFields *[]string
	notNullFields *[]string
	sortField *[]string
	sortType *[]string
	id *[]string
	movieId *[]string
	authorId *[]string
	author *[]string
	type_ *[]string
	date *[]string
	updatedAt *[]string
	createdAt *[]string
}

// Номер страницы
func (r ApiReviewControllerFindManyV14Request) Page(page float32) ApiReviewControllerFindManyV14Request {
	r.page = &page
	return r
}

// Количество элементов на странице
func (r ApiReviewControllerFindManyV14Request) Limit(limit float32) ApiReviewControllerFindManyV14Request {
	r.limit = &limit
	return r
}

// Список полей требуемых в ответе из модели
func (r ApiReviewControllerFindManyV14Request) SelectFields(selectFields []string) ApiReviewControllerFindManyV14Request {
	r.selectFields = &selectFields
	return r
}

// Список полей которые не должны быть null или пусты
func (r ApiReviewControllerFindManyV14Request) NotNullFields(notNullFields []string) ApiReviewControllerFindManyV14Request {
	r.notNullFields = &notNullFields
	return r
}

// Сортировка по полям из модели
func (r ApiReviewControllerFindManyV14Request) SortField(sortField []string) ApiReviewControllerFindManyV14Request {
	r.sortField = &sortField
	return r
}

// Тип сортировки применительно к полям из sortField (пример: &#x60;\&quot;1\&quot;, \&quot;-1\&quot;&#x60;)
func (r ApiReviewControllerFindManyV14Request) SortType(sortType []string) ApiReviewControllerFindManyV14Request {
	r.sortType = &sortType
	return r
}

// Поиск по ID отзыва (пример: &#x60;\&quot;111\&quot;, \&quot;222\&quot;, \&quot;!666\&quot;&#x60;)
func (r ApiReviewControllerFindManyV14Request) Id(id []string) ApiReviewControllerFindManyV14Request {
	r.id = &id
	return r
}

// Поиск по ID фильма (пример: &#x60;\&quot;666\&quot;, \&quot;555\&quot;, \&quot;!666\&quot;&#x60;)
func (r ApiReviewControllerFindManyV14Request) MovieId(movieId []string) ApiReviewControllerFindManyV14Request {
	r.movieId = &movieId
	return r
}

// Поиск отзывов по ID автора (пример: &#x60;\&quot;666\&quot;, \&quot;555\&quot;, \&quot;!666\&quot;&#x60;)
func (r ApiReviewControllerFindManyV14Request) AuthorId(authorId []string) ApiReviewControllerFindManyV14Request {
	r.authorId = &authorId
	return r
}

// Поиск по имени автора отзыва (пример: &#x60;\&quot;КиноПоиск\&quot;, \&quot;!КиноПоиск\&quot;&#x60;)
func (r ApiReviewControllerFindManyV14Request) Author(author []string) ApiReviewControllerFindManyV14Request {
	r.author = &author
	return r
}

// Поиск по типу отзыва (пример: &#x60;\&quot;!Негативный\&quot;, \&quot;Нейтральный\&quot;, \&quot;Позитивный\&quot;&#x60;)
func (r ApiReviewControllerFindManyV14Request) Type_(type_ []string) ApiReviewControllerFindManyV14Request {
	r.type_ = &type_
	return r
}

// Поиск по дате создания отзыва (пример: &#x60;\&quot;01.01.2021-01.01.2022\&quot;, \&quot;01.01.2021\&quot;&#x60;)
func (r ApiReviewControllerFindManyV14Request) Date(date []string) ApiReviewControllerFindManyV14Request {
	r.date = &date
	return r
}

// Поиск по дате обновления в базе (пример: &#x60;01.01.2020, 01.01.2020-31.12.2020&#x60;)
func (r ApiReviewControllerFindManyV14Request) UpdatedAt(updatedAt []string) ApiReviewControllerFindManyV14Request {
	r.updatedAt = &updatedAt
	return r
}

// Поиск по дате добавления в базу (пример: &#x60;01.01.2020, 01.01.2020-31.12.2020&#x60;)
func (r ApiReviewControllerFindManyV14Request) CreatedAt(createdAt []string) ApiReviewControllerFindManyV14Request {
	r.createdAt = &createdAt
	return r
}

func (r ApiReviewControllerFindManyV14Request) Execute() (*ReviewDocsResponseDtoV14, *http.Response, error) {
	return r.ApiService.ReviewControllerFindManyV14Execute(r)
}

/*
ReviewControllerFindManyV14 Универсальный поиск с фильтрами

Этот метод предназначен для поиска персон по фильтрам. Он принимает множество параметров, которые можно комбинировать между собой. Если вам нужен только поиск по имени, используйте метод `Полнотекстовый поиск` (search). В этом методе также доступен выбор полей. А в ответ приходит полная модель персоны.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiReviewControllerFindManyV14Request
*/
func (a *DefaultApiService) ReviewControllerFindManyV14(ctx context.Context) ApiReviewControllerFindManyV14Request {
	return ApiReviewControllerFindManyV14Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ReviewDocsResponseDtoV14
func (a *DefaultApiService) ReviewControllerFindManyV14Execute(r ApiReviewControllerFindManyV14Request) (*ReviewDocsResponseDtoV14, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReviewDocsResponseDtoV14
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ReviewControllerFindManyV14")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1.4/review"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.selectFields != nil {
		t := *r.selectFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("selectFields", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("selectFields", parameterToString(t, "multi"))
		}
	}
	if r.notNullFields != nil {
		t := *r.notNullFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("notNullFields", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("notNullFields", parameterToString(t, "multi"))
		}
	}
	if r.sortField != nil {
		t := *r.sortField
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("sortField", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("sortField", parameterToString(t, "multi"))
		}
	}
	if r.sortType != nil {
		t := *r.sortType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("sortType", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("sortType", parameterToString(t, "multi"))
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.movieId != nil {
		t := *r.movieId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("movieId", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("movieId", parameterToString(t, "multi"))
		}
	}
	if r.authorId != nil {
		t := *r.authorId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("authorId", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("authorId", parameterToString(t, "multi"))
		}
	}
	if r.author != nil {
		t := *r.author
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("author", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("author", parameterToString(t, "multi"))
		}
	}
	if r.type_ != nil {
		t := *r.type_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("type", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("type", parameterToString(t, "multi"))
		}
	}
	if r.date != nil {
		t := *r.date
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("date", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("date", parameterToString(t, "multi"))
		}
	}
	if r.updatedAt != nil {
		t := *r.updatedAt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("updatedAt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("updatedAt", parameterToString(t, "multi"))
		}
	}
	if r.createdAt != nil {
		t := *r.createdAt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("createdAt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("createdAt", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-API-KEY"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-KEY"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSeasonControllerFindManyV14Request struct {
	ctx context.Context
	ApiService *DefaultApiService
	page *float32
	limit *float32
	selectFields *[]string
	notNullFields *[]string
	sortField *[]string
	sortType *[]string
	movieId *[]string
	number *[]string
	episodesNumber *[]string
	airDate *[]string
	episodesAirDate *[]string
	updatedAt *[]string
	createdAt *[]string
}

// Номер страницы
func (r ApiSeasonControllerFindManyV14Request) Page(page float32) ApiSeasonControllerFindManyV14Request {
	r.page = &page
	return r
}

// Количество элементов на странице
func (r ApiSeasonControllerFindManyV14Request) Limit(limit float32) ApiSeasonControllerFindManyV14Request {
	r.limit = &limit
	return r
}

// Список полей требуемых в ответе из модели
func (r ApiSeasonControllerFindManyV14Request) SelectFields(selectFields []string) ApiSeasonControllerFindManyV14Request {
	r.selectFields = &selectFields
	return r
}

// Список полей которые не должны быть null или пусты
func (r ApiSeasonControllerFindManyV14Request) NotNullFields(notNullFields []string) ApiSeasonControllerFindManyV14Request {
	r.notNullFields = &notNullFields
	return r
}

// Сортировка по полям из модели
func (r ApiSeasonControllerFindManyV14Request) SortField(sortField []string) ApiSeasonControllerFindManyV14Request {
	r.sortField = &sortField
	return r
}

// Тип сортировки применительно к полям из sortField (пример: &#x60;\&quot;1\&quot;, \&quot;-1\&quot;&#x60;)
func (r ApiSeasonControllerFindManyV14Request) SortType(sortType []string) ApiSeasonControllerFindManyV14Request {
	r.sortType = &sortType
	return r
}

// Поиск по ID фильма (пример: &#x60;\&quot;666\&quot;, \&quot;555\&quot;, \&quot;!666\&quot;&#x60;)
func (r ApiSeasonControllerFindManyV14Request) MovieId(movieId []string) ApiSeasonControllerFindManyV14Request {
	r.movieId = &movieId
	return r
}

// Поиск по номеру сезона (пример: &#x60;\&quot;1\&quot;, \&quot;1-19\&quot;, \&quot;!3\&quot;&#x60;)
func (r ApiSeasonControllerFindManyV14Request) Number(number []string) ApiSeasonControllerFindManyV14Request {
	r.number = &number
	return r
}

// Поиск по нормеру эпизода (пример: &#x60;\&quot;1\&quot;, \&quot;1-19\&quot;, \&quot;!3\&quot;&#x60;)
func (r ApiSeasonControllerFindManyV14Request) EpisodesNumber(episodesNumber []string) ApiSeasonControllerFindManyV14Request {
	r.episodesNumber = &episodesNumber
	return r
}

// Поиск по дате выхода сезона (пример: &#x60;\&quot;2020-01-01-2020-12-31\&quot;, \&quot;2020-01-01\&quot;&#x60;)
func (r ApiSeasonControllerFindManyV14Request) AirDate(airDate []string) ApiSeasonControllerFindManyV14Request {
	r.airDate = &airDate
	return r
}

// Поиск по дате выхода эпизода (пример: &#x60;\&quot;2020-01-01-2020-12-31\&quot;, \&quot;2020-01-01\&quot;&#x60;)
func (r ApiSeasonControllerFindManyV14Request) EpisodesAirDate(episodesAirDate []string) ApiSeasonControllerFindManyV14Request {
	r.episodesAirDate = &episodesAirDate
	return r
}

// Поиск по дате обновления в базе (пример: &#x60;01.01.2020, 01.01.2020-31.12.2020&#x60;)
func (r ApiSeasonControllerFindManyV14Request) UpdatedAt(updatedAt []string) ApiSeasonControllerFindManyV14Request {
	r.updatedAt = &updatedAt
	return r
}

// Поиск по дате добавления в базу (пример: &#x60;01.01.2020, 01.01.2020-31.12.2020&#x60;)
func (r ApiSeasonControllerFindManyV14Request) CreatedAt(createdAt []string) ApiSeasonControllerFindManyV14Request {
	r.createdAt = &createdAt
	return r
}

func (r ApiSeasonControllerFindManyV14Request) Execute() (*SeasonDocsResponseDtoV14, *http.Response, error) {
	return r.ApiService.SeasonControllerFindManyV14Execute(r)
}

/*
SeasonControllerFindManyV14 Поиск сезонов

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSeasonControllerFindManyV14Request
*/
func (a *DefaultApiService) SeasonControllerFindManyV14(ctx context.Context) ApiSeasonControllerFindManyV14Request {
	return ApiSeasonControllerFindManyV14Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SeasonDocsResponseDtoV14
func (a *DefaultApiService) SeasonControllerFindManyV14Execute(r ApiSeasonControllerFindManyV14Request) (*SeasonDocsResponseDtoV14, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SeasonDocsResponseDtoV14
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.SeasonControllerFindManyV14")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1.4/season"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.selectFields != nil {
		t := *r.selectFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("selectFields", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("selectFields", parameterToString(t, "multi"))
		}
	}
	if r.notNullFields != nil {
		t := *r.notNullFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("notNullFields", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("notNullFields", parameterToString(t, "multi"))
		}
	}
	if r.sortField != nil {
		t := *r.sortField
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("sortField", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("sortField", parameterToString(t, "multi"))
		}
	}
	if r.sortType != nil {
		t := *r.sortType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("sortType", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("sortType", parameterToString(t, "multi"))
		}
	}
	if r.movieId != nil {
		t := *r.movieId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("movieId", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("movieId", parameterToString(t, "multi"))
		}
	}
	if r.number != nil {
		t := *r.number
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("number", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("number", parameterToString(t, "multi"))
		}
	}
	if r.episodesNumber != nil {
		t := *r.episodesNumber
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("episodes.number", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("episodes.number", parameterToString(t, "multi"))
		}
	}
	if r.airDate != nil {
		t := *r.airDate
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("airDate", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("airDate", parameterToString(t, "multi"))
		}
	}
	if r.episodesAirDate != nil {
		t := *r.episodesAirDate
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("episodes.airDate", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("episodes.airDate", parameterToString(t, "multi"))
		}
	}
	if r.updatedAt != nil {
		t := *r.updatedAt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("updatedAt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("updatedAt", parameterToString(t, "multi"))
		}
	}
	if r.createdAt != nil {
		t := *r.createdAt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("createdAt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("createdAt", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-API-KEY"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-KEY"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiStudioControllerFindManyV14Request struct {
	ctx context.Context
	ApiService *DefaultApiService
	page *float32
	limit *float32
	selectFields *[]string
	notNullFields *[]string
	sortField *[]string
	sortType *[]string
	id *[]string
	moviesId *[]string
	type_ *[]string
	subType *[]string
	title *[]string
	updatedAt *[]string
	createdAt *[]string
}

// Номер страницы
func (r ApiStudioControllerFindManyV14Request) Page(page float32) ApiStudioControllerFindManyV14Request {
	r.page = &page
	return r
}

// Количество элементов на странице
func (r ApiStudioControllerFindManyV14Request) Limit(limit float32) ApiStudioControllerFindManyV14Request {
	r.limit = &limit
	return r
}

// Список полей требуемых в ответе из модели
func (r ApiStudioControllerFindManyV14Request) SelectFields(selectFields []string) ApiStudioControllerFindManyV14Request {
	r.selectFields = &selectFields
	return r
}

// Список полей которые не должны быть null или пусты
func (r ApiStudioControllerFindManyV14Request) NotNullFields(notNullFields []string) ApiStudioControllerFindManyV14Request {
	r.notNullFields = &notNullFields
	return r
}

// Сортировка по полям из модели
func (r ApiStudioControllerFindManyV14Request) SortField(sortField []string) ApiStudioControllerFindManyV14Request {
	r.sortField = &sortField
	return r
}

// Тип сортировки применительно к полям из sortField (пример: &#x60;\&quot;1\&quot;, \&quot;-1\&quot;&#x60;)
func (r ApiStudioControllerFindManyV14Request) SortType(sortType []string) ApiStudioControllerFindManyV14Request {
	r.sortType = &sortType
	return r
}

// Поиск по ID KinoPoisk (пример: &#x60;\&quot;warnerbros\&quot;, \&quot;222\&quot;, \&quot;!666\&quot;&#x60;)
func (r ApiStudioControllerFindManyV14Request) Id(id []string) ApiStudioControllerFindManyV14Request {
	r.id = &id
	return r
}

// Поиск по ID фильма (пример: &#x60;\&quot;666\&quot;, \&quot;555\&quot;, \&quot;!666\&quot;&#x60;)
func (r ApiStudioControllerFindManyV14Request) MoviesId(moviesId []string) ApiStudioControllerFindManyV14Request {
	r.moviesId = &moviesId
	return r
}

// Поиск по типу студии (пример: &#x60;\&quot;Производство\&quot;, \&quot;Студия дубляжа\&quot;&#x60;)
func (r ApiStudioControllerFindManyV14Request) Type_(type_ []string) ApiStudioControllerFindManyV14Request {
	r.type_ = &type_
	return r
}

// Поиск по типу студии (пример: &#x60;\&quot;company\&quot;, \&quot;studio\&quot;&#x60;)
func (r ApiStudioControllerFindManyV14Request) SubType(subType []string) ApiStudioControllerFindManyV14Request {
	r.subType = &subType
	return r
}

// Поиск по названию студии (пример: &#x60;\&quot;Warner Bros.\&quot;, \&quot;!Warner Bros.\&quot;&#x60;)
func (r ApiStudioControllerFindManyV14Request) Title(title []string) ApiStudioControllerFindManyV14Request {
	r.title = &title
	return r
}

// Поиск по дате обновления (пример: &#x60;01.01.2020, 01.01.2020-31.12.2020&#x60;)
func (r ApiStudioControllerFindManyV14Request) UpdatedAt(updatedAt []string) ApiStudioControllerFindManyV14Request {
	r.updatedAt = &updatedAt
	return r
}

// Поиск по дате добавления (пример: &#x60;01.01.2020, 01.01.2020-31.12.2020&#x60;)
func (r ApiStudioControllerFindManyV14Request) CreatedAt(createdAt []string) ApiStudioControllerFindManyV14Request {
	r.createdAt = &createdAt
	return r
}

func (r ApiStudioControllerFindManyV14Request) Execute() (*StudioDocsResponseDtoV14, *http.Response, error) {
	return r.ApiService.StudioControllerFindManyV14Execute(r)
}

/*
StudioControllerFindManyV14 Поиск студий

Этот метод предназначен для поиска студий

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiStudioControllerFindManyV14Request
*/
func (a *DefaultApiService) StudioControllerFindManyV14(ctx context.Context) ApiStudioControllerFindManyV14Request {
	return ApiStudioControllerFindManyV14Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return StudioDocsResponseDtoV14
func (a *DefaultApiService) StudioControllerFindManyV14Execute(r ApiStudioControllerFindManyV14Request) (*StudioDocsResponseDtoV14, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *StudioDocsResponseDtoV14
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.StudioControllerFindManyV14")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1.4/studio"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.selectFields != nil {
		t := *r.selectFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("selectFields", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("selectFields", parameterToString(t, "multi"))
		}
	}
	if r.notNullFields != nil {
		t := *r.notNullFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("notNullFields", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("notNullFields", parameterToString(t, "multi"))
		}
	}
	if r.sortField != nil {
		t := *r.sortField
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("sortField", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("sortField", parameterToString(t, "multi"))
		}
	}
	if r.sortType != nil {
		t := *r.sortType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("sortType", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("sortType", parameterToString(t, "multi"))
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.moviesId != nil {
		t := *r.moviesId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("movies.id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("movies.id", parameterToString(t, "multi"))
		}
	}
	if r.type_ != nil {
		t := *r.type_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("type", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("type", parameterToString(t, "multi"))
		}
	}
	if r.subType != nil {
		t := *r.subType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("subType", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("subType", parameterToString(t, "multi"))
		}
	}
	if r.title != nil {
		t := *r.title
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("title", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("title", parameterToString(t, "multi"))
		}
	}
	if r.updatedAt != nil {
		t := *r.updatedAt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("updatedAt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("updatedAt", parameterToString(t, "multi"))
		}
	}
	if r.createdAt != nil {
		t := *r.createdAt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("createdAt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("createdAt", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-API-KEY"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-KEY"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
