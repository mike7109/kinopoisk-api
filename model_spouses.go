/*
Документация для неофициального API кинопоиска (kinopoisk.dev).

 <!-- Yandex.Metrika counter --> <div><img src=\"https://mc.yandex.ru/watch/62307766\" style=\"position:absolute; left:-9999px;\" alt=\"\" /></div> <!-- /Yandex.Metrika counter --> <p>Через этот API вы можете получить практически все данные из кинопоиска. Больше информации вы можете получить изучив эту документацию.</p> <h2>Как работать с документацией?</h2> <p> Для начала работы с API вам необходимо получить токен, который вы можете получить в боте <a href=\"https://t.me/kinopoiskdev_bot\">@kinopoiskdev_bot</a>. <br /> После получения токена, вам необходимо авторизоваться в документации, для этого нажмите на кнопку <strong>Authorize</strong> и введите токен в поле <strong>Value</strong>.<br /> После авторизации вы можете отправлять запросы к API, для этого нажмите на кнопку <strong>Try it out</strong> и заполните необходимые поля для составления нужного фильтра.<br /> После заполнения полей нажмите на кнопку <strong>Execute</strong> и получите ответ от API и пример запроса. </p> <h3>Как работать с API?</h3> <p> API работает по принципу REST, все запросы отправляются на адрес <code>https://api.kinopoisk.dev/</code> с указанием версии API и необходимого ресурса.<br /> Все запросы к API кинопоиска должны содержать заголовок <code>X-API-KEY</code> с вашим токеном. В противном случае вы получите ошибку <code>401</code>.<br /> При составлении запроса учитывайте, что все параметры должны быть в <code>query</code> и <code>path</code>. В зависимости от метода который вы используете. Например, вы хотите получить список фильмов за 2023 год в жанре <code>криминал</code>, тогда ваш запрос будет выглядеть так: <code>https://api.kinopoisk.dev/v1.4/movie?year=2023&genres.name=криминал</code>. Или вы хотите получить список фильмов с рейтингом выше 8, тогда ваш запрос будет выглядеть так: <code>https://api.kinopoisk.dev/v1.4/movie?rating.imdb=8-10</code>. Документация kinopoisk api может помочь вам составить нужный запрос, для этого воспользуйтесь ее конструктором. </p> <h3>Особенности синтекса query параметров</h3> <p> Ключи в query параметрах имеют разные типы значений. В зависимости от типа значения, вы можете использовать разные операторы для фильтрации для поиска максимально релевантного фильма, сериала и т.д. в базе. <br /> Поля с типом <code>Number</code> могут принимать значения в форматах: <code>rating.kp=1-10</code>, <code>rating.kp=1</code>, <code>year=2022&year=2023</code>. <br /> Поля с типом <code>Date</code> могут принимать значения в форматах: <code>premiere.russia=dd.mm.yyyy-dd.mm.yyyy</code>, <code>premiere.russia=dd.mm.yyyy</code>. <br /> Поля с типом <code>String</code> могут принимать значения в форматах: <code>genres.name=драма</code>, <code>genres.name=криминал</code>, <code>genres.name=криминал&genres.name=драма</code> <br/> Поля с типом <code>Boolean</code> могут принимать значения в форматах: <code>isSeries=true</code>, <code>isSeries=false</code>. <br /> Параметры жанров и стран могут принимать операторы <code>+</code> и <code>!</code>, для указания включаемых и исключаемых значений. Например, вы хотите получить список фильмов в жанрах <code>драма</code> и <code>криминал</code>, тогда ваш запрос будет выглядеть так: <code>genres.name=+драма&genres.name=+криминал</code>. Или вы хотите получить список фильмов с жанром <code>драма</code> и без жанра <code>криминал</code>, тогда ваш запрос будет выглядеть так: <code>genres.name=+драма&genres.name=!криминал</code>. <br /> </p> <p> Расшифровка операторов: <ul>   <li><code>!</code> - исключить. Этот символ нужно отправлять в кодированной форме <code>%21</code></li>   <li><code>+</code> - включить. Этот символ нужно отправлять в кодированной форме <code>%2B</code></li>   <li><code>-</code> - диапазон значений, используется в качестве разделителя.</li> </ul> </p>  <p>По вопросам работы с API обращайтесь в чат <a href=\"https://t.me/+jeHPZVXiLPFhODJi\">Developer Community KinopoiskDev</a>.</p>  <p>Если вы обнаружили ошибку или у вас есть предложения по улучшению, создавайте issue на <a href=\"https://github.com/mdwitr0/kinopoiskdev\">GitHub</a>.</p>  <h3>Полезные ссылки:</h3> <ul>   <li><a href=\"https://kinopoiskdev.readme.io\">Более удобная документация</a></li>   <li><a href=\"https://github.com/OpenMovieDB/kinopoiskdev_client\">JavaScript и TypeScript клиент (Устарел, ждет обновления)</a></li>   <li><a href=\"https://github.com/odi1n/kinopoisk_dev\">Python клиент (Устарел, ждет обновления)</a></li>   <li><a href=\"/documentation-json\">OpenAPI Specification (JSON)</a></li>   <li><a href=\"/documentation-yaml\">OpenAPI Specification (YAML)</a></li> </ul> 

API version: 1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kinopoisk_api

import (
	"encoding/json"
)

// Spouses struct for Spouses
type Spouses struct {
	Id *float32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Divorced *bool `json:"divorced,omitempty"`
	DivorcedReason *string `json:"divorcedReason,omitempty"`
	Sex *string `json:"sex,omitempty"`
	Children *float32 `json:"children,omitempty"`
	Relation *string `json:"relation,omitempty"`
}

// NewSpouses instantiates a new Spouses object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpouses() *Spouses {
	this := Spouses{}
	return &this
}

// NewSpousesWithDefaults instantiates a new Spouses object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpousesWithDefaults() *Spouses {
	this := Spouses{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Spouses) GetId() float32 {
	if o == nil || o.Id == nil {
		var ret float32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Spouses) GetIdOk() (*float32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Spouses) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given float32 and assigns it to the Id field.
func (o *Spouses) SetId(v float32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Spouses) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Spouses) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Spouses) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Spouses) SetName(v string) {
	o.Name = &v
}

// GetDivorced returns the Divorced field value if set, zero value otherwise.
func (o *Spouses) GetDivorced() bool {
	if o == nil || o.Divorced == nil {
		var ret bool
		return ret
	}
	return *o.Divorced
}

// GetDivorcedOk returns a tuple with the Divorced field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Spouses) GetDivorcedOk() (*bool, bool) {
	if o == nil || o.Divorced == nil {
		return nil, false
	}
	return o.Divorced, true
}

// HasDivorced returns a boolean if a field has been set.
func (o *Spouses) HasDivorced() bool {
	if o != nil && o.Divorced != nil {
		return true
	}

	return false
}

// SetDivorced gets a reference to the given bool and assigns it to the Divorced field.
func (o *Spouses) SetDivorced(v bool) {
	o.Divorced = &v
}

// GetDivorcedReason returns the DivorcedReason field value if set, zero value otherwise.
func (o *Spouses) GetDivorcedReason() string {
	if o == nil || o.DivorcedReason == nil {
		var ret string
		return ret
	}
	return *o.DivorcedReason
}

// GetDivorcedReasonOk returns a tuple with the DivorcedReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Spouses) GetDivorcedReasonOk() (*string, bool) {
	if o == nil || o.DivorcedReason == nil {
		return nil, false
	}
	return o.DivorcedReason, true
}

// HasDivorcedReason returns a boolean if a field has been set.
func (o *Spouses) HasDivorcedReason() bool {
	if o != nil && o.DivorcedReason != nil {
		return true
	}

	return false
}

// SetDivorcedReason gets a reference to the given string and assigns it to the DivorcedReason field.
func (o *Spouses) SetDivorcedReason(v string) {
	o.DivorcedReason = &v
}

// GetSex returns the Sex field value if set, zero value otherwise.
func (o *Spouses) GetSex() string {
	if o == nil || o.Sex == nil {
		var ret string
		return ret
	}
	return *o.Sex
}

// GetSexOk returns a tuple with the Sex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Spouses) GetSexOk() (*string, bool) {
	if o == nil || o.Sex == nil {
		return nil, false
	}
	return o.Sex, true
}

// HasSex returns a boolean if a field has been set.
func (o *Spouses) HasSex() bool {
	if o != nil && o.Sex != nil {
		return true
	}

	return false
}

// SetSex gets a reference to the given string and assigns it to the Sex field.
func (o *Spouses) SetSex(v string) {
	o.Sex = &v
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *Spouses) GetChildren() float32 {
	if o == nil || o.Children == nil {
		var ret float32
		return ret
	}
	return *o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Spouses) GetChildrenOk() (*float32, bool) {
	if o == nil || o.Children == nil {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *Spouses) HasChildren() bool {
	if o != nil && o.Children != nil {
		return true
	}

	return false
}

// SetChildren gets a reference to the given float32 and assigns it to the Children field.
func (o *Spouses) SetChildren(v float32) {
	o.Children = &v
}

// GetRelation returns the Relation field value if set, zero value otherwise.
func (o *Spouses) GetRelation() string {
	if o == nil || o.Relation == nil {
		var ret string
		return ret
	}
	return *o.Relation
}

// GetRelationOk returns a tuple with the Relation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Spouses) GetRelationOk() (*string, bool) {
	if o == nil || o.Relation == nil {
		return nil, false
	}
	return o.Relation, true
}

// HasRelation returns a boolean if a field has been set.
func (o *Spouses) HasRelation() bool {
	if o != nil && o.Relation != nil {
		return true
	}

	return false
}

// SetRelation gets a reference to the given string and assigns it to the Relation field.
func (o *Spouses) SetRelation(v string) {
	o.Relation = &v
}

func (o Spouses) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Divorced != nil {
		toSerialize["divorced"] = o.Divorced
	}
	if o.DivorcedReason != nil {
		toSerialize["divorcedReason"] = o.DivorcedReason
	}
	if o.Sex != nil {
		toSerialize["sex"] = o.Sex
	}
	if o.Children != nil {
		toSerialize["children"] = o.Children
	}
	if o.Relation != nil {
		toSerialize["relation"] = o.Relation
	}
	return json.Marshal(toSerialize)
}

type NullableSpouses struct {
	value *Spouses
	isSet bool
}

func (v NullableSpouses) Get() *Spouses {
	return v.value
}

func (v *NullableSpouses) Set(val *Spouses) {
	v.value = val
	v.isSet = true
}

func (v NullableSpouses) IsSet() bool {
	return v.isSet
}

func (v *NullableSpouses) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpouses(val *Spouses) *NullableSpouses {
	return &NullableSpouses{value: val, isSet: true}
}

func (v NullableSpouses) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpouses) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


