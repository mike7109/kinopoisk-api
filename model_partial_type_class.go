/*
Документация для неофициального API кинопоиска (kinopoisk.dev).

 <!-- Yandex.Metrika counter --> <div><img src=\"https://mc.yandex.ru/watch/62307766\" style=\"position:absolute; left:-9999px;\" alt=\"\" /></div> <!-- /Yandex.Metrika counter --> <p>Через этот API вы можете получить практически все данные из кинопоиска. Больше информации вы можете получить изучив эту документацию.</p> <h2>Как работать с документацией?</h2> <p> Для начала работы с API вам необходимо получить токен, который вы можете получить в боте <a href=\"https://t.me/kinopoiskdev_bot\">@kinopoiskdev_bot</a>. <br /> После получения токена, вам необходимо авторизоваться в документации, для этого нажмите на кнопку <strong>Authorize</strong> и введите токен в поле <strong>Value</strong>.<br /> После авторизации вы можете отправлять запросы к API, для этого нажмите на кнопку <strong>Try it out</strong> и заполните необходимые поля для составления нужного фильтра.<br /> После заполнения полей нажмите на кнопку <strong>Execute</strong> и получите ответ от API и пример запроса. </p> <h3>Как работать с API?</h3> <p> API работает по принципу REST, все запросы отправляются на адрес <code>https://api.kinopoisk.dev/</code> с указанием версии API и необходимого ресурса.<br /> Все запросы к API кинопоиска должны содержать заголовок <code>X-API-KEY</code> с вашим токеном. В противном случае вы получите ошибку <code>401</code>.<br /> При составлении запроса учитывайте, что все параметры должны быть в <code>query</code> и <code>path</code>. В зависимости от метода который вы используете. Например, вы хотите получить список фильмов за 2023 год в жанре <code>криминал</code>, тогда ваш запрос будет выглядеть так: <code>https://api.kinopoisk.dev/v1.4/movie?year=2023&genres.name=криминал</code>. Или вы хотите получить список фильмов с рейтингом выше 8, тогда ваш запрос будет выглядеть так: <code>https://api.kinopoisk.dev/v1.4/movie?rating.imdb=8-10</code>. Документация kinopoisk api может помочь вам составить нужный запрос, для этого воспользуйтесь ее конструктором. </p> <h3>Особенности синтекса query параметров</h3> <p> Ключи в query параметрах имеют разные типы значений. В зависимости от типа значения, вы можете использовать разные операторы для фильтрации для поиска максимально релевантного фильма, сериала и т.д. в базе. <br /> Поля с типом <code>Number</code> могут принимать значения в форматах: <code>rating.kp=1-10</code>, <code>rating.kp=1</code>, <code>year=2022&year=2023</code>. <br /> Поля с типом <code>Date</code> могут принимать значения в форматах: <code>premiere.russia=dd.mm.yyyy-dd.mm.yyyy</code>, <code>premiere.russia=dd.mm.yyyy</code>. <br /> Поля с типом <code>String</code> могут принимать значения в форматах: <code>genres.name=драма</code>, <code>genres.name=криминал</code>, <code>genres.name=криминал&genres.name=драма</code> <br/> Поля с типом <code>Boolean</code> могут принимать значения в форматах: <code>isSeries=true</code>, <code>isSeries=false</code>. <br /> Параметры жанров и стран могут принимать операторы <code>+</code> и <code>!</code>, для указания включаемых и исключаемых значений. Например, вы хотите получить список фильмов в жанрах <code>драма</code> и <code>криминал</code>, тогда ваш запрос будет выглядеть так: <code>genres.name=+драма&genres.name=+криминал</code>. Или вы хотите получить список фильмов с жанром <code>драма</code> и без жанра <code>криминал</code>, тогда ваш запрос будет выглядеть так: <code>genres.name=+драма&genres.name=!криминал</code>. <br /> </p> <p> Расшифровка операторов: <ul>   <li><code>!</code> - исключить. Этот символ нужно отправлять в кодированной форме <code>%21</code></li>   <li><code>+</code> - включить. Этот символ нужно отправлять в кодированной форме <code>%2B</code></li>   <li><code>-</code> - диапазон значений, используется в качестве разделителя.</li> </ul> </p>  <p>По вопросам работы с API обращайтесь в чат <a href=\"https://t.me/+jeHPZVXiLPFhODJi\">Developer Community KinopoiskDev</a>.</p>  <p>Если вы обнаружили ошибку или у вас есть предложения по улучшению, создавайте issue на <a href=\"https://github.com/mdwitr0/kinopoiskdev\">GitHub</a>.</p>  <h3>Полезные ссылки:</h3> <ul>   <li><a href=\"https://kinopoiskdev.readme.io\">Более удобная документация</a></li>   <li><a href=\"https://github.com/OpenMovieDB/kinopoiskdev_client\">JavaScript и TypeScript клиент (Устарел, ждет обновления)</a></li>   <li><a href=\"https://github.com/odi1n/kinopoisk_dev\">Python клиент (Устарел, ждет обновления)</a></li>   <li><a href=\"/documentation-json\">OpenAPI Specification (JSON)</a></li>   <li><a href=\"/documentation-yaml\">OpenAPI Specification (YAML)</a></li> </ul> 

API version: 1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kinopoisk_api

import (
	"encoding/json"
	"time"
)

// PartialTypeClass struct for PartialTypeClass
type PartialTypeClass struct {
	Nomination *Nomination `json:"nomination,omitempty"`
	Winning *bool `json:"winning,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	MovieId *float32 `json:"movieId,omitempty"`
}

// NewPartialTypeClass instantiates a new PartialTypeClass object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPartialTypeClass() *PartialTypeClass {
	this := PartialTypeClass{}
	return &this
}

// NewPartialTypeClassWithDefaults instantiates a new PartialTypeClass object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPartialTypeClassWithDefaults() *PartialTypeClass {
	this := PartialTypeClass{}
	return &this
}

// GetNomination returns the Nomination field value if set, zero value otherwise.
func (o *PartialTypeClass) GetNomination() Nomination {
	if o == nil || o.Nomination == nil {
		var ret Nomination
		return ret
	}
	return *o.Nomination
}

// GetNominationOk returns a tuple with the Nomination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartialTypeClass) GetNominationOk() (*Nomination, bool) {
	if o == nil || o.Nomination == nil {
		return nil, false
	}
	return o.Nomination, true
}

// HasNomination returns a boolean if a field has been set.
func (o *PartialTypeClass) HasNomination() bool {
	if o != nil && o.Nomination != nil {
		return true
	}

	return false
}

// SetNomination gets a reference to the given Nomination and assigns it to the Nomination field.
func (o *PartialTypeClass) SetNomination(v Nomination) {
	o.Nomination = &v
}

// GetWinning returns the Winning field value if set, zero value otherwise.
func (o *PartialTypeClass) GetWinning() bool {
	if o == nil || o.Winning == nil {
		var ret bool
		return ret
	}
	return *o.Winning
}

// GetWinningOk returns a tuple with the Winning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartialTypeClass) GetWinningOk() (*bool, bool) {
	if o == nil || o.Winning == nil {
		return nil, false
	}
	return o.Winning, true
}

// HasWinning returns a boolean if a field has been set.
func (o *PartialTypeClass) HasWinning() bool {
	if o != nil && o.Winning != nil {
		return true
	}

	return false
}

// SetWinning gets a reference to the given bool and assigns it to the Winning field.
func (o *PartialTypeClass) SetWinning(v bool) {
	o.Winning = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *PartialTypeClass) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartialTypeClass) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *PartialTypeClass) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *PartialTypeClass) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *PartialTypeClass) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartialTypeClass) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *PartialTypeClass) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *PartialTypeClass) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetMovieId returns the MovieId field value if set, zero value otherwise.
func (o *PartialTypeClass) GetMovieId() float32 {
	if o == nil || o.MovieId == nil {
		var ret float32
		return ret
	}
	return *o.MovieId
}

// GetMovieIdOk returns a tuple with the MovieId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartialTypeClass) GetMovieIdOk() (*float32, bool) {
	if o == nil || o.MovieId == nil {
		return nil, false
	}
	return o.MovieId, true
}

// HasMovieId returns a boolean if a field has been set.
func (o *PartialTypeClass) HasMovieId() bool {
	if o != nil && o.MovieId != nil {
		return true
	}

	return false
}

// SetMovieId gets a reference to the given float32 and assigns it to the MovieId field.
func (o *PartialTypeClass) SetMovieId(v float32) {
	o.MovieId = &v
}

func (o PartialTypeClass) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Nomination != nil {
		toSerialize["nomination"] = o.Nomination
	}
	if o.Winning != nil {
		toSerialize["winning"] = o.Winning
	}
	if o.UpdatedAt != nil {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.MovieId != nil {
		toSerialize["movieId"] = o.MovieId
	}
	return json.Marshal(toSerialize)
}

type NullablePartialTypeClass struct {
	value *PartialTypeClass
	isSet bool
}

func (v NullablePartialTypeClass) Get() *PartialTypeClass {
	return v.value
}

func (v *NullablePartialTypeClass) Set(val *PartialTypeClass) {
	v.value = val
	v.isSet = true
}

func (v NullablePartialTypeClass) IsSet() bool {
	return v.isSet
}

func (v *NullablePartialTypeClass) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartialTypeClass(val *PartialTypeClass) *NullablePartialTypeClass {
	return &NullablePartialTypeClass{value: val, isSet: true}
}

func (v NullablePartialTypeClass) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartialTypeClass) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


