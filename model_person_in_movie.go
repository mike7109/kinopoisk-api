/*
Документация для неофициального API кинопоиска (kinopoisk.dev).

 <!-- Yandex.Metrika counter --> <div><img src=\"https://mc.yandex.ru/watch/62307766\" style=\"position:absolute; left:-9999px;\" alt=\"\" /></div> <!-- /Yandex.Metrika counter --> <p>Через этот API вы можете получить практически все данные из кинопоиска. Больше информации вы можете получить изучив эту документацию.</p> <h2>Как работать с документацией?</h2> <p> Для начала работы с API вам необходимо получить токен, который вы можете получить в боте <a href=\"https://t.me/kinopoiskdev_bot\">@kinopoiskdev_bot</a>. <br /> После получения токена, вам необходимо авторизоваться в документации, для этого нажмите на кнопку <strong>Authorize</strong> и введите токен в поле <strong>Value</strong>.<br /> После авторизации вы можете отправлять запросы к API, для этого нажмите на кнопку <strong>Try it out</strong> и заполните необходимые поля для составления нужного фильтра.<br /> После заполнения полей нажмите на кнопку <strong>Execute</strong> и получите ответ от API и пример запроса. </p> <h3>Как работать с API?</h3> <p> API работает по принципу REST, все запросы отправляются на адрес <code>https://api.kinopoisk.dev/</code> с указанием версии API и необходимого ресурса.<br /> Все запросы к API кинопоиска должны содержать заголовок <code>X-API-KEY</code> с вашим токеном. В противном случае вы получите ошибку <code>401</code>.<br /> При составлении запроса учитывайте, что все параметры должны быть в <code>query</code> и <code>path</code>. В зависимости от метода который вы используете. Например, вы хотите получить список фильмов за 2023 год в жанре <code>криминал</code>, тогда ваш запрос будет выглядеть так: <code>https://api.kinopoisk.dev/v1.4/movie?year=2023&genres.name=криминал</code>. Или вы хотите получить список фильмов с рейтингом выше 8, тогда ваш запрос будет выглядеть так: <code>https://api.kinopoisk.dev/v1.4/movie?rating.imdb=8-10</code>. Документация kinopoisk api может помочь вам составить нужный запрос, для этого воспользуйтесь ее конструктором. </p> <h3>Особенности синтекса query параметров</h3> <p> Ключи в query параметрах имеют разные типы значений. В зависимости от типа значения, вы можете использовать разные операторы для фильтрации для поиска максимально релевантного фильма, сериала и т.д. в базе. <br /> Поля с типом <code>Number</code> могут принимать значения в форматах: <code>rating.kp=1-10</code>, <code>rating.kp=1</code>, <code>year=2022&year=2023</code>. <br /> Поля с типом <code>Date</code> могут принимать значения в форматах: <code>premiere.russia=dd.mm.yyyy-dd.mm.yyyy</code>, <code>premiere.russia=dd.mm.yyyy</code>. <br /> Поля с типом <code>String</code> могут принимать значения в форматах: <code>genres.name=драма</code>, <code>genres.name=криминал</code>, <code>genres.name=криминал&genres.name=драма</code> <br/> Поля с типом <code>Boolean</code> могут принимать значения в форматах: <code>isSeries=true</code>, <code>isSeries=false</code>. <br /> Параметры жанров и стран могут принимать операторы <code>+</code> и <code>!</code>, для указания включаемых и исключаемых значений. Например, вы хотите получить список фильмов в жанрах <code>драма</code> и <code>криминал</code>, тогда ваш запрос будет выглядеть так: <code>genres.name=+драма&genres.name=+криминал</code>. Или вы хотите получить список фильмов с жанром <code>драма</code> и без жанра <code>криминал</code>, тогда ваш запрос будет выглядеть так: <code>genres.name=+драма&genres.name=!криминал</code>. <br /> </p> <p> Расшифровка операторов: <ul>   <li><code>!</code> - исключить. Этот символ нужно отправлять в кодированной форме <code>%21</code></li>   <li><code>+</code> - включить. Этот символ нужно отправлять в кодированной форме <code>%2B</code></li>   <li><code>-</code> - диапазон значений, используется в качестве разделителя.</li> </ul> </p>  <p>По вопросам работы с API обращайтесь в чат <a href=\"https://t.me/+jeHPZVXiLPFhODJi\">Developer Community KinopoiskDev</a>.</p>  <p>Если вы обнаружили ошибку или у вас есть предложения по улучшению, создавайте issue на <a href=\"https://github.com/mdwitr0/kinopoiskdev\">GitHub</a>.</p>  <h3>Полезные ссылки:</h3> <ul>   <li><a href=\"https://kinopoiskdev.readme.io\">Более удобная документация</a></li>   <li><a href=\"https://github.com/OpenMovieDB/kinopoiskdev_client\">JavaScript и TypeScript клиент (Устарел, ждет обновления)</a></li>   <li><a href=\"https://github.com/odi1n/kinopoisk_dev\">Python клиент (Устарел, ждет обновления)</a></li>   <li><a href=\"/documentation-json\">OpenAPI Specification (JSON)</a></li>   <li><a href=\"/documentation-yaml\">OpenAPI Specification (YAML)</a></li> </ul> 

API version: 1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kinopoisk_api

import (
	"encoding/json"
)

// PersonInMovie struct for PersonInMovie
type PersonInMovie struct {
	// Id персоны с кинопоиска
	Id NullableFloat32 `json:"id,omitempty"`
	Photo NullableString `json:"photo,omitempty"`
	Name NullableString `json:"name,omitempty"`
	EnName NullableString `json:"enName,omitempty"`
	Description string `json:"description"`
	Profession string `json:"profession"`
	EnProfession string `json:"enProfession"`
}

// NewPersonInMovie instantiates a new PersonInMovie object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPersonInMovie(description string, profession string, enProfession string) *PersonInMovie {
	this := PersonInMovie{}
	this.Description = description
	this.Profession = profession
	this.EnProfession = enProfession
	return &this
}

// NewPersonInMovieWithDefaults instantiates a new PersonInMovie object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPersonInMovieWithDefaults() *PersonInMovie {
	this := PersonInMovie{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PersonInMovie) GetId() float32 {
	if o == nil || o.Id.Get() == nil {
		var ret float32
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PersonInMovie) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *PersonInMovie) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableFloat32 and assigns it to the Id field.
func (o *PersonInMovie) SetId(v float32) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *PersonInMovie) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *PersonInMovie) UnsetId() {
	o.Id.Unset()
}

// GetPhoto returns the Photo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PersonInMovie) GetPhoto() string {
	if o == nil || o.Photo.Get() == nil {
		var ret string
		return ret
	}
	return *o.Photo.Get()
}

// GetPhotoOk returns a tuple with the Photo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PersonInMovie) GetPhotoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Photo.Get(), o.Photo.IsSet()
}

// HasPhoto returns a boolean if a field has been set.
func (o *PersonInMovie) HasPhoto() bool {
	if o != nil && o.Photo.IsSet() {
		return true
	}

	return false
}

// SetPhoto gets a reference to the given NullableString and assigns it to the Photo field.
func (o *PersonInMovie) SetPhoto(v string) {
	o.Photo.Set(&v)
}
// SetPhotoNil sets the value for Photo to be an explicit nil
func (o *PersonInMovie) SetPhotoNil() {
	o.Photo.Set(nil)
}

// UnsetPhoto ensures that no value is present for Photo, not even an explicit nil
func (o *PersonInMovie) UnsetPhoto() {
	o.Photo.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PersonInMovie) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PersonInMovie) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *PersonInMovie) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *PersonInMovie) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *PersonInMovie) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *PersonInMovie) UnsetName() {
	o.Name.Unset()
}

// GetEnName returns the EnName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PersonInMovie) GetEnName() string {
	if o == nil || o.EnName.Get() == nil {
		var ret string
		return ret
	}
	return *o.EnName.Get()
}

// GetEnNameOk returns a tuple with the EnName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PersonInMovie) GetEnNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnName.Get(), o.EnName.IsSet()
}

// HasEnName returns a boolean if a field has been set.
func (o *PersonInMovie) HasEnName() bool {
	if o != nil && o.EnName.IsSet() {
		return true
	}

	return false
}

// SetEnName gets a reference to the given NullableString and assigns it to the EnName field.
func (o *PersonInMovie) SetEnName(v string) {
	o.EnName.Set(&v)
}
// SetEnNameNil sets the value for EnName to be an explicit nil
func (o *PersonInMovie) SetEnNameNil() {
	o.EnName.Set(nil)
}

// UnsetEnName ensures that no value is present for EnName, not even an explicit nil
func (o *PersonInMovie) UnsetEnName() {
	o.EnName.Unset()
}

// GetDescription returns the Description field value
func (o *PersonInMovie) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *PersonInMovie) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *PersonInMovie) SetDescription(v string) {
	o.Description = v
}

// GetProfession returns the Profession field value
func (o *PersonInMovie) GetProfession() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Profession
}

// GetProfessionOk returns a tuple with the Profession field value
// and a boolean to check if the value has been set.
func (o *PersonInMovie) GetProfessionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Profession, true
}

// SetProfession sets field value
func (o *PersonInMovie) SetProfession(v string) {
	o.Profession = v
}

// GetEnProfession returns the EnProfession field value
func (o *PersonInMovie) GetEnProfession() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnProfession
}

// GetEnProfessionOk returns a tuple with the EnProfession field value
// and a boolean to check if the value has been set.
func (o *PersonInMovie) GetEnProfessionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnProfession, true
}

// SetEnProfession sets field value
func (o *PersonInMovie) SetEnProfession(v string) {
	o.EnProfession = v
}

func (o PersonInMovie) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Photo.IsSet() {
		toSerialize["photo"] = o.Photo.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.EnName.IsSet() {
		toSerialize["enName"] = o.EnName.Get()
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["profession"] = o.Profession
	}
	if true {
		toSerialize["enProfession"] = o.EnProfession
	}
	return json.Marshal(toSerialize)
}

type NullablePersonInMovie struct {
	value *PersonInMovie
	isSet bool
}

func (v NullablePersonInMovie) Get() *PersonInMovie {
	return v.value
}

func (v *NullablePersonInMovie) Set(val *PersonInMovie) {
	v.value = val
	v.isSet = true
}

func (v NullablePersonInMovie) IsSet() bool {
	return v.isSet
}

func (v *NullablePersonInMovie) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePersonInMovie(val *PersonInMovie) *NullablePersonInMovie {
	return &NullablePersonInMovie{value: val, isSet: true}
}

func (v NullablePersonInMovie) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePersonInMovie) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


