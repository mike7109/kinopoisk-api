/*
Документация для неофициального API кинопоиска (kinopoisk.dev).

 <!-- Yandex.Metrika counter --> <div><img src=\"https://mc.yandex.ru/watch/62307766\" style=\"position:absolute; left:-9999px;\" alt=\"\" /></div> <!-- /Yandex.Metrika counter --> <p>Через этот API вы можете получить практически все данные из кинопоиска. Больше информации вы можете получить изучив эту документацию.</p> <h2>Как работать с документацией?</h2> <p> Для начала работы с API вам необходимо получить токен, который вы можете получить в боте <a href=\"https://t.me/kinopoiskdev_bot\">@kinopoiskdev_bot</a>. <br /> После получения токена, вам необходимо авторизоваться в документации, для этого нажмите на кнопку <strong>Authorize</strong> и введите токен в поле <strong>Value</strong>.<br /> После авторизации вы можете отправлять запросы к API, для этого нажмите на кнопку <strong>Try it out</strong> и заполните необходимые поля для составления нужного фильтра.<br /> После заполнения полей нажмите на кнопку <strong>Execute</strong> и получите ответ от API и пример запроса. </p> <h3>Как работать с API?</h3> <p> API работает по принципу REST, все запросы отправляются на адрес <code>https://api.kinopoisk.dev/</code> с указанием версии API и необходимого ресурса.<br /> Все запросы к API кинопоиска должны содержать заголовок <code>X-API-KEY</code> с вашим токеном. В противном случае вы получите ошибку <code>401</code>.<br /> При составлении запроса учитывайте, что все параметры должны быть в <code>query</code> и <code>path</code>. В зависимости от метода который вы используете. Например, вы хотите получить список фильмов за 2023 год в жанре <code>криминал</code>, тогда ваш запрос будет выглядеть так: <code>https://api.kinopoisk.dev/v1.4/movie?year=2023&genres.name=криминал</code>. Или вы хотите получить список фильмов с рейтингом выше 8, тогда ваш запрос будет выглядеть так: <code>https://api.kinopoisk.dev/v1.4/movie?rating.imdb=8-10</code>. Документация kinopoisk api может помочь вам составить нужный запрос, для этого воспользуйтесь ее конструктором. </p> <h3>Особенности синтекса query параметров</h3> <p> Ключи в query параметрах имеют разные типы значений. В зависимости от типа значения, вы можете использовать разные операторы для фильтрации для поиска максимально релевантного фильма, сериала и т.д. в базе. <br /> Поля с типом <code>Number</code> могут принимать значения в форматах: <code>rating.kp=1-10</code>, <code>rating.kp=1</code>, <code>year=2022&year=2023</code>. <br /> Поля с типом <code>Date</code> могут принимать значения в форматах: <code>premiere.russia=dd.mm.yyyy-dd.mm.yyyy</code>, <code>premiere.russia=dd.mm.yyyy</code>. <br /> Поля с типом <code>String</code> могут принимать значения в форматах: <code>genres.name=драма</code>, <code>genres.name=криминал</code>, <code>genres.name=криминал&genres.name=драма</code> <br/> Поля с типом <code>Boolean</code> могут принимать значения в форматах: <code>isSeries=true</code>, <code>isSeries=false</code>. <br /> Параметры жанров и стран могут принимать операторы <code>+</code> и <code>!</code>, для указания включаемых и исключаемых значений. Например, вы хотите получить список фильмов в жанрах <code>драма</code> и <code>криминал</code>, тогда ваш запрос будет выглядеть так: <code>genres.name=+драма&genres.name=+криминал</code>. Или вы хотите получить список фильмов с жанром <code>драма</code> и без жанра <code>криминал</code>, тогда ваш запрос будет выглядеть так: <code>genres.name=+драма&genres.name=!криминал</code>. <br /> </p> <p> Расшифровка операторов: <ul>   <li><code>!</code> - исключить. Этот символ нужно отправлять в кодированной форме <code>%21</code></li>   <li><code>+</code> - включить. Этот символ нужно отправлять в кодированной форме <code>%2B</code></li>   <li><code>-</code> - диапазон значений, используется в качестве разделителя.</li> </ul> </p>  <p>По вопросам работы с API обращайтесь в чат <a href=\"https://t.me/+jeHPZVXiLPFhODJi\">Developer Community KinopoiskDev</a>.</p>  <p>Если вы обнаружили ошибку или у вас есть предложения по улучшению, создавайте issue на <a href=\"https://github.com/mdwitr0/kinopoiskdev\">GitHub</a>.</p>  <h3>Полезные ссылки:</h3> <ul>   <li><a href=\"https://kinopoiskdev.readme.io\">Более удобная документация</a></li>   <li><a href=\"https://github.com/OpenMovieDB/kinopoiskdev_client\">JavaScript и TypeScript клиент (Устарел, ждет обновления)</a></li>   <li><a href=\"https://github.com/odi1n/kinopoisk_dev\">Python клиент (Устарел, ждет обновления)</a></li>   <li><a href=\"/documentation-json\">OpenAPI Specification (JSON)</a></li>   <li><a href=\"/documentation-yaml\">OpenAPI Specification (YAML)</a></li> </ul> 

API version: 1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kinopoisk_api

import (
	"encoding/json"
	"time"
)

// Premiere struct for Premiere
type Premiere struct {
	Country NullableString `json:"country,omitempty"`
	// Для более релевантного поиска, используйте интервал дат 01.02.2022-01.02.2023
	World NullableTime `json:"world,omitempty"`
	// Для более релевантного поиска, используйте интервал дат 01.02.2022-01.02.2023
	Russia NullableTime `json:"russia,omitempty"`
	Digital NullableString `json:"digital,omitempty"`
	// Для более релевантного поиска, используйте интервал дат 01.02.2022-01.02.2023
	Cinema NullableTime `json:"cinema,omitempty"`
	Bluray string `json:"bluray"`
	Dvd string `json:"dvd"`
}

// NewPremiere instantiates a new Premiere object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPremiere(bluray string, dvd string) *Premiere {
	this := Premiere{}
	this.Bluray = bluray
	this.Dvd = dvd
	return &this
}

// NewPremiereWithDefaults instantiates a new Premiere object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPremiereWithDefaults() *Premiere {
	this := Premiere{}
	return &this
}

// GetCountry returns the Country field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Premiere) GetCountry() string {
	if o == nil || o.Country.Get() == nil {
		var ret string
		return ret
	}
	return *o.Country.Get()
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Premiere) GetCountryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Country.Get(), o.Country.IsSet()
}

// HasCountry returns a boolean if a field has been set.
func (o *Premiere) HasCountry() bool {
	if o != nil && o.Country.IsSet() {
		return true
	}

	return false
}

// SetCountry gets a reference to the given NullableString and assigns it to the Country field.
func (o *Premiere) SetCountry(v string) {
	o.Country.Set(&v)
}
// SetCountryNil sets the value for Country to be an explicit nil
func (o *Premiere) SetCountryNil() {
	o.Country.Set(nil)
}

// UnsetCountry ensures that no value is present for Country, not even an explicit nil
func (o *Premiere) UnsetCountry() {
	o.Country.Unset()
}

// GetWorld returns the World field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Premiere) GetWorld() time.Time {
	if o == nil || o.World.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.World.Get()
}

// GetWorldOk returns a tuple with the World field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Premiere) GetWorldOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.World.Get(), o.World.IsSet()
}

// HasWorld returns a boolean if a field has been set.
func (o *Premiere) HasWorld() bool {
	if o != nil && o.World.IsSet() {
		return true
	}

	return false
}

// SetWorld gets a reference to the given NullableTime and assigns it to the World field.
func (o *Premiere) SetWorld(v time.Time) {
	o.World.Set(&v)
}
// SetWorldNil sets the value for World to be an explicit nil
func (o *Premiere) SetWorldNil() {
	o.World.Set(nil)
}

// UnsetWorld ensures that no value is present for World, not even an explicit nil
func (o *Premiere) UnsetWorld() {
	o.World.Unset()
}

// GetRussia returns the Russia field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Premiere) GetRussia() time.Time {
	if o == nil || o.Russia.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.Russia.Get()
}

// GetRussiaOk returns a tuple with the Russia field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Premiere) GetRussiaOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Russia.Get(), o.Russia.IsSet()
}

// HasRussia returns a boolean if a field has been set.
func (o *Premiere) HasRussia() bool {
	if o != nil && o.Russia.IsSet() {
		return true
	}

	return false
}

// SetRussia gets a reference to the given NullableTime and assigns it to the Russia field.
func (o *Premiere) SetRussia(v time.Time) {
	o.Russia.Set(&v)
}
// SetRussiaNil sets the value for Russia to be an explicit nil
func (o *Premiere) SetRussiaNil() {
	o.Russia.Set(nil)
}

// UnsetRussia ensures that no value is present for Russia, not even an explicit nil
func (o *Premiere) UnsetRussia() {
	o.Russia.Unset()
}

// GetDigital returns the Digital field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Premiere) GetDigital() string {
	if o == nil || o.Digital.Get() == nil {
		var ret string
		return ret
	}
	return *o.Digital.Get()
}

// GetDigitalOk returns a tuple with the Digital field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Premiere) GetDigitalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Digital.Get(), o.Digital.IsSet()
}

// HasDigital returns a boolean if a field has been set.
func (o *Premiere) HasDigital() bool {
	if o != nil && o.Digital.IsSet() {
		return true
	}

	return false
}

// SetDigital gets a reference to the given NullableString and assigns it to the Digital field.
func (o *Premiere) SetDigital(v string) {
	o.Digital.Set(&v)
}
// SetDigitalNil sets the value for Digital to be an explicit nil
func (o *Premiere) SetDigitalNil() {
	o.Digital.Set(nil)
}

// UnsetDigital ensures that no value is present for Digital, not even an explicit nil
func (o *Premiere) UnsetDigital() {
	o.Digital.Unset()
}

// GetCinema returns the Cinema field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Premiere) GetCinema() time.Time {
	if o == nil || o.Cinema.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.Cinema.Get()
}

// GetCinemaOk returns a tuple with the Cinema field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Premiere) GetCinemaOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cinema.Get(), o.Cinema.IsSet()
}

// HasCinema returns a boolean if a field has been set.
func (o *Premiere) HasCinema() bool {
	if o != nil && o.Cinema.IsSet() {
		return true
	}

	return false
}

// SetCinema gets a reference to the given NullableTime and assigns it to the Cinema field.
func (o *Premiere) SetCinema(v time.Time) {
	o.Cinema.Set(&v)
}
// SetCinemaNil sets the value for Cinema to be an explicit nil
func (o *Premiere) SetCinemaNil() {
	o.Cinema.Set(nil)
}

// UnsetCinema ensures that no value is present for Cinema, not even an explicit nil
func (o *Premiere) UnsetCinema() {
	o.Cinema.Unset()
}

// GetBluray returns the Bluray field value
func (o *Premiere) GetBluray() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Bluray
}

// GetBlurayOk returns a tuple with the Bluray field value
// and a boolean to check if the value has been set.
func (o *Premiere) GetBlurayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bluray, true
}

// SetBluray sets field value
func (o *Premiere) SetBluray(v string) {
	o.Bluray = v
}

// GetDvd returns the Dvd field value
func (o *Premiere) GetDvd() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Dvd
}

// GetDvdOk returns a tuple with the Dvd field value
// and a boolean to check if the value has been set.
func (o *Premiere) GetDvdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dvd, true
}

// SetDvd sets field value
func (o *Premiere) SetDvd(v string) {
	o.Dvd = v
}

func (o Premiere) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Country.IsSet() {
		toSerialize["country"] = o.Country.Get()
	}
	if o.World.IsSet() {
		toSerialize["world"] = o.World.Get()
	}
	if o.Russia.IsSet() {
		toSerialize["russia"] = o.Russia.Get()
	}
	if o.Digital.IsSet() {
		toSerialize["digital"] = o.Digital.Get()
	}
	if o.Cinema.IsSet() {
		toSerialize["cinema"] = o.Cinema.Get()
	}
	if true {
		toSerialize["bluray"] = o.Bluray
	}
	if true {
		toSerialize["dvd"] = o.Dvd
	}
	return json.Marshal(toSerialize)
}

type NullablePremiere struct {
	value *Premiere
	isSet bool
}

func (v NullablePremiere) Get() *Premiere {
	return v.value
}

func (v *NullablePremiere) Set(val *Premiere) {
	v.value = val
	v.isSet = true
}

func (v NullablePremiere) IsSet() bool {
	return v.isSet
}

func (v *NullablePremiere) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePremiere(val *Premiere) *NullablePremiere {
	return &NullablePremiere{value: val, isSet: true}
}

func (v NullablePremiere) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePremiere) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


