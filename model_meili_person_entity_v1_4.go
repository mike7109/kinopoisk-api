/*
Документация для неофициального API кинопоиска (kinopoisk.dev).

 <!-- Yandex.Metrika counter --> <div><img src=\"https://mc.yandex.ru/watch/62307766\" style=\"position:absolute; left:-9999px;\" alt=\"\" /></div> <!-- /Yandex.Metrika counter --> <p>Через этот API вы можете получить практически все данные из кинопоиска. Больше информации вы можете получить изучив эту документацию.</p> <h2>Как работать с документацией?</h2> <p> Для начала работы с API вам необходимо получить токен, который вы можете получить в боте <a href=\"https://t.me/kinopoiskdev_bot\">@kinopoiskdev_bot</a>. <br /> После получения токена, вам необходимо авторизоваться в документации, для этого нажмите на кнопку <strong>Authorize</strong> и введите токен в поле <strong>Value</strong>.<br /> После авторизации вы можете отправлять запросы к API, для этого нажмите на кнопку <strong>Try it out</strong> и заполните необходимые поля для составления нужного фильтра.<br /> После заполнения полей нажмите на кнопку <strong>Execute</strong> и получите ответ от API и пример запроса. </p> <h3>Как работать с API?</h3> <p> API работает по принципу REST, все запросы отправляются на адрес <code>https://api.kinopoisk.dev/</code> с указанием версии API и необходимого ресурса.<br /> Все запросы к API кинопоиска должны содержать заголовок <code>X-API-KEY</code> с вашим токеном. В противном случае вы получите ошибку <code>401</code>.<br /> При составлении запроса учитывайте, что все параметры должны быть в <code>query</code> и <code>path</code>. В зависимости от метода который вы используете. Например, вы хотите получить список фильмов за 2023 год в жанре <code>криминал</code>, тогда ваш запрос будет выглядеть так: <code>https://api.kinopoisk.dev/v1.4/movie?year=2023&genres.name=криминал</code>. Или вы хотите получить список фильмов с рейтингом выше 8, тогда ваш запрос будет выглядеть так: <code>https://api.kinopoisk.dev/v1.4/movie?rating.imdb=8-10</code>. Документация kinopoisk api может помочь вам составить нужный запрос, для этого воспользуйтесь ее конструктором. </p> <h3>Особенности синтекса query параметров</h3> <p> Ключи в query параметрах имеют разные типы значений. В зависимости от типа значения, вы можете использовать разные операторы для фильтрации для поиска максимально релевантного фильма, сериала и т.д. в базе. <br /> Поля с типом <code>Number</code> могут принимать значения в форматах: <code>rating.kp=1-10</code>, <code>rating.kp=1</code>, <code>year=2022&year=2023</code>. <br /> Поля с типом <code>Date</code> могут принимать значения в форматах: <code>premiere.russia=dd.mm.yyyy-dd.mm.yyyy</code>, <code>premiere.russia=dd.mm.yyyy</code>. <br /> Поля с типом <code>String</code> могут принимать значения в форматах: <code>genres.name=драма</code>, <code>genres.name=криминал</code>, <code>genres.name=криминал&genres.name=драма</code> <br/> Поля с типом <code>Boolean</code> могут принимать значения в форматах: <code>isSeries=true</code>, <code>isSeries=false</code>. <br /> Параметры жанров и стран могут принимать операторы <code>+</code> и <code>!</code>, для указания включаемых и исключаемых значений. Например, вы хотите получить список фильмов в жанрах <code>драма</code> и <code>криминал</code>, тогда ваш запрос будет выглядеть так: <code>genres.name=+драма&genres.name=+криминал</code>. Или вы хотите получить список фильмов с жанром <code>драма</code> и без жанра <code>криминал</code>, тогда ваш запрос будет выглядеть так: <code>genres.name=+драма&genres.name=!криминал</code>. <br /> </p> <p> Расшифровка операторов: <ul>   <li><code>!</code> - исключить. Этот символ нужно отправлять в кодированной форме <code>%21</code></li>   <li><code>+</code> - включить. Этот символ нужно отправлять в кодированной форме <code>%2B</code></li>   <li><code>-</code> - диапазон значений, используется в качестве разделителя.</li> </ul> </p>  <p>По вопросам работы с API обращайтесь в чат <a href=\"https://t.me/+jeHPZVXiLPFhODJi\">Developer Community KinopoiskDev</a>.</p>  <p>Если вы обнаружили ошибку или у вас есть предложения по улучшению, создавайте issue на <a href=\"https://github.com/mdwitr0/kinopoiskdev\">GitHub</a>.</p>  <h3>Полезные ссылки:</h3> <ul>   <li><a href=\"https://kinopoiskdev.readme.io\">Более удобная документация</a></li>   <li><a href=\"https://github.com/OpenMovieDB/kinopoiskdev_client\">JavaScript и TypeScript клиент (Устарел, ждет обновления)</a></li>   <li><a href=\"https://github.com/odi1n/kinopoisk_dev\">Python клиент (Устарел, ждет обновления)</a></li>   <li><a href=\"/documentation-json\">OpenAPI Specification (JSON)</a></li>   <li><a href=\"/documentation-yaml\">OpenAPI Specification (YAML)</a></li> </ul> 

API version: 1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kinopoisk_api

import (
	"encoding/json"
)

// MeiliPersonEntityV14 struct for MeiliPersonEntityV14
type MeiliPersonEntityV14 struct {
	Var1 map[string]interface{} `json:"1"`
	Id float32 `json:"id"`
	Name string `json:"name"`
	EnName string `json:"enName"`
	Photo string `json:"photo"`
	Sex string `json:"sex"`
	Birthday string `json:"birthday"`
	Death string `json:"death"`
	Age float32 `json:"age"`
	BirthPlace []BirthPlace `json:"birthPlace,omitempty"`
	DeathPlace []DeathPlace `json:"deathPlace,omitempty"`
	Profession []Profession `json:"profession,omitempty"`
	Growth float32 `json:"growth"`
}

// NewMeiliPersonEntityV14 instantiates a new MeiliPersonEntityV14 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeiliPersonEntityV14(var1 map[string]interface{}, id float32, name string, enName string, photo string, sex string, birthday string, death string, age float32, growth float32) *MeiliPersonEntityV14 {
	this := MeiliPersonEntityV14{}
	this.Var1 = var1
	this.Id = id
	this.Name = name
	this.EnName = enName
	this.Photo = photo
	this.Sex = sex
	this.Birthday = birthday
	this.Death = death
	this.Age = age
	this.Growth = growth
	return &this
}

// NewMeiliPersonEntityV14WithDefaults instantiates a new MeiliPersonEntityV14 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMeiliPersonEntityV14WithDefaults() *MeiliPersonEntityV14 {
	this := MeiliPersonEntityV14{}
	return &this
}

// GetVar1 returns the Var1 field value
func (o *MeiliPersonEntityV14) GetVar1() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Var1
}

// GetVar1Ok returns a tuple with the Var1 field value
// and a boolean to check if the value has been set.
func (o *MeiliPersonEntityV14) GetVar1Ok() (map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Var1, true
}

// SetVar1 sets field value
func (o *MeiliPersonEntityV14) SetVar1(v map[string]interface{}) {
	o.Var1 = v
}

// GetId returns the Id field value
func (o *MeiliPersonEntityV14) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MeiliPersonEntityV14) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MeiliPersonEntityV14) SetId(v float32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *MeiliPersonEntityV14) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MeiliPersonEntityV14) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MeiliPersonEntityV14) SetName(v string) {
	o.Name = v
}

// GetEnName returns the EnName field value
func (o *MeiliPersonEntityV14) GetEnName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnName
}

// GetEnNameOk returns a tuple with the EnName field value
// and a boolean to check if the value has been set.
func (o *MeiliPersonEntityV14) GetEnNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnName, true
}

// SetEnName sets field value
func (o *MeiliPersonEntityV14) SetEnName(v string) {
	o.EnName = v
}

// GetPhoto returns the Photo field value
func (o *MeiliPersonEntityV14) GetPhoto() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Photo
}

// GetPhotoOk returns a tuple with the Photo field value
// and a boolean to check if the value has been set.
func (o *MeiliPersonEntityV14) GetPhotoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Photo, true
}

// SetPhoto sets field value
func (o *MeiliPersonEntityV14) SetPhoto(v string) {
	o.Photo = v
}

// GetSex returns the Sex field value
func (o *MeiliPersonEntityV14) GetSex() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sex
}

// GetSexOk returns a tuple with the Sex field value
// and a boolean to check if the value has been set.
func (o *MeiliPersonEntityV14) GetSexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sex, true
}

// SetSex sets field value
func (o *MeiliPersonEntityV14) SetSex(v string) {
	o.Sex = v
}

// GetBirthday returns the Birthday field value
func (o *MeiliPersonEntityV14) GetBirthday() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Birthday
}

// GetBirthdayOk returns a tuple with the Birthday field value
// and a boolean to check if the value has been set.
func (o *MeiliPersonEntityV14) GetBirthdayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Birthday, true
}

// SetBirthday sets field value
func (o *MeiliPersonEntityV14) SetBirthday(v string) {
	o.Birthday = v
}

// GetDeath returns the Death field value
func (o *MeiliPersonEntityV14) GetDeath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Death
}

// GetDeathOk returns a tuple with the Death field value
// and a boolean to check if the value has been set.
func (o *MeiliPersonEntityV14) GetDeathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Death, true
}

// SetDeath sets field value
func (o *MeiliPersonEntityV14) SetDeath(v string) {
	o.Death = v
}

// GetAge returns the Age field value
func (o *MeiliPersonEntityV14) GetAge() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Age
}

// GetAgeOk returns a tuple with the Age field value
// and a boolean to check if the value has been set.
func (o *MeiliPersonEntityV14) GetAgeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Age, true
}

// SetAge sets field value
func (o *MeiliPersonEntityV14) SetAge(v float32) {
	o.Age = v
}

// GetBirthPlace returns the BirthPlace field value if set, zero value otherwise.
func (o *MeiliPersonEntityV14) GetBirthPlace() []BirthPlace {
	if o == nil || o.BirthPlace == nil {
		var ret []BirthPlace
		return ret
	}
	return o.BirthPlace
}

// GetBirthPlaceOk returns a tuple with the BirthPlace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeiliPersonEntityV14) GetBirthPlaceOk() ([]BirthPlace, bool) {
	if o == nil || o.BirthPlace == nil {
		return nil, false
	}
	return o.BirthPlace, true
}

// HasBirthPlace returns a boolean if a field has been set.
func (o *MeiliPersonEntityV14) HasBirthPlace() bool {
	if o != nil && o.BirthPlace != nil {
		return true
	}

	return false
}

// SetBirthPlace gets a reference to the given []BirthPlace and assigns it to the BirthPlace field.
func (o *MeiliPersonEntityV14) SetBirthPlace(v []BirthPlace) {
	o.BirthPlace = v
}

// GetDeathPlace returns the DeathPlace field value if set, zero value otherwise.
func (o *MeiliPersonEntityV14) GetDeathPlace() []DeathPlace {
	if o == nil || o.DeathPlace == nil {
		var ret []DeathPlace
		return ret
	}
	return o.DeathPlace
}

// GetDeathPlaceOk returns a tuple with the DeathPlace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeiliPersonEntityV14) GetDeathPlaceOk() ([]DeathPlace, bool) {
	if o == nil || o.DeathPlace == nil {
		return nil, false
	}
	return o.DeathPlace, true
}

// HasDeathPlace returns a boolean if a field has been set.
func (o *MeiliPersonEntityV14) HasDeathPlace() bool {
	if o != nil && o.DeathPlace != nil {
		return true
	}

	return false
}

// SetDeathPlace gets a reference to the given []DeathPlace and assigns it to the DeathPlace field.
func (o *MeiliPersonEntityV14) SetDeathPlace(v []DeathPlace) {
	o.DeathPlace = v
}

// GetProfession returns the Profession field value if set, zero value otherwise.
func (o *MeiliPersonEntityV14) GetProfession() []Profession {
	if o == nil || o.Profession == nil {
		var ret []Profession
		return ret
	}
	return o.Profession
}

// GetProfessionOk returns a tuple with the Profession field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeiliPersonEntityV14) GetProfessionOk() ([]Profession, bool) {
	if o == nil || o.Profession == nil {
		return nil, false
	}
	return o.Profession, true
}

// HasProfession returns a boolean if a field has been set.
func (o *MeiliPersonEntityV14) HasProfession() bool {
	if o != nil && o.Profession != nil {
		return true
	}

	return false
}

// SetProfession gets a reference to the given []Profession and assigns it to the Profession field.
func (o *MeiliPersonEntityV14) SetProfession(v []Profession) {
	o.Profession = v
}

// GetGrowth returns the Growth field value
func (o *MeiliPersonEntityV14) GetGrowth() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Growth
}

// GetGrowthOk returns a tuple with the Growth field value
// and a boolean to check if the value has been set.
func (o *MeiliPersonEntityV14) GetGrowthOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Growth, true
}

// SetGrowth sets field value
func (o *MeiliPersonEntityV14) SetGrowth(v float32) {
	o.Growth = v
}

func (o MeiliPersonEntityV14) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["1"] = o.Var1
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["enName"] = o.EnName
	}
	if true {
		toSerialize["photo"] = o.Photo
	}
	if true {
		toSerialize["sex"] = o.Sex
	}
	if true {
		toSerialize["birthday"] = o.Birthday
	}
	if true {
		toSerialize["death"] = o.Death
	}
	if true {
		toSerialize["age"] = o.Age
	}
	if o.BirthPlace != nil {
		toSerialize["birthPlace"] = o.BirthPlace
	}
	if o.DeathPlace != nil {
		toSerialize["deathPlace"] = o.DeathPlace
	}
	if o.Profession != nil {
		toSerialize["profession"] = o.Profession
	}
	if true {
		toSerialize["growth"] = o.Growth
	}
	return json.Marshal(toSerialize)
}

type NullableMeiliPersonEntityV14 struct {
	value *MeiliPersonEntityV14
	isSet bool
}

func (v NullableMeiliPersonEntityV14) Get() *MeiliPersonEntityV14 {
	return v.value
}

func (v *NullableMeiliPersonEntityV14) Set(val *MeiliPersonEntityV14) {
	v.value = val
	v.isSet = true
}

func (v NullableMeiliPersonEntityV14) IsSet() bool {
	return v.isSet
}

func (v *NullableMeiliPersonEntityV14) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeiliPersonEntityV14(val *MeiliPersonEntityV14) *NullableMeiliPersonEntityV14 {
	return &NullableMeiliPersonEntityV14{value: val, isSet: true}
}

func (v NullableMeiliPersonEntityV14) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeiliPersonEntityV14) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


