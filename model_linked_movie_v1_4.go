/*
Документация для неофициального API кинопоиска (kinopoisk.dev).

 <!-- Yandex.Metrika counter --> <div><img src=\"https://mc.yandex.ru/watch/62307766\" style=\"position:absolute; left:-9999px;\" alt=\"\" /></div> <!-- /Yandex.Metrika counter --> <p>Через этот API вы можете получить практически все данные из кинопоиска. Больше информации вы можете получить изучив эту документацию.</p> <h2>Как работать с документацией?</h2> <p> Для начала работы с API вам необходимо получить токен, который вы можете получить в боте <a href=\"https://t.me/kinopoiskdev_bot\">@kinopoiskdev_bot</a>. <br /> После получения токена, вам необходимо авторизоваться в документации, для этого нажмите на кнопку <strong>Authorize</strong> и введите токен в поле <strong>Value</strong>.<br /> После авторизации вы можете отправлять запросы к API, для этого нажмите на кнопку <strong>Try it out</strong> и заполните необходимые поля для составления нужного фильтра.<br /> После заполнения полей нажмите на кнопку <strong>Execute</strong> и получите ответ от API и пример запроса. </p> <h3>Как работать с API?</h3> <p> API работает по принципу REST, все запросы отправляются на адрес <code>https://api.kinopoisk.dev/</code> с указанием версии API и необходимого ресурса.<br /> Все запросы к API кинопоиска должны содержать заголовок <code>X-API-KEY</code> с вашим токеном. В противном случае вы получите ошибку <code>401</code>.<br /> При составлении запроса учитывайте, что все параметры должны быть в <code>query</code> и <code>path</code>. В зависимости от метода который вы используете. Например, вы хотите получить список фильмов за 2023 год в жанре <code>криминал</code>, тогда ваш запрос будет выглядеть так: <code>https://api.kinopoisk.dev/v1.4/movie?year=2023&genres.name=криминал</code>. Или вы хотите получить список фильмов с рейтингом выше 8, тогда ваш запрос будет выглядеть так: <code>https://api.kinopoisk.dev/v1.4/movie?rating.imdb=8-10</code>. Документация kinopoisk api может помочь вам составить нужный запрос, для этого воспользуйтесь ее конструктором. </p> <h3>Особенности синтекса query параметров</h3> <p> Ключи в query параметрах имеют разные типы значений. В зависимости от типа значения, вы можете использовать разные операторы для фильтрации для поиска максимально релевантного фильма, сериала и т.д. в базе. <br /> Поля с типом <code>Number</code> могут принимать значения в форматах: <code>rating.kp=1-10</code>, <code>rating.kp=1</code>, <code>year=2022&year=2023</code>. <br /> Поля с типом <code>Date</code> могут принимать значения в форматах: <code>premiere.russia=dd.mm.yyyy-dd.mm.yyyy</code>, <code>premiere.russia=dd.mm.yyyy</code>. <br /> Поля с типом <code>String</code> могут принимать значения в форматах: <code>genres.name=драма</code>, <code>genres.name=криминал</code>, <code>genres.name=криминал&genres.name=драма</code> <br/> Поля с типом <code>Boolean</code> могут принимать значения в форматах: <code>isSeries=true</code>, <code>isSeries=false</code>. <br /> Параметры жанров и стран могут принимать операторы <code>+</code> и <code>!</code>, для указания включаемых и исключаемых значений. Например, вы хотите получить список фильмов в жанрах <code>драма</code> и <code>криминал</code>, тогда ваш запрос будет выглядеть так: <code>genres.name=+драма&genres.name=+криминал</code>. Или вы хотите получить список фильмов с жанром <code>драма</code> и без жанра <code>криминал</code>, тогда ваш запрос будет выглядеть так: <code>genres.name=+драма&genres.name=!криминал</code>. <br /> </p> <p> Расшифровка операторов: <ul>   <li><code>!</code> - исключить. Этот символ нужно отправлять в кодированной форме <code>%21</code></li>   <li><code>+</code> - включить. Этот символ нужно отправлять в кодированной форме <code>%2B</code></li>   <li><code>-</code> - диапазон значений, используется в качестве разделителя.</li> </ul> </p>  <p>По вопросам работы с API обращайтесь в чат <a href=\"https://t.me/+jeHPZVXiLPFhODJi\">Developer Community KinopoiskDev</a>.</p>  <p>Если вы обнаружили ошибку или у вас есть предложения по улучшению, создавайте issue на <a href=\"https://github.com/mdwitr0/kinopoiskdev\">GitHub</a>.</p>  <h3>Полезные ссылки:</h3> <ul>   <li><a href=\"https://kinopoiskdev.readme.io\">Более удобная документация</a></li>   <li><a href=\"https://github.com/OpenMovieDB/kinopoiskdev_client\">JavaScript и TypeScript клиент (Устарел, ждет обновления)</a></li>   <li><a href=\"https://github.com/odi1n/kinopoisk_dev\">Python клиент (Устарел, ждет обновления)</a></li>   <li><a href=\"/documentation-json\">OpenAPI Specification (JSON)</a></li>   <li><a href=\"/documentation-yaml\">OpenAPI Specification (YAML)</a></li> </ul> 

API version: 1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kinopoisk_api

import (
	"encoding/json"
)

// LinkedMovieV14 struct for LinkedMovieV14
type LinkedMovieV14 struct {
	Id NullableFloat32 `json:"id,omitempty"`
	Rating Rating `json:"rating"`
	Year float32 `json:"year"`
	Name string `json:"name"`
	EnName string `json:"enName"`
	AlternativeName string `json:"alternativeName"`
	Type *string `json:"type,omitempty"`
	Poster ShortImage `json:"poster"`
}

// NewLinkedMovieV14 instantiates a new LinkedMovieV14 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkedMovieV14(rating Rating, year float32, name string, enName string, alternativeName string, poster ShortImage) *LinkedMovieV14 {
	this := LinkedMovieV14{}
	this.Rating = rating
	this.Year = year
	this.Name = name
	this.EnName = enName
	this.AlternativeName = alternativeName
	this.Poster = poster
	return &this
}

// NewLinkedMovieV14WithDefaults instantiates a new LinkedMovieV14 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkedMovieV14WithDefaults() *LinkedMovieV14 {
	this := LinkedMovieV14{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LinkedMovieV14) GetId() float32 {
	if o == nil || o.Id.Get() == nil {
		var ret float32
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LinkedMovieV14) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *LinkedMovieV14) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableFloat32 and assigns it to the Id field.
func (o *LinkedMovieV14) SetId(v float32) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *LinkedMovieV14) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *LinkedMovieV14) UnsetId() {
	o.Id.Unset()
}

// GetRating returns the Rating field value
func (o *LinkedMovieV14) GetRating() Rating {
	if o == nil {
		var ret Rating
		return ret
	}

	return o.Rating
}

// GetRatingOk returns a tuple with the Rating field value
// and a boolean to check if the value has been set.
func (o *LinkedMovieV14) GetRatingOk() (*Rating, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rating, true
}

// SetRating sets field value
func (o *LinkedMovieV14) SetRating(v Rating) {
	o.Rating = v
}

// GetYear returns the Year field value
func (o *LinkedMovieV14) GetYear() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Year
}

// GetYearOk returns a tuple with the Year field value
// and a boolean to check if the value has been set.
func (o *LinkedMovieV14) GetYearOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Year, true
}

// SetYear sets field value
func (o *LinkedMovieV14) SetYear(v float32) {
	o.Year = v
}

// GetName returns the Name field value
func (o *LinkedMovieV14) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *LinkedMovieV14) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *LinkedMovieV14) SetName(v string) {
	o.Name = v
}

// GetEnName returns the EnName field value
func (o *LinkedMovieV14) GetEnName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnName
}

// GetEnNameOk returns a tuple with the EnName field value
// and a boolean to check if the value has been set.
func (o *LinkedMovieV14) GetEnNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnName, true
}

// SetEnName sets field value
func (o *LinkedMovieV14) SetEnName(v string) {
	o.EnName = v
}

// GetAlternativeName returns the AlternativeName field value
func (o *LinkedMovieV14) GetAlternativeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AlternativeName
}

// GetAlternativeNameOk returns a tuple with the AlternativeName field value
// and a boolean to check if the value has been set.
func (o *LinkedMovieV14) GetAlternativeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AlternativeName, true
}

// SetAlternativeName sets field value
func (o *LinkedMovieV14) SetAlternativeName(v string) {
	o.AlternativeName = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *LinkedMovieV14) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkedMovieV14) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *LinkedMovieV14) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *LinkedMovieV14) SetType(v string) {
	o.Type = &v
}

// GetPoster returns the Poster field value
func (o *LinkedMovieV14) GetPoster() ShortImage {
	if o == nil {
		var ret ShortImage
		return ret
	}

	return o.Poster
}

// GetPosterOk returns a tuple with the Poster field value
// and a boolean to check if the value has been set.
func (o *LinkedMovieV14) GetPosterOk() (*ShortImage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Poster, true
}

// SetPoster sets field value
func (o *LinkedMovieV14) SetPoster(v ShortImage) {
	o.Poster = v
}

func (o LinkedMovieV14) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if true {
		toSerialize["rating"] = o.Rating
	}
	if true {
		toSerialize["year"] = o.Year
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["enName"] = o.EnName
	}
	if true {
		toSerialize["alternativeName"] = o.AlternativeName
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["poster"] = o.Poster
	}
	return json.Marshal(toSerialize)
}

type NullableLinkedMovieV14 struct {
	value *LinkedMovieV14
	isSet bool
}

func (v NullableLinkedMovieV14) Get() *LinkedMovieV14 {
	return v.value
}

func (v *NullableLinkedMovieV14) Set(val *LinkedMovieV14) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkedMovieV14) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkedMovieV14) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkedMovieV14(val *LinkedMovieV14) *NullableLinkedMovieV14 {
	return &NullableLinkedMovieV14{value: val, isSet: true}
}

func (v NullableLinkedMovieV14) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkedMovieV14) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


