/*
Документация для неофициального API кинопоиска (kinopoisk.dev).

 <!-- Yandex.Metrika counter --> <div><img src=\"https://mc.yandex.ru/watch/62307766\" style=\"position:absolute; left:-9999px;\" alt=\"\" /></div> <!-- /Yandex.Metrika counter --> <p>Через этот API вы можете получить практически все данные из кинопоиска. Больше информации вы можете получить изучив эту документацию.</p> <h2>Как работать с документацией?</h2> <p> Для начала работы с API вам необходимо получить токен, который вы можете получить в боте <a href=\"https://t.me/kinopoiskdev_bot\">@kinopoiskdev_bot</a>. <br /> После получения токена, вам необходимо авторизоваться в документации, для этого нажмите на кнопку <strong>Authorize</strong> и введите токен в поле <strong>Value</strong>.<br /> После авторизации вы можете отправлять запросы к API, для этого нажмите на кнопку <strong>Try it out</strong> и заполните необходимые поля для составления нужного фильтра.<br /> После заполнения полей нажмите на кнопку <strong>Execute</strong> и получите ответ от API и пример запроса. </p> <h3>Как работать с API?</h3> <p> API работает по принципу REST, все запросы отправляются на адрес <code>https://api.kinopoisk.dev/</code> с указанием версии API и необходимого ресурса.<br /> Все запросы к API кинопоиска должны содержать заголовок <code>X-API-KEY</code> с вашим токеном. В противном случае вы получите ошибку <code>401</code>.<br /> При составлении запроса учитывайте, что все параметры должны быть в <code>query</code> и <code>path</code>. В зависимости от метода который вы используете. Например, вы хотите получить список фильмов за 2023 год в жанре <code>криминал</code>, тогда ваш запрос будет выглядеть так: <code>https://api.kinopoisk.dev/v1.4/movie?year=2023&genres.name=криминал</code>. Или вы хотите получить список фильмов с рейтингом выше 8, тогда ваш запрос будет выглядеть так: <code>https://api.kinopoisk.dev/v1.4/movie?rating.imdb=8-10</code>. Документация kinopoisk api может помочь вам составить нужный запрос, для этого воспользуйтесь ее конструктором. </p> <h3>Особенности синтекса query параметров</h3> <p> Ключи в query параметрах имеют разные типы значений. В зависимости от типа значения, вы можете использовать разные операторы для фильтрации для поиска максимально релевантного фильма, сериала и т.д. в базе. <br /> Поля с типом <code>Number</code> могут принимать значения в форматах: <code>rating.kp=1-10</code>, <code>rating.kp=1</code>, <code>year=2022&year=2023</code>. <br /> Поля с типом <code>Date</code> могут принимать значения в форматах: <code>premiere.russia=dd.mm.yyyy-dd.mm.yyyy</code>, <code>premiere.russia=dd.mm.yyyy</code>. <br /> Поля с типом <code>String</code> могут принимать значения в форматах: <code>genres.name=драма</code>, <code>genres.name=криминал</code>, <code>genres.name=криминал&genres.name=драма</code> <br/> Поля с типом <code>Boolean</code> могут принимать значения в форматах: <code>isSeries=true</code>, <code>isSeries=false</code>. <br /> Параметры жанров и стран могут принимать операторы <code>+</code> и <code>!</code>, для указания включаемых и исключаемых значений. Например, вы хотите получить список фильмов в жанрах <code>драма</code> и <code>криминал</code>, тогда ваш запрос будет выглядеть так: <code>genres.name=+драма&genres.name=+криминал</code>. Или вы хотите получить список фильмов с жанром <code>драма</code> и без жанра <code>криминал</code>, тогда ваш запрос будет выглядеть так: <code>genres.name=+драма&genres.name=!криминал</code>. <br /> </p> <p> Расшифровка операторов: <ul>   <li><code>!</code> - исключить. Этот символ нужно отправлять в кодированной форме <code>%21</code></li>   <li><code>+</code> - включить. Этот символ нужно отправлять в кодированной форме <code>%2B</code></li>   <li><code>-</code> - диапазон значений, используется в качестве разделителя.</li> </ul> </p>  <p>По вопросам работы с API обращайтесь в чат <a href=\"https://t.me/+jeHPZVXiLPFhODJi\">Developer Community KinopoiskDev</a>.</p>  <p>Если вы обнаружили ошибку или у вас есть предложения по улучшению, создавайте issue на <a href=\"https://github.com/mdwitr0/kinopoiskdev\">GitHub</a>.</p>  <h3>Полезные ссылки:</h3> <ul>   <li><a href=\"https://kinopoiskdev.readme.io\">Более удобная документация</a></li>   <li><a href=\"https://github.com/OpenMovieDB/kinopoiskdev_client\">JavaScript и TypeScript клиент (Устарел, ждет обновления)</a></li>   <li><a href=\"https://github.com/odi1n/kinopoisk_dev\">Python клиент (Устарел, ждет обновления)</a></li>   <li><a href=\"/documentation-json\">OpenAPI Specification (JSON)</a></li>   <li><a href=\"/documentation-yaml\">OpenAPI Specification (YAML)</a></li> </ul> 

API version: 1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kinopoisk_api

import (
	"encoding/json"
)

// EpisodeV14 struct for EpisodeV14
type EpisodeV14 struct {
	Number *float32 `json:"number,omitempty"`
	Name *string `json:"name,omitempty"`
	EnName *string `json:"enName,omitempty"`
	// Deprecated
	Date *string `json:"date,omitempty"`
	Description *string `json:"description,omitempty"`
	Still *ShortImage `json:"still,omitempty"`
	AirDate *string `json:"airDate,omitempty"`
	EnDescription *string `json:"enDescription,omitempty"`
}

// NewEpisodeV14 instantiates a new EpisodeV14 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEpisodeV14() *EpisodeV14 {
	this := EpisodeV14{}
	return &this
}

// NewEpisodeV14WithDefaults instantiates a new EpisodeV14 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEpisodeV14WithDefaults() *EpisodeV14 {
	this := EpisodeV14{}
	return &this
}

// GetNumber returns the Number field value if set, zero value otherwise.
func (o *EpisodeV14) GetNumber() float32 {
	if o == nil || o.Number == nil {
		var ret float32
		return ret
	}
	return *o.Number
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EpisodeV14) GetNumberOk() (*float32, bool) {
	if o == nil || o.Number == nil {
		return nil, false
	}
	return o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *EpisodeV14) HasNumber() bool {
	if o != nil && o.Number != nil {
		return true
	}

	return false
}

// SetNumber gets a reference to the given float32 and assigns it to the Number field.
func (o *EpisodeV14) SetNumber(v float32) {
	o.Number = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EpisodeV14) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EpisodeV14) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EpisodeV14) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EpisodeV14) SetName(v string) {
	o.Name = &v
}

// GetEnName returns the EnName field value if set, zero value otherwise.
func (o *EpisodeV14) GetEnName() string {
	if o == nil || o.EnName == nil {
		var ret string
		return ret
	}
	return *o.EnName
}

// GetEnNameOk returns a tuple with the EnName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EpisodeV14) GetEnNameOk() (*string, bool) {
	if o == nil || o.EnName == nil {
		return nil, false
	}
	return o.EnName, true
}

// HasEnName returns a boolean if a field has been set.
func (o *EpisodeV14) HasEnName() bool {
	if o != nil && o.EnName != nil {
		return true
	}

	return false
}

// SetEnName gets a reference to the given string and assigns it to the EnName field.
func (o *EpisodeV14) SetEnName(v string) {
	o.EnName = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
// Deprecated
func (o *EpisodeV14) GetDate() string {
	if o == nil || o.Date == nil {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *EpisodeV14) GetDateOk() (*string, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *EpisodeV14) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
// Deprecated
func (o *EpisodeV14) SetDate(v string) {
	o.Date = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EpisodeV14) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EpisodeV14) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EpisodeV14) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EpisodeV14) SetDescription(v string) {
	o.Description = &v
}

// GetStill returns the Still field value if set, zero value otherwise.
func (o *EpisodeV14) GetStill() ShortImage {
	if o == nil || o.Still == nil {
		var ret ShortImage
		return ret
	}
	return *o.Still
}

// GetStillOk returns a tuple with the Still field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EpisodeV14) GetStillOk() (*ShortImage, bool) {
	if o == nil || o.Still == nil {
		return nil, false
	}
	return o.Still, true
}

// HasStill returns a boolean if a field has been set.
func (o *EpisodeV14) HasStill() bool {
	if o != nil && o.Still != nil {
		return true
	}

	return false
}

// SetStill gets a reference to the given ShortImage and assigns it to the Still field.
func (o *EpisodeV14) SetStill(v ShortImage) {
	o.Still = &v
}

// GetAirDate returns the AirDate field value if set, zero value otherwise.
func (o *EpisodeV14) GetAirDate() string {
	if o == nil || o.AirDate == nil {
		var ret string
		return ret
	}
	return *o.AirDate
}

// GetAirDateOk returns a tuple with the AirDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EpisodeV14) GetAirDateOk() (*string, bool) {
	if o == nil || o.AirDate == nil {
		return nil, false
	}
	return o.AirDate, true
}

// HasAirDate returns a boolean if a field has been set.
func (o *EpisodeV14) HasAirDate() bool {
	if o != nil && o.AirDate != nil {
		return true
	}

	return false
}

// SetAirDate gets a reference to the given string and assigns it to the AirDate field.
func (o *EpisodeV14) SetAirDate(v string) {
	o.AirDate = &v
}

// GetEnDescription returns the EnDescription field value if set, zero value otherwise.
func (o *EpisodeV14) GetEnDescription() string {
	if o == nil || o.EnDescription == nil {
		var ret string
		return ret
	}
	return *o.EnDescription
}

// GetEnDescriptionOk returns a tuple with the EnDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EpisodeV14) GetEnDescriptionOk() (*string, bool) {
	if o == nil || o.EnDescription == nil {
		return nil, false
	}
	return o.EnDescription, true
}

// HasEnDescription returns a boolean if a field has been set.
func (o *EpisodeV14) HasEnDescription() bool {
	if o != nil && o.EnDescription != nil {
		return true
	}

	return false
}

// SetEnDescription gets a reference to the given string and assigns it to the EnDescription field.
func (o *EpisodeV14) SetEnDescription(v string) {
	o.EnDescription = &v
}

func (o EpisodeV14) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Number != nil {
		toSerialize["number"] = o.Number
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.EnName != nil {
		toSerialize["enName"] = o.EnName
	}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Still != nil {
		toSerialize["still"] = o.Still
	}
	if o.AirDate != nil {
		toSerialize["airDate"] = o.AirDate
	}
	if o.EnDescription != nil {
		toSerialize["enDescription"] = o.EnDescription
	}
	return json.Marshal(toSerialize)
}

type NullableEpisodeV14 struct {
	value *EpisodeV14
	isSet bool
}

func (v NullableEpisodeV14) Get() *EpisodeV14 {
	return v.value
}

func (v *NullableEpisodeV14) Set(val *EpisodeV14) {
	v.value = val
	v.isSet = true
}

func (v NullableEpisodeV14) IsSet() bool {
	return v.isSet
}

func (v *NullableEpisodeV14) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEpisodeV14(val *EpisodeV14) *NullableEpisodeV14 {
	return &NullableEpisodeV14{value: val, isSet: true}
}

func (v NullableEpisodeV14) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEpisodeV14) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


