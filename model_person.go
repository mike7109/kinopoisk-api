/*
Документация для неофициального API кинопоиска (kinopoisk.dev).

 <!-- Yandex.Metrika counter --> <div><img src=\"https://mc.yandex.ru/watch/62307766\" style=\"position:absolute; left:-9999px;\" alt=\"\" /></div> <!-- /Yandex.Metrika counter --> <p>Через этот API вы можете получить практически все данные из кинопоиска. Больше информации вы можете получить изучив эту документацию.</p> <h2>Как работать с документацией?</h2> <p> Для начала работы с API вам необходимо получить токен, который вы можете получить в боте <a href=\"https://t.me/kinopoiskdev_bot\">@kinopoiskdev_bot</a>. <br /> После получения токена, вам необходимо авторизоваться в документации, для этого нажмите на кнопку <strong>Authorize</strong> и введите токен в поле <strong>Value</strong>.<br /> После авторизации вы можете отправлять запросы к API, для этого нажмите на кнопку <strong>Try it out</strong> и заполните необходимые поля для составления нужного фильтра.<br /> После заполнения полей нажмите на кнопку <strong>Execute</strong> и получите ответ от API и пример запроса. </p> <h3>Как работать с API?</h3> <p> API работает по принципу REST, все запросы отправляются на адрес <code>https://api.kinopoisk.dev/</code> с указанием версии API и необходимого ресурса.<br /> Все запросы к API кинопоиска должны содержать заголовок <code>X-API-KEY</code> с вашим токеном. В противном случае вы получите ошибку <code>401</code>.<br /> При составлении запроса учитывайте, что все параметры должны быть в <code>query</code> и <code>path</code>. В зависимости от метода который вы используете. Например, вы хотите получить список фильмов за 2023 год в жанре <code>криминал</code>, тогда ваш запрос будет выглядеть так: <code>https://api.kinopoisk.dev/v1.4/movie?year=2023&genres.name=криминал</code>. Или вы хотите получить список фильмов с рейтингом выше 8, тогда ваш запрос будет выглядеть так: <code>https://api.kinopoisk.dev/v1.4/movie?rating.imdb=8-10</code>. Документация kinopoisk api может помочь вам составить нужный запрос, для этого воспользуйтесь ее конструктором. </p> <h3>Особенности синтекса query параметров</h3> <p> Ключи в query параметрах имеют разные типы значений. В зависимости от типа значения, вы можете использовать разные операторы для фильтрации для поиска максимально релевантного фильма, сериала и т.д. в базе. <br /> Поля с типом <code>Number</code> могут принимать значения в форматах: <code>rating.kp=1-10</code>, <code>rating.kp=1</code>, <code>year=2022&year=2023</code>. <br /> Поля с типом <code>Date</code> могут принимать значения в форматах: <code>premiere.russia=dd.mm.yyyy-dd.mm.yyyy</code>, <code>premiere.russia=dd.mm.yyyy</code>. <br /> Поля с типом <code>String</code> могут принимать значения в форматах: <code>genres.name=драма</code>, <code>genres.name=криминал</code>, <code>genres.name=криминал&genres.name=драма</code> <br/> Поля с типом <code>Boolean</code> могут принимать значения в форматах: <code>isSeries=true</code>, <code>isSeries=false</code>. <br /> Параметры жанров и стран могут принимать операторы <code>+</code> и <code>!</code>, для указания включаемых и исключаемых значений. Например, вы хотите получить список фильмов в жанрах <code>драма</code> и <code>криминал</code>, тогда ваш запрос будет выглядеть так: <code>genres.name=+драма&genres.name=+криминал</code>. Или вы хотите получить список фильмов с жанром <code>драма</code> и без жанра <code>криминал</code>, тогда ваш запрос будет выглядеть так: <code>genres.name=+драма&genres.name=!криминал</code>. <br /> </p> <p> Расшифровка операторов: <ul>   <li><code>!</code> - исключить. Этот символ нужно отправлять в кодированной форме <code>%21</code></li>   <li><code>+</code> - включить. Этот символ нужно отправлять в кодированной форме <code>%2B</code></li>   <li><code>-</code> - диапазон значений, используется в качестве разделителя.</li> </ul> </p>  <p>По вопросам работы с API обращайтесь в чат <a href=\"https://t.me/+jeHPZVXiLPFhODJi\">Developer Community KinopoiskDev</a>.</p>  <p>Если вы обнаружили ошибку или у вас есть предложения по улучшению, создавайте issue на <a href=\"https://github.com/mdwitr0/kinopoiskdev\">GitHub</a>.</p>  <h3>Полезные ссылки:</h3> <ul>   <li><a href=\"https://kinopoiskdev.readme.io\">Более удобная документация</a></li>   <li><a href=\"https://github.com/OpenMovieDB/kinopoiskdev_client\">JavaScript и TypeScript клиент (Устарел, ждет обновления)</a></li>   <li><a href=\"https://github.com/odi1n/kinopoisk_dev\">Python клиент (Устарел, ждет обновления)</a></li>   <li><a href=\"/documentation-json\">OpenAPI Specification (JSON)</a></li>   <li><a href=\"/documentation-yaml\">OpenAPI Specification (YAML)</a></li> </ul> 

API version: 1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kinopoisk_api

import (
	"encoding/json"
	"time"
)

// Person struct for Person
type Person struct {
	Id float32 `json:"id"`
	Name NullableString `json:"name,omitempty"`
	EnName NullableString `json:"enName,omitempty"`
	Photo NullableString `json:"photo,omitempty"`
	Sex NullableString `json:"sex,omitempty"`
	Growth NullableFloat32 `json:"growth,omitempty"`
	Birthday NullableString `json:"birthday,omitempty"`
	Death NullableString `json:"death,omitempty"`
	Age NullableFloat32 `json:"age,omitempty"`
	BirthPlace []BirthPlace `json:"birthPlace,omitempty"`
	DeathPlace []DeathPlace `json:"deathPlace,omitempty"`
	Spouses *Spouses `json:"spouses,omitempty"`
	CountAwards *float32 `json:"countAwards,omitempty"`
	Profession []Profession `json:"profession,omitempty"`
	Facts []FactInPerson `json:"facts,omitempty"`
	Movies []MovieInPerson `json:"movies,omitempty"`
	UpdatedAt time.Time `json:"updatedAt"`
	CreatedAt time.Time `json:"createdAt"`
}

// NewPerson instantiates a new Person object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPerson(id float32, updatedAt time.Time, createdAt time.Time) *Person {
	this := Person{}
	this.Id = id
	this.UpdatedAt = updatedAt
	this.CreatedAt = createdAt
	return &this
}

// NewPersonWithDefaults instantiates a new Person object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPersonWithDefaults() *Person {
	this := Person{}
	return &this
}

// GetId returns the Id field value
func (o *Person) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Person) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Person) SetId(v float32) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Person) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Person) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *Person) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *Person) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *Person) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *Person) UnsetName() {
	o.Name.Unset()
}

// GetEnName returns the EnName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Person) GetEnName() string {
	if o == nil || o.EnName.Get() == nil {
		var ret string
		return ret
	}
	return *o.EnName.Get()
}

// GetEnNameOk returns a tuple with the EnName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Person) GetEnNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnName.Get(), o.EnName.IsSet()
}

// HasEnName returns a boolean if a field has been set.
func (o *Person) HasEnName() bool {
	if o != nil && o.EnName.IsSet() {
		return true
	}

	return false
}

// SetEnName gets a reference to the given NullableString and assigns it to the EnName field.
func (o *Person) SetEnName(v string) {
	o.EnName.Set(&v)
}
// SetEnNameNil sets the value for EnName to be an explicit nil
func (o *Person) SetEnNameNil() {
	o.EnName.Set(nil)
}

// UnsetEnName ensures that no value is present for EnName, not even an explicit nil
func (o *Person) UnsetEnName() {
	o.EnName.Unset()
}

// GetPhoto returns the Photo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Person) GetPhoto() string {
	if o == nil || o.Photo.Get() == nil {
		var ret string
		return ret
	}
	return *o.Photo.Get()
}

// GetPhotoOk returns a tuple with the Photo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Person) GetPhotoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Photo.Get(), o.Photo.IsSet()
}

// HasPhoto returns a boolean if a field has been set.
func (o *Person) HasPhoto() bool {
	if o != nil && o.Photo.IsSet() {
		return true
	}

	return false
}

// SetPhoto gets a reference to the given NullableString and assigns it to the Photo field.
func (o *Person) SetPhoto(v string) {
	o.Photo.Set(&v)
}
// SetPhotoNil sets the value for Photo to be an explicit nil
func (o *Person) SetPhotoNil() {
	o.Photo.Set(nil)
}

// UnsetPhoto ensures that no value is present for Photo, not even an explicit nil
func (o *Person) UnsetPhoto() {
	o.Photo.Unset()
}

// GetSex returns the Sex field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Person) GetSex() string {
	if o == nil || o.Sex.Get() == nil {
		var ret string
		return ret
	}
	return *o.Sex.Get()
}

// GetSexOk returns a tuple with the Sex field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Person) GetSexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sex.Get(), o.Sex.IsSet()
}

// HasSex returns a boolean if a field has been set.
func (o *Person) HasSex() bool {
	if o != nil && o.Sex.IsSet() {
		return true
	}

	return false
}

// SetSex gets a reference to the given NullableString and assigns it to the Sex field.
func (o *Person) SetSex(v string) {
	o.Sex.Set(&v)
}
// SetSexNil sets the value for Sex to be an explicit nil
func (o *Person) SetSexNil() {
	o.Sex.Set(nil)
}

// UnsetSex ensures that no value is present for Sex, not even an explicit nil
func (o *Person) UnsetSex() {
	o.Sex.Unset()
}

// GetGrowth returns the Growth field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Person) GetGrowth() float32 {
	if o == nil || o.Growth.Get() == nil {
		var ret float32
		return ret
	}
	return *o.Growth.Get()
}

// GetGrowthOk returns a tuple with the Growth field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Person) GetGrowthOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Growth.Get(), o.Growth.IsSet()
}

// HasGrowth returns a boolean if a field has been set.
func (o *Person) HasGrowth() bool {
	if o != nil && o.Growth.IsSet() {
		return true
	}

	return false
}

// SetGrowth gets a reference to the given NullableFloat32 and assigns it to the Growth field.
func (o *Person) SetGrowth(v float32) {
	o.Growth.Set(&v)
}
// SetGrowthNil sets the value for Growth to be an explicit nil
func (o *Person) SetGrowthNil() {
	o.Growth.Set(nil)
}

// UnsetGrowth ensures that no value is present for Growth, not even an explicit nil
func (o *Person) UnsetGrowth() {
	o.Growth.Unset()
}

// GetBirthday returns the Birthday field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Person) GetBirthday() string {
	if o == nil || o.Birthday.Get() == nil {
		var ret string
		return ret
	}
	return *o.Birthday.Get()
}

// GetBirthdayOk returns a tuple with the Birthday field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Person) GetBirthdayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Birthday.Get(), o.Birthday.IsSet()
}

// HasBirthday returns a boolean if a field has been set.
func (o *Person) HasBirthday() bool {
	if o != nil && o.Birthday.IsSet() {
		return true
	}

	return false
}

// SetBirthday gets a reference to the given NullableString and assigns it to the Birthday field.
func (o *Person) SetBirthday(v string) {
	o.Birthday.Set(&v)
}
// SetBirthdayNil sets the value for Birthday to be an explicit nil
func (o *Person) SetBirthdayNil() {
	o.Birthday.Set(nil)
}

// UnsetBirthday ensures that no value is present for Birthday, not even an explicit nil
func (o *Person) UnsetBirthday() {
	o.Birthday.Unset()
}

// GetDeath returns the Death field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Person) GetDeath() string {
	if o == nil || o.Death.Get() == nil {
		var ret string
		return ret
	}
	return *o.Death.Get()
}

// GetDeathOk returns a tuple with the Death field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Person) GetDeathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Death.Get(), o.Death.IsSet()
}

// HasDeath returns a boolean if a field has been set.
func (o *Person) HasDeath() bool {
	if o != nil && o.Death.IsSet() {
		return true
	}

	return false
}

// SetDeath gets a reference to the given NullableString and assigns it to the Death field.
func (o *Person) SetDeath(v string) {
	o.Death.Set(&v)
}
// SetDeathNil sets the value for Death to be an explicit nil
func (o *Person) SetDeathNil() {
	o.Death.Set(nil)
}

// UnsetDeath ensures that no value is present for Death, not even an explicit nil
func (o *Person) UnsetDeath() {
	o.Death.Unset()
}

// GetAge returns the Age field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Person) GetAge() float32 {
	if o == nil || o.Age.Get() == nil {
		var ret float32
		return ret
	}
	return *o.Age.Get()
}

// GetAgeOk returns a tuple with the Age field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Person) GetAgeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Age.Get(), o.Age.IsSet()
}

// HasAge returns a boolean if a field has been set.
func (o *Person) HasAge() bool {
	if o != nil && o.Age.IsSet() {
		return true
	}

	return false
}

// SetAge gets a reference to the given NullableFloat32 and assigns it to the Age field.
func (o *Person) SetAge(v float32) {
	o.Age.Set(&v)
}
// SetAgeNil sets the value for Age to be an explicit nil
func (o *Person) SetAgeNil() {
	o.Age.Set(nil)
}

// UnsetAge ensures that no value is present for Age, not even an explicit nil
func (o *Person) UnsetAge() {
	o.Age.Unset()
}

// GetBirthPlace returns the BirthPlace field value if set, zero value otherwise.
func (o *Person) GetBirthPlace() []BirthPlace {
	if o == nil || o.BirthPlace == nil {
		var ret []BirthPlace
		return ret
	}
	return o.BirthPlace
}

// GetBirthPlaceOk returns a tuple with the BirthPlace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Person) GetBirthPlaceOk() ([]BirthPlace, bool) {
	if o == nil || o.BirthPlace == nil {
		return nil, false
	}
	return o.BirthPlace, true
}

// HasBirthPlace returns a boolean if a field has been set.
func (o *Person) HasBirthPlace() bool {
	if o != nil && o.BirthPlace != nil {
		return true
	}

	return false
}

// SetBirthPlace gets a reference to the given []BirthPlace and assigns it to the BirthPlace field.
func (o *Person) SetBirthPlace(v []BirthPlace) {
	o.BirthPlace = v
}

// GetDeathPlace returns the DeathPlace field value if set, zero value otherwise.
func (o *Person) GetDeathPlace() []DeathPlace {
	if o == nil || o.DeathPlace == nil {
		var ret []DeathPlace
		return ret
	}
	return o.DeathPlace
}

// GetDeathPlaceOk returns a tuple with the DeathPlace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Person) GetDeathPlaceOk() ([]DeathPlace, bool) {
	if o == nil || o.DeathPlace == nil {
		return nil, false
	}
	return o.DeathPlace, true
}

// HasDeathPlace returns a boolean if a field has been set.
func (o *Person) HasDeathPlace() bool {
	if o != nil && o.DeathPlace != nil {
		return true
	}

	return false
}

// SetDeathPlace gets a reference to the given []DeathPlace and assigns it to the DeathPlace field.
func (o *Person) SetDeathPlace(v []DeathPlace) {
	o.DeathPlace = v
}

// GetSpouses returns the Spouses field value if set, zero value otherwise.
func (o *Person) GetSpouses() Spouses {
	if o == nil || o.Spouses == nil {
		var ret Spouses
		return ret
	}
	return *o.Spouses
}

// GetSpousesOk returns a tuple with the Spouses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Person) GetSpousesOk() (*Spouses, bool) {
	if o == nil || o.Spouses == nil {
		return nil, false
	}
	return o.Spouses, true
}

// HasSpouses returns a boolean if a field has been set.
func (o *Person) HasSpouses() bool {
	if o != nil && o.Spouses != nil {
		return true
	}

	return false
}

// SetSpouses gets a reference to the given Spouses and assigns it to the Spouses field.
func (o *Person) SetSpouses(v Spouses) {
	o.Spouses = &v
}

// GetCountAwards returns the CountAwards field value if set, zero value otherwise.
func (o *Person) GetCountAwards() float32 {
	if o == nil || o.CountAwards == nil {
		var ret float32
		return ret
	}
	return *o.CountAwards
}

// GetCountAwardsOk returns a tuple with the CountAwards field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Person) GetCountAwardsOk() (*float32, bool) {
	if o == nil || o.CountAwards == nil {
		return nil, false
	}
	return o.CountAwards, true
}

// HasCountAwards returns a boolean if a field has been set.
func (o *Person) HasCountAwards() bool {
	if o != nil && o.CountAwards != nil {
		return true
	}

	return false
}

// SetCountAwards gets a reference to the given float32 and assigns it to the CountAwards field.
func (o *Person) SetCountAwards(v float32) {
	o.CountAwards = &v
}

// GetProfession returns the Profession field value if set, zero value otherwise.
func (o *Person) GetProfession() []Profession {
	if o == nil || o.Profession == nil {
		var ret []Profession
		return ret
	}
	return o.Profession
}

// GetProfessionOk returns a tuple with the Profession field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Person) GetProfessionOk() ([]Profession, bool) {
	if o == nil || o.Profession == nil {
		return nil, false
	}
	return o.Profession, true
}

// HasProfession returns a boolean if a field has been set.
func (o *Person) HasProfession() bool {
	if o != nil && o.Profession != nil {
		return true
	}

	return false
}

// SetProfession gets a reference to the given []Profession and assigns it to the Profession field.
func (o *Person) SetProfession(v []Profession) {
	o.Profession = v
}

// GetFacts returns the Facts field value if set, zero value otherwise.
func (o *Person) GetFacts() []FactInPerson {
	if o == nil || o.Facts == nil {
		var ret []FactInPerson
		return ret
	}
	return o.Facts
}

// GetFactsOk returns a tuple with the Facts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Person) GetFactsOk() ([]FactInPerson, bool) {
	if o == nil || o.Facts == nil {
		return nil, false
	}
	return o.Facts, true
}

// HasFacts returns a boolean if a field has been set.
func (o *Person) HasFacts() bool {
	if o != nil && o.Facts != nil {
		return true
	}

	return false
}

// SetFacts gets a reference to the given []FactInPerson and assigns it to the Facts field.
func (o *Person) SetFacts(v []FactInPerson) {
	o.Facts = v
}

// GetMovies returns the Movies field value if set, zero value otherwise.
func (o *Person) GetMovies() []MovieInPerson {
	if o == nil || o.Movies == nil {
		var ret []MovieInPerson
		return ret
	}
	return o.Movies
}

// GetMoviesOk returns a tuple with the Movies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Person) GetMoviesOk() ([]MovieInPerson, bool) {
	if o == nil || o.Movies == nil {
		return nil, false
	}
	return o.Movies, true
}

// HasMovies returns a boolean if a field has been set.
func (o *Person) HasMovies() bool {
	if o != nil && o.Movies != nil {
		return true
	}

	return false
}

// SetMovies gets a reference to the given []MovieInPerson and assigns it to the Movies field.
func (o *Person) SetMovies(v []MovieInPerson) {
	o.Movies = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Person) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Person) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Person) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Person) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Person) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Person) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

func (o Person) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.EnName.IsSet() {
		toSerialize["enName"] = o.EnName.Get()
	}
	if o.Photo.IsSet() {
		toSerialize["photo"] = o.Photo.Get()
	}
	if o.Sex.IsSet() {
		toSerialize["sex"] = o.Sex.Get()
	}
	if o.Growth.IsSet() {
		toSerialize["growth"] = o.Growth.Get()
	}
	if o.Birthday.IsSet() {
		toSerialize["birthday"] = o.Birthday.Get()
	}
	if o.Death.IsSet() {
		toSerialize["death"] = o.Death.Get()
	}
	if o.Age.IsSet() {
		toSerialize["age"] = o.Age.Get()
	}
	if o.BirthPlace != nil {
		toSerialize["birthPlace"] = o.BirthPlace
	}
	if o.DeathPlace != nil {
		toSerialize["deathPlace"] = o.DeathPlace
	}
	if o.Spouses != nil {
		toSerialize["spouses"] = o.Spouses
	}
	if o.CountAwards != nil {
		toSerialize["countAwards"] = o.CountAwards
	}
	if o.Profession != nil {
		toSerialize["profession"] = o.Profession
	}
	if o.Facts != nil {
		toSerialize["facts"] = o.Facts
	}
	if o.Movies != nil {
		toSerialize["movies"] = o.Movies
	}
	if true {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if true {
		toSerialize["createdAt"] = o.CreatedAt
	}
	return json.Marshal(toSerialize)
}

type NullablePerson struct {
	value *Person
	isSet bool
}

func (v NullablePerson) Get() *Person {
	return v.value
}

func (v *NullablePerson) Set(val *Person) {
	v.value = val
	v.isSet = true
}

func (v NullablePerson) IsSet() bool {
	return v.isSet
}

func (v *NullablePerson) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePerson(val *Person) *NullablePerson {
	return &NullablePerson{value: val, isSet: true}
}

func (v NullablePerson) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePerson) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


